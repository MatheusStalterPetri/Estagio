import type { Keys } from '../../internal/types.js';
import type { FilterExpression } from './types.js';
export declare class FilterExpressionTree<T> {
    key: Keys<T>;
    protected operands: Array<FilterExpression<T>>;
    constructor(key: Keys<T>);
    get empty(): boolean;
    get length(): number;
    get all(): FilterExpression<T, keyof T>[];
    get ands(): FilterExpression<T, keyof T>[];
    get ors(): FilterExpression<T, keyof T>[];
    has(expression: FilterExpression<T>): boolean;
    add(expression: FilterExpression<T>): this;
    remove(expression: FilterExpression<T>): this;
    protected iterator(): Generator<FilterExpression<T, keyof T>, void, unknown>;
    [Symbol.iterator](): Generator<FilterExpression<T, keyof T>, void, unknown>;
}
//# sourceMappingURL=tree.d.ts.map