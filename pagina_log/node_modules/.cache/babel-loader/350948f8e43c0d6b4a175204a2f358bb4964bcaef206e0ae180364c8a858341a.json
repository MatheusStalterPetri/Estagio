{"ast":null,"code":"import { LitElement } from 'lit';\nexport class EventEmitterBase extends LitElement {\n  addEventListener(type, listener, options) {\n    super.addEventListener(type, listener, options);\n  }\n  removeEventListener(type, listener, options) {\n    super.removeEventListener(type, listener, options);\n  }\n  emitEvent(type, eventInitDict) {\n    return this.dispatchEvent(new CustomEvent(type, Object.assign({\n      bubbles: true,\n      cancelable: false,\n      composed: true,\n      detail: {}\n    }, eventInitDict)));\n  }\n}","map":{"version":3,"names":["LitElement","EventEmitterBase","addEventListener","type","listener","options","removeEventListener","emitEvent","eventInitDict","dispatchEvent","CustomEvent","Object","assign","bubbles","cancelable","composed","detail"],"sources":["../../../../src/internal/mixins/event-emitter.ts"],"sourcesContent":["import { LitElement } from 'lit';\n\nexport type UnpackCustomEvent<T> = T extends CustomEvent<infer U> ? U : never;\n\nexport class EventEmitterBase<E> extends LitElement {\n  public override addEventListener<K extends keyof M, M extends E & HTMLElementEventMap>(\n    type: K,\n    listener: (this: HTMLElement, ev: M[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  public override addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    super.addEventListener(type, listener, options);\n  }\n\n  public override removeEventListener<K extends keyof M, M extends E & HTMLElementEventMap>(\n    type: K,\n    listener: (this: HTMLElement, ev: M[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;\n  public override removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void {\n    super.removeEventListener(type, listener, options);\n  }\n  public emitEvent<K extends keyof E, D extends UnpackCustomEvent<E[K]>>(\n    type: K,\n    eventInitDict?: CustomEventInit<D>,\n  ): boolean {\n    return this.dispatchEvent(\n      new CustomEvent<D>(\n        type as string,\n        Object.assign(\n          {\n            bubbles: true,\n            cancelable: false,\n            composed: true,\n            detail: {},\n          },\n          eventInitDict,\n        ),\n      ),\n    );\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,KAAK;AAIhC,OAAM,MAAOC,gBAAoB,SAAQD,UAAU;EAMjCE,gBAAgBA,CAC9BC,IAAY,EACZC,QAA4C,EAC5CC,OAA2C;IAE3C,KAAK,CAACH,gBAAgB,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;EACjD;EAOgBC,mBAAmBA,CACjCH,IAAY,EACZC,QAA4C,EAC5CC,OAAwC;IAExC,KAAK,CAACC,mBAAmB,CAACH,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;EACpD;EACOE,SAASA,CACdJ,IAAO,EACPK,aAAkC;IAElC,OAAO,IAAI,CAACC,aAAa,CACvB,IAAIC,WAAW,CACbP,IAAc,EACdQ,MAAM,CAACC,MAAM,CACX;MACEC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE;KACT,EACDR,aAAa,CACd,CACF,CACF;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}