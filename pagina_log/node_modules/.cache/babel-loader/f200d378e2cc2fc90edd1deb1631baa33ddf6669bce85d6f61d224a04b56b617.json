{"ast":null,"code":"import { ref } from 'vue';\nexport default {\n  name: 'LogSquid',\n  setup() {\n    const logData = ref(null);\n    const handleFileUpload = event => {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        const logContent = reader.result;\n        const regex = /\\s+/g; // Expressão regular para encontrar sequências repetidas de espaços em branco\n\n        // Substitui as sequências repetidas de espaços em branco por uma única ocorrência do caractere\n        const cleanedLog = logContent.replace(regex, ' ');\n\n        // Separa o log em linhas e transforma cada linha em um objeto\n        const logArray = cleanedLog.split('\\n').map(line => {\n          const [timestamp, ip, duration, method, url, status_code, response_size, user_agent] = line.split(/\\s+/);\n          return {\n            timestamp,\n            ip,\n            duration,\n            method,\n            url,\n            status_code,\n            response_size,\n            user_agent\n          };\n        });\n        logData.value = logArray;\n      };\n      reader.readAsText(file);\n    };\n    return {\n      logData,\n      handleFileUpload\n    };\n  }\n};","map":{"version":3,"names":["ref","name","setup","logData","handleFileUpload","event","file","target","files","reader","FileReader","onload","logContent","result","regex","cleanedLog","replace","logArray","split","map","line","timestamp","ip","duration","method","url","status_code","response_size","user_agent","value","readAsText"],"sources":["C:\\Users\\mthss\\Documentos\\Projeto_estagio\\pagina_log\\src\\views\\LogView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Leitura de Log do Squid Web Cache</h1>\r\n    <input type=\"file\" @change=\"handleFileUpload\" />\r\n    <table v-if=\"logData\">\r\n      <thead>\r\n        <tr>\r\n          <th>IP de Origem</th>\r\n          <th>Data e Hora</th>\r\n          <th>URL Requisitada</th>\r\n          <th>Tamanho da Resposta</th>\r\n          <th>Código de Status</th>\r\n          <th>Agente de Usuário</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(log, index) in logData\" :key=\"index\">\r\n          <td>{{ log.ip }}</td>\r\n          <td>{{ log.timestamp }}</td>\r\n          <td>{{ log.url }}</td>\r\n          <td>{{ log.response_size }}</td>\r\n          <td>{{ log.status_code }}</td>\r\n          <td>{{ log.user_agent }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\n\r\nexport default {\r\n  name: 'LogSquid',\r\n\r\n  setup() {\r\n    const logData = ref(null);\r\n\r\n    const handleFileUpload = (event) => {\r\n      const file = event.target.files[0];\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = () => {\r\n        const logContent = reader.result;\r\n        const regex = /\\s+/g; // Expressão regular para encontrar sequências repetidas de espaços em branco\r\n\r\n        // Substitui as sequências repetidas de espaços em branco por uma única ocorrência do caractere\r\n        const cleanedLog = logContent.replace(regex, ' ');\r\n\r\n        // Separa o log em linhas e transforma cada linha em um objeto\r\n        const logArray = cleanedLog.split('\\n').map((line) => {\r\n          const [\r\n            timestamp,\r\n            ip,\r\n            duration,\r\n            method,\r\n            url,\r\n            status_code,\r\n            response_size,\r\n            user_agent\r\n          ] = line.split(/\\s+/);\r\n          return {\r\n            timestamp,\r\n            ip,\r\n            duration,\r\n            method,\r\n            url,\r\n            status_code,\r\n            response_size,\r\n            user_agent\r\n          };\r\n        });\r\n\r\n        logData.value = logArray;\r\n      };\r\n\r\n      reader.readAsText(file);\r\n    };\r\n\r\n    return {\r\n      logData,\r\n      handleFileUpload\r\n    };\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"AA8BA,SAASA,GAAE,QAAS,KAAK;AAEzB,eAAe;EACbC,IAAI,EAAE,UAAU;EAEhBC,KAAKA,CAAA,EAAG;IACN,MAAMC,OAAM,GAAIH,GAAG,CAAC,IAAI,CAAC;IAEzB,MAAMI,gBAAe,GAAKC,KAAK,IAAK;MAClC,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,MAAMC,MAAK,GAAI,IAAIC,UAAU,EAAE;MAE/BD,MAAM,CAACE,MAAK,GAAI,MAAM;QACpB,MAAMC,UAAS,GAAIH,MAAM,CAACI,MAAM;QAChC,MAAMC,KAAI,GAAI,MAAM,EAAE;;QAEtB;QACA,MAAMC,UAAS,GAAIH,UAAU,CAACI,OAAO,CAACF,KAAK,EAAE,GAAG,CAAC;;QAEjD;QACA,MAAMG,QAAO,GAAIF,UAAU,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAK;UACpD,MAAM,CACJC,SAAS,EACTC,EAAE,EACFC,QAAQ,EACRC,MAAM,EACNC,GAAG,EACHC,WAAW,EACXC,aAAa,EACbC,UAAS,CACX,GAAIR,IAAI,CAACF,KAAK,CAAC,KAAK,CAAC;UACrB,OAAO;YACLG,SAAS;YACTC,EAAE;YACFC,QAAQ;YACRC,MAAM;YACNC,GAAG;YACHC,WAAW;YACXC,aAAa;YACbC;UACF,CAAC;QACH,CAAC,CAAC;QAEFzB,OAAO,CAAC0B,KAAI,GAAIZ,QAAQ;MAC1B,CAAC;MAEDR,MAAM,CAACqB,UAAU,CAACxB,IAAI,CAAC;IACzB,CAAC;IAED,OAAO;MACLH,OAAO;MACPC;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}