{"ast":null,"code":"const START_INDEX = -1;\nvar DIRECTION;\n(function (DIRECTION) {\n  DIRECTION[DIRECTION[\"Up\"] = -1] = \"Up\";\n  DIRECTION[DIRECTION[\"Down\"] = 1] = \"Down\";\n})(DIRECTION || (DIRECTION = {}));\nexport class NavigationController {\n  get input() {\n    return this.host.singleSelect ? this.host.target : this.host.input;\n  }\n  get dataState() {\n    return this.host.dataState;\n  }\n  show() {\n    this.host._show(true);\n  }\n  hide() {\n    this.host._hide(true);\n  }\n  toggleSelect(index) {\n    this.host.toggleSelect(index);\n  }\n  get currentItem() {\n    const item = this.active;\n    return item === START_INDEX ? START_INDEX : item;\n  }\n  get firstItem() {\n    return this.dataState.findIndex(i => i.header !== true);\n  }\n  get lastItem() {\n    return this.dataState.length - 1;\n  }\n  scrollToActive(container, behavior = 'auto') {\n    var _a;\n    (_a = container.element(this.active)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({\n      block: 'center',\n      behavior\n    });\n    container.requestUpdate();\n  }\n  get active() {\n    return this._active;\n  }\n  set active(node) {\n    this._active = node;\n    this.host.requestUpdate();\n  }\n  constructor(host) {\n    this.host = host;\n    this.hostHandlers = new Map(Object.entries({\n      Escape: this.escape\n    }));\n    this.mainInputHandlers = new Map(Object.entries({\n      Escape: this.escape,\n      ArrowUp: this.hide,\n      ArrowDown: this.mainInputArrowDown,\n      Tab: this.tab,\n      Enter: this.enter\n    }));\n    this.searchInputHandlers = new Map(Object.entries({\n      Escape: this.escape,\n      ArrowUp: this.escape,\n      ArrowDown: this.inputArrowDown,\n      Tab: this.inputArrowDown\n    }));\n    this.listHandlers = new Map(Object.entries({\n      ArrowDown: this.arrowDown,\n      ArrowUp: this.arrowUp,\n      ' ': this.space,\n      Enter: this.enter,\n      Escape: this.escape,\n      Tab: this.tab,\n      Home: this.home,\n      End: this.end\n    }));\n    this._active = START_INDEX;\n    this.host.addController(this);\n  }\n  home(container) {\n    this.active = this.firstItem;\n    this.scrollToActive(container, 'smooth');\n  }\n  end(container) {\n    this.active = this.lastItem;\n    this.scrollToActive(container, 'smooth');\n  }\n  space() {\n    if (this.active === START_INDEX) {\n      return;\n    }\n    const item = this.dataState[this.active];\n    if (!item.header) {\n      this.toggleSelect(this.active);\n    }\n  }\n  escape() {\n    this.hide();\n    this.host.focus();\n  }\n  enter() {\n    if (this.active === START_INDEX) {\n      return;\n    }\n    this.space();\n    this.hide();\n    requestAnimationFrame(() => this.input.select());\n    this.host.focus();\n  }\n  inputArrowDown(container) {\n    container.focus();\n    this.arrowDown(container);\n  }\n  async mainInputArrowDown(container) {\n    this.show();\n    await container.updateComplete;\n    if (this.host.singleSelect) {\n      container.focus();\n      this.arrowDown(container);\n    }\n  }\n  tab() {\n    this.hide();\n    this.host.blur();\n  }\n  arrowDown(container) {\n    this.getNextItem(DIRECTION.Down);\n    this.scrollToActive(container);\n  }\n  arrowUp(container) {\n    this.getNextItem(DIRECTION.Up);\n    this.scrollToActive(container);\n  }\n  getNextItem(direction) {\n    const next = this.getNearestItem(this.currentItem, direction);\n    if (next === -1) {\n      if (this.active === this.firstItem) {\n        this.input.focus();\n        this.active = START_INDEX;\n      }\n      return;\n    }\n    this.active = next;\n  }\n  getNearestItem(startIndex, direction) {\n    var _a;\n    let index = startIndex;\n    const items = this.dataState;\n    while ((_a = items[index + direction]) === null || _a === void 0 ? void 0 : _a.header) {\n      index += direction;\n    }\n    index += direction;\n    if (index >= 0 && index < items.length) {\n      return index;\n    } else {\n      return -1;\n    }\n  }\n  hostConnected() {}\n  hostDisconnected() {\n    this.active = START_INDEX;\n  }\n  navigateTo(item, container) {\n    this.active = this.dataState.findIndex(i => i === item);\n    this.scrollToActive(container, 'smooth');\n  }\n  navigateHost(event) {\n    if (this.hostHandlers.has(event.key)) {\n      event.preventDefault();\n      this.hostHandlers.get(event.key).call(this);\n    }\n  }\n  navigateMainInput(event, container) {\n    event.stopPropagation();\n    if (this.mainInputHandlers.has(event.key)) {\n      event.preventDefault();\n      this.mainInputHandlers.get(event.key).call(this, container);\n    }\n  }\n  navigateSearchInput(event, container) {\n    event.stopPropagation();\n    if (this.searchInputHandlers.has(event.key)) {\n      event.preventDefault();\n      this.searchInputHandlers.get(event.key).call(this, container);\n    }\n  }\n  navigateList(event, container) {\n    event.stopPropagation();\n    if (this.listHandlers.has(event.key)) {\n      event.preventDefault();\n      this.listHandlers.get(event.key).call(this, container);\n    }\n  }\n}","map":{"version":3,"names":["START_INDEX","DIRECTION","NavigationController","input","host","singleSelect","target","dataState","show","_show","hide","_hide","toggleSelect","index","currentItem","item","active","firstItem","findIndex","i","header","lastItem","length","scrollToActive","container","behavior","_a","element","scrollIntoView","block","requestUpdate","_active","node","constructor","hostHandlers","Map","Object","entries","Escape","escape","mainInputHandlers","ArrowUp","ArrowDown","mainInputArrowDown","Tab","tab","Enter","enter","searchInputHandlers","inputArrowDown","listHandlers","arrowDown","arrowUp","space","Home","home","End","end","addController","focus","requestAnimationFrame","select","updateComplete","blur","getNextItem","Down","Up","direction","next","getNearestItem","startIndex","items","hostConnected","hostDisconnected","navigateTo","navigateHost","event","has","key","preventDefault","get","call","navigateMainInput","stopPropagation","navigateSearchInput","navigateList"],"sources":["../../../../src/components/combo/controllers/navigation.ts"],"sourcesContent":["import { ReactiveController } from 'lit';\nimport IgcComboListComponent from '../combo-list.js';\nimport { ComboRecord, ComboHost } from '../types.js';\n\nconst START_INDEX: Readonly<number> = -1;\n\nenum DIRECTION {\n  Up = -1,\n  Down = 1,\n}\n\nexport class NavigationController<T extends object>\n  implements ReactiveController\n{\n  protected hostHandlers = new Map(\n    Object.entries({\n      Escape: this.escape,\n    })\n  );\n\n  protected mainInputHandlers = new Map(\n    Object.entries({\n      Escape: this.escape,\n      ArrowUp: this.hide,\n      ArrowDown: this.mainInputArrowDown,\n      Tab: this.tab,\n      Enter: this.enter,\n    })\n  );\n\n  protected searchInputHandlers = new Map(\n    Object.entries({\n      Escape: this.escape,\n      ArrowUp: this.escape,\n      ArrowDown: this.inputArrowDown,\n      Tab: this.inputArrowDown,\n    })\n  );\n\n  protected listHandlers = new Map(\n    Object.entries({\n      ArrowDown: this.arrowDown,\n      ArrowUp: this.arrowUp,\n      ' ': this.space,\n      Enter: this.enter,\n      Escape: this.escape,\n      Tab: this.tab,\n      Home: this.home,\n      End: this.end,\n    })\n  );\n\n  protected _active = START_INDEX;\n\n  public get input() {\n    // @ts-expect-error protected access\n    return this.host.singleSelect ? this.host.target : this.host.input;\n  }\n\n  public get dataState() {\n    // @ts-expect-error protected access\n    return this.host.dataState;\n  }\n\n  public show() {\n    // @ts-expect-error protected access\n    this.host._show(true);\n  }\n\n  public hide() {\n    // @ts-expect-error protected access\n    this.host._hide(true);\n  }\n\n  public toggleSelect(index: number) {\n    // @ts-expect-error protected access\n    this.host.toggleSelect(index);\n  }\n\n  protected get currentItem() {\n    const item = this.active;\n    return item === START_INDEX ? START_INDEX : item;\n  }\n\n  protected get firstItem() {\n    return this.dataState.findIndex((i: ComboRecord<T>) => i.header !== true);\n  }\n\n  protected get lastItem() {\n    return this.dataState.length - 1;\n  }\n\n  protected scrollToActive(\n    container: IgcComboListComponent,\n    behavior: ScrollBehavior = 'auto'\n  ) {\n    container.element(this.active)?.scrollIntoView({\n      block: 'center',\n      behavior,\n    });\n\n    container.requestUpdate();\n  }\n\n  public get active() {\n    return this._active;\n  }\n\n  public set active(node: number) {\n    this._active = node;\n    this.host.requestUpdate();\n  }\n\n  constructor(protected host: ComboHost<T>) {\n    this.host.addController(this);\n  }\n\n  protected home(container: IgcComboListComponent) {\n    this.active = this.firstItem;\n    this.scrollToActive(container, 'smooth');\n  }\n\n  protected end(container: IgcComboListComponent) {\n    this.active = this.lastItem;\n    this.scrollToActive(container, 'smooth');\n  }\n\n  protected space() {\n    if (this.active === START_INDEX) {\n      return;\n    }\n\n    const item = this.dataState[this.active];\n\n    if (!item.header) {\n      this.toggleSelect(this.active);\n    }\n  }\n\n  protected escape() {\n    this.hide();\n    this.host.focus();\n  }\n\n  protected enter() {\n    if (this.active === START_INDEX) {\n      return;\n    }\n\n    this.space();\n    this.hide();\n    requestAnimationFrame(() => this.input.select());\n    this.host.focus();\n  }\n\n  protected inputArrowDown(container: IgcComboListComponent) {\n    container.focus();\n    this.arrowDown(container);\n  }\n\n  protected async mainInputArrowDown(container: IgcComboListComponent) {\n    this.show();\n    await container.updateComplete;\n\n    if (this.host.singleSelect) {\n      container.focus();\n      this.arrowDown(container);\n    }\n  }\n\n  protected tab() {\n    this.hide();\n    this.host.blur();\n  }\n\n  protected arrowDown(container: IgcComboListComponent) {\n    this.getNextItem(DIRECTION.Down);\n    this.scrollToActive(container);\n  }\n\n  protected arrowUp(container: IgcComboListComponent) {\n    this.getNextItem(DIRECTION.Up);\n    this.scrollToActive(container);\n  }\n\n  protected getNextItem(direction: DIRECTION) {\n    const next = this.getNearestItem(this.currentItem, direction);\n\n    if (next === -1) {\n      if (this.active === this.firstItem) {\n        this.input.focus();\n        this.active = START_INDEX;\n      }\n      return;\n    }\n\n    this.active = next;\n  }\n\n  protected getNearestItem(startIndex: number, direction: number) {\n    let index = startIndex;\n    const items = this.dataState;\n\n    while (items[index + direction]?.header) {\n      index += direction;\n    }\n\n    index += direction;\n\n    if (index >= 0 && index < items.length) {\n      return index;\n    } else {\n      return -1;\n    }\n  }\n\n  public hostConnected() {}\n\n  public hostDisconnected() {\n    this.active = START_INDEX;\n  }\n\n  public navigateTo(item: T, container: IgcComboListComponent) {\n    this.active = this.dataState.findIndex((i) => i === item);\n    this.scrollToActive(container, 'smooth');\n  }\n\n  public navigateHost(event: KeyboardEvent) {\n    if (this.hostHandlers.has(event.key)) {\n      event.preventDefault();\n      this.hostHandlers.get(event.key)!.call(this);\n    }\n  }\n\n  public navigateMainInput(\n    event: KeyboardEvent,\n    container: IgcComboListComponent\n  ) {\n    event.stopPropagation();\n\n    if (this.mainInputHandlers.has(event.key)) {\n      event.preventDefault();\n      this.mainInputHandlers.get(event.key)!.call(this, container);\n    }\n  }\n\n  public navigateSearchInput(\n    event: KeyboardEvent,\n    container: IgcComboListComponent\n  ) {\n    event.stopPropagation();\n\n    if (this.searchInputHandlers.has(event.key)) {\n      event.preventDefault();\n      this.searchInputHandlers.get(event.key)!.call(this, container);\n    }\n  }\n\n  public navigateList(event: KeyboardEvent, container: IgcComboListComponent) {\n    event.stopPropagation();\n\n    if (this.listHandlers.has(event.key)) {\n      event.preventDefault();\n      this.listHandlers.get(event.key)!.call(this, container);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}