{"ast":null,"code":"var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FilterController_instances, _FilterController_virtualizer_get, _FilterController_emitFilteringEvent, _FilterController_emitFilteredEvent, _FilterController_filter;\nimport { PIPELINE } from '../internal/constants.js';\nimport { asArray, getFilterOperandsFor } from '../internal/utils.js';\nimport { FilterState } from '../operations/filter/state.js';\nexport class FilterController {\n  constructor(host) {\n    this.host = host;\n    _FilterController_instances.add(this);\n    this.state = new FilterState();\n    this.host.addController(this);\n  }\n  get filterRow() {\n    // @ts-expect-error - protected access\n    return this.host.filterRow;\n  }\n  hostConnected() {}\n  hostUpdate() {\n    var _a;\n    (_a = this.filterRow) === null || _a === void 0 ? void 0 : _a.requestUpdate();\n  }\n  get(key) {\n    return this.state.get(key);\n  }\n  reset(key) {\n    key ? this.state.delete(key) : this.state.clear();\n  }\n  setActiveColumn(column) {\n    var _a;\n    if ((column === null || column === void 0 ? void 0 : column.filter) && ((_a = this.filterRow) === null || _a === void 0 ? void 0 : _a.active)) {\n      this.filterRow.column = column;\n      this.filterRow.expression = this.getDefaultExpression(column);\n      this.host.requestUpdate();\n    }\n  }\n  getDefaultExpression(column) {\n    var _a;\n    const caseSensitive = typeof column.filter === 'boolean' ? false : Boolean((_a = column.filter) === null || _a === void 0 ? void 0 : _a.caseSensitive);\n    const operands = getFilterOperandsFor(column);\n    const keys = Object.keys(operands);\n    // XXX: Types\n    return {\n      key: column.key,\n      condition: operands[keys[0]],\n      caseSensitive\n    };\n  }\n  async removeAllExpressions(key) {\n    var _a, _b, _c, _d;\n    const state = (_b = (_a = this.get(key)) === null || _a === void 0 ? void 0 : _a.all) !== null && _b !== void 0 ? _b : [];\n    if (!this.host.emitEvent('filtering', {\n      detail: {\n        key,\n        expressions: state,\n        type: 'remove'\n      },\n      cancelable: true\n    })) {\n      return;\n    }\n    this.reset(key);\n    __classPrivateFieldGet(this, _FilterController_instances, \"m\", _FilterController_filter).call(this, []);\n    await this.host.updateComplete;\n    __classPrivateFieldGet(this, _FilterController_instances, \"m\", _FilterController_emitFilteredEvent).call(this, {\n      key,\n      state: (_d = (_c = this.get(key)) === null || _c === void 0 ? void 0 : _c.all) !== null && _d !== void 0 ? _d : []\n    });\n  }\n  async removeExpression(expression) {\n    var _a;\n    const state = this.get(expression.key);\n    if (!__classPrivateFieldGet(this, _FilterController_instances, \"m\", _FilterController_emitFilteringEvent).call(this, expression, 'remove')) {\n      return;\n    }\n    state === null || state === void 0 ? void 0 : state.remove(expression);\n    if (state === null || state === void 0 ? void 0 : state.empty) {\n      this.reset(state.key);\n    }\n    __classPrivateFieldGet(this, _FilterController_instances, \"m\", _FilterController_filter).call(this, []);\n    await this.host.updateComplete;\n    __classPrivateFieldGet(this, _FilterController_instances, \"m\", _FilterController_emitFilteredEvent).call(this, {\n      key: expression.key,\n      state: (_a = state === null || state === void 0 ? void 0 : state.all) !== null && _a !== void 0 ? _a : []\n    });\n  }\n  async filterWithEvent(expression, type) {\n    var _a, _b;\n    if (!__classPrivateFieldGet(this, _FilterController_instances, \"m\", _FilterController_emitFilteringEvent).call(this, expression, type)) {\n      return;\n    }\n    __classPrivateFieldGet(this, _FilterController_instances, \"m\", _FilterController_filter).call(this, expression);\n    await this.host.updateComplete;\n    __classPrivateFieldGet(this, _FilterController_instances, \"m\", _FilterController_emitFilteredEvent).call(this, {\n      key: expression.key,\n      state: (_b = (_a = this.get(expression.key)) === null || _a === void 0 ? void 0 : _a.all) !== null && _b !== void 0 ? _b : []\n    });\n  }\n  filter(expression) {\n    __classPrivateFieldGet(this, _FilterController_instances, \"m\", _FilterController_filter).call(this, asArray(expression).map(expr => Object.assign(this.getDefaultExpression(this.host.getColumn(expr.key)), expr)));\n  }\n}\n_FilterController_instances = new WeakSet(), _FilterController_virtualizer_get = function _FilterController_virtualizer_get() {\n  // @ts-expect-error - protected access\n  return this.host.scrollContainer;\n}, _FilterController_emitFilteringEvent = function _FilterController_emitFilteringEvent(expression, type) {\n  return this.host.emitEvent('filtering', {\n    detail: {\n      key: expression.key,\n      expressions: [expression],\n      type\n    },\n    cancelable: true\n  });\n}, _FilterController_emitFilteredEvent = function _FilterController_emitFilteredEvent(detail) {\n  return this.host.emitEvent('filtered', {\n    detail\n  });\n}, _FilterController_filter = function _FilterController_filter(expression) {\n  var _a;\n  asArray(expression).forEach(expr => this.state.set(expr));\n  // HACK: In the case where the scrollTop is a large and amount and a big chunk of data is filtered out\n  // HACK: the virtualizer can't recalculate its scroll position correctly. Thus, we reset the scrollTop state.\n  (_a = __classPrivateFieldGet(this, _FilterController_instances, \"a\", _FilterController_virtualizer_get)) === null || _a === void 0 ? void 0 : _a.scrollTo({\n    top: 0\n  });\n  this.host.requestUpdate(PIPELINE);\n};","map":{"version":3,"names":["PIPELINE","asArray","getFilterOperandsFor","FilterState","FilterController","constructor","host","state","addController","filterRow","hostConnected","hostUpdate","_a","requestUpdate","get","key","reset","delete","clear","setActiveColumn","column","filter","active","expression","getDefaultExpression","caseSensitive","Boolean","operands","keys","Object","condition","removeAllExpressions","_b","all","emitEvent","detail","expressions","type","cancelable","__classPrivateFieldGet","_FilterController_instances","_FilterController_filter","call","updateComplete","_FilterController_emitFilteredEvent","_d","_c","removeExpression","_FilterController_emitFilteringEvent","remove","empty","filterWithEvent","map","expr","assign","getColumn","scrollContainer","forEach","set","_FilterController_virtualizer_get","scrollTo","top"],"sources":["../../../src/controllers/filter.ts"],"sourcesContent":["import { ReactiveController } from 'lit';\nimport { PIPELINE } from '../internal/constants.js';\nimport { asArray, getFilterOperandsFor } from '../internal/utils.js';\nimport { FilterState } from '../operations/filter/state.js';\n\nimport type { ColumnConfiguration, GridHost, Keys } from '../internal/types.js';\nimport type { FilterExpression } from '../operations/filter/types.js';\nimport type { ApexFilteredEvent } from '../components/grid.js';\n\nexport class FilterController<T extends object> implements ReactiveController {\n  constructor(protected host: GridHost<T>) {\n    this.host.addController(this);\n  }\n\n  public state: FilterState<T> = new FilterState();\n\n  public get filterRow() {\n    // @ts-expect-error - protected access\n    return this.host.filterRow;\n  }\n\n  get #virtualizer() {\n    // @ts-expect-error - protected access\n    return this.host.scrollContainer;\n  }\n\n  #emitFilteringEvent(expression: FilterExpression<T>, type: 'add' | 'modify' | 'remove') {\n    return this.host.emitEvent('filtering', {\n      detail: {\n        key: expression.key,\n        expressions: [expression],\n        type,\n      },\n      cancelable: true,\n    });\n  }\n\n  #emitFilteredEvent(detail?: ApexFilteredEvent<T>) {\n    return this.host.emitEvent('filtered', { detail });\n  }\n\n  #filter(expression: FilterExpression<T> | FilterExpression<T>[]) {\n    asArray(expression).forEach(expr => this.state.set(expr));\n    // HACK: In the case where the scrollTop is a large and amount and a big chunk of data is filtered out\n    // HACK: the virtualizer can't recalculate its scroll position correctly. Thus, we reset the scrollTop state.\n    this.#virtualizer?.scrollTo({ top: 0 });\n    this.host.requestUpdate(PIPELINE);\n  }\n\n  public hostConnected() {}\n\n  public hostUpdate(): void {\n    this.filterRow?.requestUpdate();\n  }\n\n  public get(key: Keys<T>) {\n    return this.state.get(key);\n  }\n\n  public reset(key?: Keys<T>) {\n    key ? this.state.delete(key) : this.state.clear();\n  }\n\n  public setActiveColumn(column?: ColumnConfiguration<T>) {\n    if (column?.filter && this.filterRow?.active) {\n      this.filterRow.column = column;\n      this.filterRow.expression = this.getDefaultExpression(column);\n      this.host.requestUpdate();\n    }\n  }\n\n  public getDefaultExpression(column: ColumnConfiguration<T>) {\n    const caseSensitive =\n      typeof column.filter === 'boolean' ? false : Boolean(column.filter?.caseSensitive);\n    const operands = getFilterOperandsFor(column);\n    const keys = Object.keys(operands) as Keys<typeof operands>[];\n\n    // XXX: Types\n    return {\n      key: column.key,\n      condition: operands[keys[0]],\n      caseSensitive,\n    } as unknown as FilterExpression<T>;\n  }\n\n  public async removeAllExpressions(key: Keys<T>) {\n    const state = this.get(key)?.all ?? [];\n\n    if (\n      !this.host.emitEvent('filtering', {\n        detail: {\n          key,\n          expressions: state,\n          type: 'remove',\n        },\n        cancelable: true,\n      })\n    ) {\n      return;\n    }\n\n    this.reset(key);\n    this.#filter([]);\n\n    await this.host.updateComplete;\n    this.#emitFilteredEvent({ key, state: this.get(key)?.all ?? [] });\n  }\n\n  public async removeExpression(expression: FilterExpression<T>) {\n    const state = this.get(expression.key);\n\n    if (!this.#emitFilteringEvent(expression, 'remove')) {\n      return;\n    }\n\n    state?.remove(expression);\n\n    if (state?.empty) {\n      this.reset(state.key);\n    }\n\n    this.#filter([]);\n\n    await this.host.updateComplete;\n    this.#emitFilteredEvent({ key: expression.key, state: state?.all ?? [] });\n  }\n\n  public async filterWithEvent(expression: FilterExpression<T>, type: 'add' | 'modify' | 'remove') {\n    if (!this.#emitFilteringEvent(expression, type)) {\n      return;\n    }\n\n    this.#filter(expression);\n\n    await this.host.updateComplete;\n    this.#emitFilteredEvent({ key: expression.key, state: this.get(expression.key)?.all ?? [] });\n  }\n\n  public filter(expression: FilterExpression<T> | FilterExpression<T>[]) {\n    this.#filter(\n      asArray(expression).map(expr =>\n        Object.assign(this.getDefaultExpression(this.host.getColumn(expr.key)!), expr),\n      ),\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}