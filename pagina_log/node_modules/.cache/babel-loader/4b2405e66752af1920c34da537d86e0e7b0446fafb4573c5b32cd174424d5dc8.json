{"ast":null,"code":"import { CHANGE_THEME_EVENT } from './theming-event.js';\nimport { getAllCSSVariables } from './utils.js';\nlet theme;\nfunction dispatchThemingEvent(detail) {\n  window.dispatchEvent(new CustomEvent(CHANGE_THEME_EVENT, {\n    detail\n  }));\n}\nfunction isOfTypeTheme(theme) {\n  return ['bootstrap', 'material', 'indigo', 'fluent'].includes(theme);\n}\nexport const getTheme = () => {\n  if (!theme) {\n    const [_, t] = Object.entries(getAllCSSVariables()).find(([v]) => v === 'igTheme') || [];\n    theme = t && isOfTypeTheme(t) ? t : 'bootstrap';\n  }\n  return theme;\n};\nexport const setTheme = value => {\n  theme = value;\n};\nexport const configureTheme = t => {\n  if (isOfTypeTheme(t)) {\n    setTheme(t);\n  }\n  dispatchThemingEvent({\n    theme\n  });\n};","map":{"version":3,"names":["CHANGE_THEME_EVENT","getAllCSSVariables","theme","dispatchThemingEvent","detail","window","dispatchEvent","CustomEvent","isOfTypeTheme","includes","getTheme","_","t","Object","entries","find","v","setTheme","value","configureTheme"],"sources":["../../src/theming/config.ts"],"sourcesContent":["import { ChangeThemeEventDetail, CHANGE_THEME_EVENT } from './theming-event.js';\nimport type { Theme } from './types.js';\nimport { getAllCSSVariables } from './utils.js';\n\nlet theme: Theme;\n\n/**\n * Dispatch an \"igc-change-theme\" event to `window` with the given detail.\n */\nfunction dispatchThemingEvent(detail: ChangeThemeEventDetail) {\n  window.dispatchEvent(new CustomEvent(CHANGE_THEME_EVENT, { detail }));\n}\n\nfunction isOfTypeTheme(theme: string): theme is Theme {\n  return ['bootstrap', 'material', 'indigo', 'fluent'].includes(theme);\n}\n\nexport const getTheme: () => Theme = () => {\n  if (!theme) {\n    const [_, t] =\n      Object.entries(getAllCSSVariables()).find(([v]) => v === 'igTheme') || [];\n\n    theme = t && isOfTypeTheme(t) ? (t as Theme) : 'bootstrap';\n  }\n\n  return theme;\n};\n\nexport const setTheme = (value: Theme) => {\n  theme = value;\n};\n\n/**\n * Allows the global configuration of the active theme.\n *\n * Usage:\n *  ```ts\n *  import { configureTheme } from 'igniteui-webcomponents';\n *\n *  configureTheme({ theme: 'material' });\n *  ```\n */\nexport const configureTheme = (t: Theme) => {\n  if (isOfTypeTheme(t)) {\n    setTheme(t);\n  }\n\n  dispatchThemingEvent({ theme });\n};\n"],"mappings":"AAAA,SAAiCA,kBAAkB,QAAQ,oBAAoB;AAE/E,SAASC,kBAAkB,QAAQ,YAAY;AAE/C,IAAIC,KAAY;AAKhB,SAASC,oBAAoBA,CAACC,MAA8B;EAC1DC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAACP,kBAAkB,EAAE;IAAEI;EAAM,CAAE,CAAC,CAAC;AACvE;AAEA,SAASI,aAAaA,CAACN,KAAa;EAClC,OAAO,CAAC,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAACO,QAAQ,CAACP,KAAK,CAAC;AACtE;AAEA,OAAO,MAAMQ,QAAQ,GAAgBA,CAAA,KAAK;EACxC,IAAI,CAACR,KAAK,EAAE;IACV,MAAM,CAACS,CAAC,EAAEC,CAAC,CAAC,GACVC,MAAM,CAACC,OAAO,CAACb,kBAAkB,EAAE,CAAC,CAACc,IAAI,CAAC,CAAC,CAACC,CAAC,CAAC,KAAKA,CAAC,KAAK,SAAS,CAAC,IAAI,EAAE;IAE3Ed,KAAK,GAAGU,CAAC,IAAIJ,aAAa,CAACI,CAAC,CAAC,GAAIA,CAAW,GAAG,WAAW;;EAG5D,OAAOV,KAAK;AACd,CAAC;AAED,OAAO,MAAMe,QAAQ,GAAIC,KAAY,IAAI;EACvChB,KAAK,GAAGgB,KAAK;AACf,CAAC;AAYD,OAAO,MAAMC,cAAc,GAAIP,CAAQ,IAAI;EACzC,IAAIJ,aAAa,CAACI,CAAC,CAAC,EAAE;IACpBK,QAAQ,CAACL,CAAC,CAAC;;EAGbT,oBAAoB,CAAC;IAAED;EAAK,CAAE,CAAC;AACjC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}