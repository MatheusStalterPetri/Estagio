{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement } from 'lit';\nimport { property, query, queryAssignedNodes, state } from 'lit/decorators.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { blazorDeepImport } from '../common/decorators/blazorDeepImport.js';\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nlet IgcCheckboxBaseComponent = class IgcCheckboxBaseComponent extends EventEmitterMixin(LitElement) {\n  constructor() {\n    super(...arguments);\n    this.focused = false;\n    this.hideLabel = false;\n    this.disabled = false;\n    this.checked = false;\n    this.required = false;\n    this.invalid = false;\n    this.labelPosition = 'after';\n  }\n  click() {\n    this.input.click();\n  }\n  focus(options) {\n    this.input.focus(options);\n  }\n  blur() {\n    this.input.blur();\n  }\n  reportValidity() {\n    return this.input.reportValidity();\n  }\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n  setCustomValidity(message) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n  handleBlur() {\n    this.emitEvent('igcBlur');\n    this.focused = false;\n  }\n  handleFocus() {\n    this.emitEvent('igcFocus');\n  }\n  handleMouseDown(event) {\n    event.preventDefault();\n    this.input.focus();\n    this.focused = false;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener('keyup', this.handleKeyUp);\n  }\n  disconnectedCallback() {\n    this.removeEventListener('keyup', this.handleKeyUp);\n    super.disconnectedCallback();\n  }\n  handleKeyUp() {\n    if (!this.focused) {\n      this.focused = true;\n    }\n  }\n  async firstUpdated() {\n    if (this.label.length === 0) {\n      this.hideLabel = true;\n    }\n    await this.updateComplete;\n  }\n};\n__decorate([query('input[type=\"checkbox\"]', true)], IgcCheckboxBaseComponent.prototype, \"input\", void 0);\n__decorate([queryAssignedNodes({\n  flatten: true\n})], IgcCheckboxBaseComponent.prototype, \"label\", void 0);\n__decorate([state()], IgcCheckboxBaseComponent.prototype, \"focused\", void 0);\n__decorate([state()], IgcCheckboxBaseComponent.prototype, \"hideLabel\", void 0);\n__decorate([property()], IgcCheckboxBaseComponent.prototype, \"name\", void 0);\n__decorate([property()], IgcCheckboxBaseComponent.prototype, \"value\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], IgcCheckboxBaseComponent.prototype, \"disabled\", void 0);\n__decorate([property({\n  type: Boolean\n}), blazorTwoWayBind('igcChange', 'detail')], IgcCheckboxBaseComponent.prototype, \"checked\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], IgcCheckboxBaseComponent.prototype, \"required\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], IgcCheckboxBaseComponent.prototype, \"invalid\", void 0);\n__decorate([property({\n  reflect: true,\n  attribute: 'label-position'\n})], IgcCheckboxBaseComponent.prototype, \"labelPosition\", void 0);\n__decorate([property({\n  reflect: true,\n  attribute: 'aria-labelledby'\n})], IgcCheckboxBaseComponent.prototype, \"ariaLabelledby\", void 0);\n__decorate([alternateName('focusComponent')], IgcCheckboxBaseComponent.prototype, \"focus\", null);\n__decorate([alternateName('blurComponent')], IgcCheckboxBaseComponent.prototype, \"blur\", null);\nIgcCheckboxBaseComponent = __decorate([blazorDeepImport], IgcCheckboxBaseComponent);\nexport { IgcCheckboxBaseComponent };","map":{"version":3,"names":["LitElement","property","query","queryAssignedNodes","state","alternateName","blazorDeepImport","blazorTwoWayBind","EventEmitterMixin","IgcCheckboxBaseComponent","constructor","focused","hideLabel","disabled","checked","required","invalid","labelPosition","click","input","focus","options","blur","reportValidity","checkValidity","setCustomValidity","message","handleBlur","emitEvent","handleFocus","handleMouseDown","event","preventDefault","connectedCallback","addEventListener","handleKeyUp","disconnectedCallback","removeEventListener","firstUpdated","label","length","updateComplete","__decorate","flatten","type","Boolean","reflect","attribute"],"sources":["../../../src/components/checkbox/checkbox-base.ts"],"sourcesContent":["import { LitElement } from 'lit';\nimport { property, query, queryAssignedNodes, state } from 'lit/decorators.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { blazorDeepImport } from '../common/decorators/blazorDeepImport.js';\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\n\nexport interface IgcCheckboxEventMap {\n  igcChange: CustomEvent<boolean>;\n  igcFocus: CustomEvent<void>;\n  igcBlur: CustomEvent<void>;\n}\n\n@blazorDeepImport\nexport class IgcCheckboxBaseComponent extends EventEmitterMixin<\n  IgcCheckboxEventMap,\n  Constructor<LitElement>\n>(LitElement) {\n  @query('input[type=\"checkbox\"]', true)\n  protected input!: HTMLInputElement;\n\n  @queryAssignedNodes({ flatten: true })\n  protected label!: Array<Node>;\n\n  @state()\n  protected focused = false;\n\n  @state()\n  protected hideLabel = false;\n\n  /**\n   * The name attribute of the control.\n   * @attr\n   */\n  @property()\n  public name!: string;\n\n  /**\n   * The value attribute of the control.\n   * @attr\n   */\n  @property()\n  public value!: string;\n\n  /**\n   * Disables the control.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public disabled = false;\n\n  /**\n   * The checked state of the control.\n   * @attr\n   */\n  @property({ type: Boolean })\n  @blazorTwoWayBind('igcChange', 'detail')\n  public checked = false;\n\n  /**\n   * Makes the control a required field.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public required = false;\n\n  /**\n   * Controls the validity of the control.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public invalid = false;\n\n  /**\n   * The label position of the control.\n   * @attr label-position\n   */\n  @property({ reflect: true, attribute: 'label-position' })\n  public labelPosition: 'before' | 'after' = 'after';\n\n  /** Sets the aria-labelledby attribute for the control. */\n  @property({ reflect: true, attribute: 'aria-labelledby' })\n  public ariaLabelledby!: string;\n\n  /** Simulates a click on the control. */\n  public override click() {\n    this.input.click();\n  }\n\n  /** Sets focus on the control. */\n  @alternateName('focusComponent')\n  public override focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the control. */\n  @alternateName('blurComponent')\n  public override blur() {\n    this.input.blur();\n  }\n\n  /** Checks for validity of the control and shows the browser message if it invalid. */\n  public reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Checks for validity of the control and emits the invalid event if it invalid. */\n  public checkValidity() {\n    return this.input.checkValidity();\n  }\n\n  /**\n   * Sets a custom validation message for the control.\n   * As long as `message` is not empty, the control is considered invalid.\n   */\n  public setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  protected handleBlur() {\n    this.emitEvent('igcBlur');\n    this.focused = false;\n  }\n\n  protected handleFocus() {\n    this.emitEvent('igcFocus');\n  }\n\n  protected handleMouseDown(event: PointerEvent) {\n    event.preventDefault();\n    this.input.focus();\n    this.focused = false;\n  }\n\n  public override connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener('keyup', this.handleKeyUp);\n  }\n\n  public override disconnectedCallback() {\n    this.removeEventListener('keyup', this.handleKeyUp);\n    super.disconnectedCallback();\n  }\n\n  protected handleKeyUp() {\n    if (!this.focused) {\n      this.focused = true;\n    }\n  }\n\n  protected override async firstUpdated() {\n    if (this.label.length === 0) {\n      this.hideLabel = true;\n    }\n\n    await this.updateComplete;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}