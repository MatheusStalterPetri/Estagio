{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { partNameMap } from '../common/util.js';\nimport { IgcInputBaseComponent } from './input-base.js';\nexport default class IgcInputComponent extends IgcInputBaseComponent {\n  constructor() {\n    super(...arguments);\n    this.value = '';\n    this.type = 'text';\n    this.invalid = false;\n    this.tabIndex = 0;\n  }\n  reportValidity() {\n    return this.input.reportValidity();\n  }\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n  setRangeText(replacement, start, end, selectMode = 'preserve') {\n    super.setRangeText(replacement, start, end, selectMode);\n    this.value = this.input.value;\n  }\n  setCustomValidity(message) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n  select() {\n    return this.input.select();\n  }\n  stepUp(n) {\n    this.input.stepUp(n);\n    this.handleChange();\n  }\n  stepDown(n) {\n    this.input.stepDown(n);\n    this.handleChange();\n  }\n  handleInvalid() {\n    this.invalid = true;\n  }\n  handleInput() {\n    this.value = this.input.value;\n    this.emitEvent('igcInput', {\n      detail: this.value\n    });\n  }\n  handleChange() {\n    this.value = this.input.value;\n    this.emitEvent('igcChange', {\n      detail: this.value\n    });\n  }\n  handleValueChange() {\n    this.updateComplete.then(() => this.invalid = !this.input.checkValidity());\n  }\n  renderInput() {\n    return html`\n      <input\n        id=\"${this.inputId}\"\n        part=\"${partNameMap(this.resolvePartNames('input'))}\"\n        name=\"${ifDefined(this.name)}\"\n        type=\"${ifDefined(this.type)}\"\n        pattern=\"${ifDefined(this.pattern)}\"\n        placeholder=\"${ifDefined(this.placeholder)}\"\n        .value=\"${live(this.value)}\"\n        ?readonly=\"${this.readonly}\"\n        ?disabled=\"${this.disabled}\"\n        ?required=\"${this.required}\"\n        ?autofocus=\"${this.autofocus}\"\n        tabindex=${this.tabIndex}\n        autocomplete=\"${ifDefined(this.autocomplete)}\"\n        inputmode=\"${ifDefined(this.inputmode)}\"\n        min=\"${ifDefined(this.min)}\"\n        max=\"${ifDefined(this.max)}\"\n        minlength=\"${ifDefined(this.minlength)}\"\n        maxlength=\"${ifDefined(this.maxlength)}\"\n        step=\"${ifDefined(this.step)}\"\n        aria-invalid=\"${this.invalid ? 'true' : 'false'}\"\n        @invalid=\"${this.handleInvalid}\"\n        @change=\"${this.handleChange}\"\n        @input=\"${this.handleInput}\"\n        @focus=\"${this.handleFocus}\"\n        @blur=\"${this.handleBlur}\"\n      />\n    `;\n  }\n}\nIgcInputComponent.tagName = 'igc-input';\n__decorate([property(), blazorTwoWayBind('igcChange', 'detail')], IgcInputComponent.prototype, \"value\", void 0);\n__decorate([alternateName('displayType'), property({\n  reflect: true\n})], IgcInputComponent.prototype, \"type\", void 0);\n__decorate([property()], IgcInputComponent.prototype, \"inputmode\", void 0);\n__decorate([property({\n  type: String\n})], IgcInputComponent.prototype, \"pattern\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Boolean\n})], IgcInputComponent.prototype, \"invalid\", void 0);\n__decorate([property({\n  type: Number\n})], IgcInputComponent.prototype, \"minlength\", void 0);\n__decorate([property({\n  type: Number\n})], IgcInputComponent.prototype, \"maxlength\", void 0);\n__decorate([property()], IgcInputComponent.prototype, \"min\", void 0);\n__decorate([property()], IgcInputComponent.prototype, \"max\", void 0);\n__decorate([property({\n  type: Number\n})], IgcInputComponent.prototype, \"step\", void 0);\n__decorate([property({\n  type: Boolean\n})], IgcInputComponent.prototype, \"autofocus\", void 0);\n__decorate([property()], IgcInputComponent.prototype, \"autocomplete\", void 0);\n__decorate([property({\n  type: Number\n})], IgcInputComponent.prototype, \"tabIndex\", void 0);\n__decorate([blazorSuppress()], IgcInputComponent.prototype, \"setRangeText\", null);\n__decorate([watch('value', {\n  waitUntilFirstUpdate: true\n})], IgcInputComponent.prototype, \"handleValueChange\", null);","map":{"version":3,"names":["html","property","ifDefined","live","alternateName","blazorSuppress","blazorTwoWayBind","watch","partNameMap","IgcInputBaseComponent","IgcInputComponent","constructor","value","type","invalid","tabIndex","reportValidity","input","checkValidity","setRangeText","replacement","start","end","selectMode","setCustomValidity","message","select","stepUp","n","handleChange","stepDown","handleInvalid","handleInput","emitEvent","detail","handleValueChange","updateComplete","then","renderInput","inputId","resolvePartNames","name","pattern","placeholder","readonly","disabled","required","autofocus","autocomplete","inputmode","min","max","minlength","maxlength","step","handleFocus","handleBlur","tagName","__decorate","reflect","String","Boolean","Number","waitUntilFirstUpdate"],"sources":["../../../src/components/input/input.ts"],"sourcesContent":["import { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { partNameMap } from '../common/util.js';\nimport { IgcInputBaseComponent } from './input-base.js';\n\n/**\n * @element igc-input\n *\n * @slot prefix - Renders content before the input.\n * @slot suffix - Renders content after input.\n * @slot helper-text - Renders content below the input.\n *\n * @fires igcInput - Emitted when the control input receives user input.\n * @fires igcChange - Emitted when the control's checked state changes.\n * @fires igcFocus - Emitted when the control gains focus.\n * @fires igcBlur - Emitted when the control loses focus.\n *\n * @csspart container - The main wrapper that holds all main input elements.\n * @csspart input - The native input element.\n * @csspart label - The native label element.\n * @csspart prefix - The prefix wrapper.\n * @csspart suffix - The suffix wrapper.\n * @csspart helper-text - The helper text wrapper.\n */\nexport default class IgcInputComponent extends IgcInputBaseComponent {\n  public static readonly tagName = 'igc-input';\n\n  /**\n   * The value of the control.\n   * @attr\n   */\n  @property()\n  @blazorTwoWayBind('igcChange', 'detail')\n  public value = '';\n\n  /**\n   * The type attribute of the control.\n   * @attr\n   */\n  @alternateName('displayType')\n  @property({ reflect: true })\n  public type:\n    | 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url' = 'text';\n\n  /**\n   * The input mode attribute of the control.\n   * @attr\n   */\n  @property()\n  public inputmode!:\n    | 'none'\n    | 'txt'\n    | 'decimal'\n    | 'numeric'\n    | 'tel'\n    | 'search'\n    | 'email'\n    | 'url';\n\n  /**\n   * The pattern attribute of the control.\n   * @attr\n   */\n  @property({ type: String })\n  public pattern!: string;\n\n  /**\n   * Controls the validity of the control.\n   * @attr\n   */\n  @property({ reflect: true, type: Boolean })\n  public invalid = false;\n\n  /**\n   * The minlength attribute of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public minlength!: number;\n\n  /**\n   * The maxlength attribute of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public maxlength!: number;\n\n  /**\n   * The min attribute of the control.\n   * @attr\n   */\n  @property()\n  public min!: number | string;\n\n  /**\n   * The max attribute of the control.\n   * @attr\n   */\n  @property()\n  public max!: number | string;\n\n  /**\n   * The step attribute of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public step!: number;\n\n  /**\n   * The autofocus attribute of the control.\n   * @attr\n   */\n  @property({ type: Boolean })\n  public override autofocus!: boolean;\n\n  /**\n   * The autocomplete attribute of the control.\n   * @attr\n   */\n  @property()\n  public autocomplete!: string;\n\n  @property({ type: Number })\n  public override tabIndex = 0;\n\n  /** Checks for validity of the control and shows the browser message if it's invalid. */\n  public reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Checks for validity of the control and emits the invalid event if it invalid. */\n  public checkValidity() {\n    return this.input.checkValidity();\n  }\n\n  /** Replaces the selected text in the input. */\n  @blazorSuppress()\n  public override setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve'\n  ) {\n    super.setRangeText(replacement, start, end, selectMode);\n    this.value = this.input.value;\n  }\n\n  /**\n   * Sets a custom validation message for the control.\n   * As long as `message` is not empty, the control is considered invalid.\n   */\n  public setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  /** Selects all text within the input. */\n  public select() {\n    return this.input.select();\n  }\n\n  /** Increments the numeric value of the input by one or more steps. */\n  public stepUp(n?: number) {\n    this.input.stepUp(n);\n    this.handleChange();\n  }\n\n  /** Decrements the numeric value of the input by one or more steps. */\n  public stepDown(n?: number) {\n    this.input.stepDown(n);\n    this.handleChange();\n  }\n\n  private handleInvalid() {\n    this.invalid = true;\n  }\n\n  private handleInput() {\n    this.value = this.input.value;\n    this.emitEvent('igcInput', { detail: this.value });\n  }\n\n  private handleChange() {\n    this.value = this.input.value;\n    this.emitEvent('igcChange', { detail: this.value });\n  }\n\n  @watch('value', { waitUntilFirstUpdate: true })\n  protected handleValueChange() {\n    this.updateComplete.then(\n      () => (this.invalid = !this.input.checkValidity())\n    );\n  }\n\n  protected renderInput() {\n    return html`\n      <input\n        id=\"${this.inputId}\"\n        part=\"${partNameMap(this.resolvePartNames('input'))}\"\n        name=\"${ifDefined(this.name)}\"\n        type=\"${ifDefined(this.type)}\"\n        pattern=\"${ifDefined(this.pattern)}\"\n        placeholder=\"${ifDefined(this.placeholder)}\"\n        .value=\"${live(this.value)}\"\n        ?readonly=\"${this.readonly}\"\n        ?disabled=\"${this.disabled}\"\n        ?required=\"${this.required}\"\n        ?autofocus=\"${this.autofocus}\"\n        tabindex=${this.tabIndex}\n        autocomplete=\"${ifDefined(this.autocomplete as any)}\"\n        inputmode=\"${ifDefined(this.inputmode)}\"\n        min=\"${ifDefined(this.min)}\"\n        max=\"${ifDefined(this.max)}\"\n        minlength=\"${ifDefined(this.minlength)}\"\n        maxlength=\"${ifDefined(this.maxlength)}\"\n        step=\"${ifDefined(this.step)}\"\n        aria-invalid=\"${this.invalid ? 'true' : 'false'}\"\n        @invalid=\"${this.handleInvalid}\"\n        @change=\"${this.handleChange}\"\n        @input=\"${this.handleInput}\"\n        @focus=\"${this.handleFocus}\"\n        @blur=\"${this.handleBlur}\"\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-input': IgcInputComponent;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}