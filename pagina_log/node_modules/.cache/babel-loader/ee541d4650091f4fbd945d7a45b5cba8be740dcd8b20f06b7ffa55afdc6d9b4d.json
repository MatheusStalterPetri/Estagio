{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html, LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { SizableMixin } from '../common/mixins/sizable.js';\nimport { styles } from './themes/avatar.base.css.js';\nimport { styles as bootstrap } from './themes/avatar.bootstrap.css.js';\nlet IgcAvatarComponent = class IgcAvatarComponent extends SizableMixin(LitElement) {\n  get classes() {\n    const {\n      size,\n      shape\n    } = this;\n    return {\n      circle: shape === 'circle',\n      rounded: shape === 'rounded',\n      square: shape === 'square',\n      small: size === 'small',\n      medium: size === 'medium',\n      large: size === 'large'\n    };\n  }\n  constructor() {\n    super();\n    this.hasError = false;\n    this.shape = 'square';\n    this.size = 'small';\n  }\n  handleErrorState() {\n    this.hasError = false;\n  }\n  render() {\n    return html`\n      <div\n        part=\"base\"\n        role=\"img\"\n        aria-label=\"avatar\"\n        aria-roledescription=${this.size + ' ' + this.shape}\n        class=${classMap(this.classes)}\n      >\n        ${this.initials ? html`<span part=\"initials\">${this.initials}</span>` : html` <slot></slot> `}\n        ${this.src && !this.hasError ? html`\n              <img\n                part=\"image\"\n                alt=${ifDefined(this.alt)}\n                src=${ifDefined(this.src)}\n                @error=\"${() => this.hasError = true}\"\n              />\n            ` : ''}\n      </div>\n    `;\n  }\n};\nIgcAvatarComponent.tagName = 'igc-avatar';\nIgcAvatarComponent.styles = styles;\n__decorate([property()], IgcAvatarComponent.prototype, \"src\", void 0);\n__decorate([state()], IgcAvatarComponent.prototype, \"hasError\", void 0);\n__decorate([property()], IgcAvatarComponent.prototype, \"alt\", void 0);\n__decorate([property()], IgcAvatarComponent.prototype, \"initials\", void 0);\n__decorate([property({\n  reflect: true\n})], IgcAvatarComponent.prototype, \"shape\", void 0);\n__decorate([watch('src')], IgcAvatarComponent.prototype, \"handleErrorState\", null);\nIgcAvatarComponent = __decorate([themes({\n  bootstrap\n})], IgcAvatarComponent);\nexport default IgcAvatarComponent;","map":{"version":3,"names":["html","LitElement","property","state","classMap","ifDefined","themes","watch","SizableMixin","styles","bootstrap","IgcAvatarComponent","classes","size","shape","circle","rounded","square","small","medium","large","constructor","hasError","handleErrorState","render","initials","src","alt","tagName","__decorate","reflect"],"sources":["../../../src/components/avatar/avatar.ts"],"sourcesContent":["import { html, LitElement } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { SizableMixin } from '../common/mixins/sizable.js';\nimport { styles } from './themes/avatar.base.css.js';\nimport { styles as bootstrap } from './themes/avatar.bootstrap.css.js';\n\n/**\n * An avatar component is used as a representation of a user identity\n * typically in a user profile.\n *\n * @element igc-avatar\n *\n * @slot - Renders an icon inside the default slot.\n *\n * @csspart base - The base wrapper of the avatar.\n * @csspart initials - The initials wrapper of the avatar.\n * @csspart image - The image wrapper of the avatar.\n * @csspart icon - The icon wrapper of the avatar.\n */\n@themes({ bootstrap })\nexport default class IgcAvatarComponent extends SizableMixin(LitElement) {\n  public static readonly tagName = 'igc-avatar';\n  public static override styles = styles;\n\n  /**\n   * The image source to use.\n   * @attr\n   */\n  @property()\n  public src!: string;\n\n  @state()\n  private hasError = false;\n\n  /**\n   * Alternative text for the image.\n   * @attr\n   */\n  @property()\n  public alt!: string;\n\n  /**\n   * Initials to use as a fallback when no image is available.\n   * @attr\n   */\n  @property()\n  public initials!: string;\n\n  /**\n   * The shape of the avatar.\n   * @attr\n   */\n  @property({ reflect: true })\n  public shape: 'circle' | 'rounded' | 'square' = 'square';\n\n  private get classes() {\n    const { size, shape } = this;\n\n    return {\n      circle: shape === 'circle',\n      rounded: shape === 'rounded',\n      square: shape === 'square',\n      small: size === 'small',\n      medium: size === 'medium',\n      large: size === 'large',\n    };\n  }\n\n  constructor() {\n    super();\n    this.size = 'small';\n  }\n\n  @watch('src')\n  protected handleErrorState() {\n    this.hasError = false;\n  }\n\n  protected override render() {\n    return html`\n      <div\n        part=\"base\"\n        role=\"img\"\n        aria-label=\"avatar\"\n        aria-roledescription=${this.size + ' ' + this.shape}\n        class=${classMap(this.classes)}\n      >\n        ${this.initials\n          ? html`<span part=\"initials\">${this.initials}</span>`\n          : html` <slot></slot> `}\n        ${this.src && !this.hasError\n          ? html`\n              <img\n                part=\"image\"\n                alt=${ifDefined(this.alt)}\n                src=${ifDefined(this.src)}\n                @error=\"${() => (this.hasError = true)}\"\n              />\n            `\n          : ''}\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-avatar': IgcAvatarComponent;\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAASA,IAAI,EAAEC,UAAU,QAAQ,KAAK;AACtC,SAASC,QAAQ,EAAEC,KAAK,QAAQ,mBAAmB;AACnD,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,SAAS,QAAQ,8BAA8B;AACxD,SAASC,MAAM,QAAQ,oCAAoC;AAC3D,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,MAAM,QAAQ,6BAA6B;AACpD,SAASA,MAAM,IAAIC,SAAS,QAAQ,kCAAkC;AAgBvD,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAmB,SAAQH,YAAY,CAACP,UAAU,CAAC;EAmCtE,IAAYW,OAAOA,CAAA;IACjB,MAAM;MAAEC,IAAI;MAAEC;IAAK,CAAE,GAAG,IAAI;IAE5B,OAAO;MACLC,MAAM,EAAED,KAAK,KAAK,QAAQ;MAC1BE,OAAO,EAAEF,KAAK,KAAK,SAAS;MAC5BG,MAAM,EAAEH,KAAK,KAAK,QAAQ;MAC1BI,KAAK,EAAEL,IAAI,KAAK,OAAO;MACvBM,MAAM,EAAEN,IAAI,KAAK,QAAQ;MACzBO,KAAK,EAAEP,IAAI,KAAK;KACjB;EACH;EAEAQ,YAAA;IACE,KAAK,EAAE;IArCD,KAAAC,QAAQ,GAAG,KAAK;IAqBjB,KAAAR,KAAK,GAAoC,QAAQ;IAiBtD,IAAI,CAACD,IAAI,GAAG,OAAO;EACrB;EAGUU,gBAAgBA,CAAA;IACxB,IAAI,CAACD,QAAQ,GAAG,KAAK;EACvB;EAEmBE,MAAMA,CAAA;IACvB,OAAOxB,IAAI;;;;;+BAKgB,IAAI,CAACa,IAAI,GAAG,GAAG,GAAG,IAAI,CAACC,KAAK;gBAC3CV,QAAQ,CAAC,IAAI,CAACQ,OAAO,CAAC;;UAE5B,IAAI,CAACa,QAAQ,GACXzB,IAAI,yBAAyB,IAAI,CAACyB,QAAQ,SAAS,GACnDzB,IAAI,iBAAiB;UACvB,IAAI,CAAC0B,GAAG,IAAI,CAAC,IAAI,CAACJ,QAAQ,GACxBtB,IAAI;;;sBAGMK,SAAS,CAAC,IAAI,CAACsB,GAAG,CAAC;sBACnBtB,SAAS,CAAC,IAAI,CAACqB,GAAG,CAAC;0BACf,MAAO,IAAI,CAACJ,QAAQ,GAAG,IAAK;;aAEzC,GACD,EAAE;;KAET;EACH;;AAjFuBX,kBAAA,CAAAiB,OAAO,GAAG,YAAY;AACtBjB,kBAAA,CAAAF,MAAM,GAAGA,MAAM;AAOtCoB,UAAA,EADC3B,QAAQ,EAAE,C,8CACS;AAGpB2B,UAAA,EADC1B,KAAK,EAAE,C,mDACiB;AAOzB0B,UAAA,EADC3B,QAAQ,EAAE,C,8CACS;AAOpB2B,UAAA,EADC3B,QAAQ,EAAE,C,mDACc;AAOzB2B,UAAA,EADC3B,QAAQ,CAAC;EAAE4B,OAAO,EAAE;AAAI,CAAE,CAAC,C,gDAC6B;AAqBzDD,UAAA,EADCtB,KAAK,CAAC,KAAK,CAAC,C,yDAGZ;AAxDkBI,kBAAkB,GAAAkB,UAAA,EADtCvB,MAAM,CAAC;EAAEI;AAAS,CAAE,CAAC,C,EACDC,kBAAkB,CAmFtC;eAnFoBA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}