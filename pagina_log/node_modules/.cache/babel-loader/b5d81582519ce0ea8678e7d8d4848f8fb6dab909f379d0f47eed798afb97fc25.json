{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html, LitElement, nothing } from 'lit';\nimport { property, queryAll } from 'lit/decorators.js';\nimport { map } from 'lit/directives/map.js';\nimport { GRID_ROW_TAG } from '../internal/tags.js';\nimport { registerComponent } from '../internal/register.js';\nimport ApexGridCell from './cell.js';\nimport { styles } from '../styles/body-row/body-row-styles.css.js';\n/**\n * Component representing the DOM row in the Apex grid.\n */\nexport default class ApexGridRow extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.columns = [];\n    this.index = -1;\n  }\n  static get is() {\n    return GRID_ROW_TAG;\n  }\n  static register() {\n    registerComponent(this, [ApexGridCell]);\n  }\n  get cells() {\n    return Array.from(this._cells);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute('exportparts', 'cell');\n  }\n  render() {\n    const {\n      column: key,\n      row: index\n    } = this.activeNode;\n    return html`\n      ${map(this.columns, column => column.hidden ? nothing : html`<apex-grid-cell\n              part=\"cell\"\n              .active=${key === column.key && index === this.index}\n              .column=${column}\n              .row=${this}\n              .value=${this.data[column.key]}\n            ></apex-grid-cell>`)}\n    `;\n  }\n}\nApexGridRow.styles = styles;\n__decorate([queryAll(ApexGridCell.is)], ApexGridRow.prototype, \"_cells\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexGridRow.prototype, \"data\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexGridRow.prototype, \"columns\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexGridRow.prototype, \"activeNode\", void 0);\n__decorate([property({\n  attribute: false,\n  type: Number\n})], ApexGridRow.prototype, \"index\", void 0);","map":{"version":3,"names":["html","LitElement","nothing","property","queryAll","map","GRID_ROW_TAG","registerComponent","ApexGridCell","styles","ApexGridRow","constructor","columns","index","is","register","cells","Array","from","_cells","connectedCallback","setAttribute","render","column","key","row","activeNode","hidden","data","__decorate","attribute","type","Number"],"sources":["../../../src/components/row.ts"],"sourcesContent":["import { html, LitElement, nothing } from 'lit';\nimport { property, queryAll } from 'lit/decorators.js';\nimport { map } from 'lit/directives/map.js';\nimport { GRID_ROW_TAG } from '../internal/tags.js';\nimport { registerComponent } from '../internal/register.js';\nimport type { ActiveNode, ColumnConfiguration } from '../internal/types.js';\nimport ApexGridCell from './cell.js';\nimport { styles } from '../styles/body-row/body-row-styles.css.js';\n\n/**\n * Component representing the DOM row in the Apex grid.\n */\nexport default class ApexGridRow<T extends object> extends LitElement {\n  public static get is() {\n    return GRID_ROW_TAG;\n  }\n  public static override styles = styles;\n\n  public static register() {\n    registerComponent(this, [ApexGridCell]);\n  }\n\n  @queryAll(ApexGridCell.is)\n  protected _cells!: NodeListOf<ApexGridCell<T>>;\n\n  @property({ attribute: false })\n  public data!: T;\n\n  @property({ attribute: false })\n  public columns: Array<ColumnConfiguration<T>> = [];\n\n  public get cells() {\n    return Array.from(this._cells);\n  }\n\n  @property({ attribute: false })\n  public activeNode!: ActiveNode<T>;\n\n  @property({ attribute: false, type: Number })\n  public index = -1;\n\n  public override connectedCallback(): void {\n    super.connectedCallback();\n    this.setAttribute('exportparts', 'cell');\n  }\n\n  protected override render() {\n    const { column: key, row: index } = this.activeNode;\n\n    return html`\n      ${map(this.columns, column =>\n        column.hidden\n          ? nothing\n          : html`<apex-grid-cell\n              part=\"cell\"\n              .active=${key === column.key && index === this.index}\n              .column=${column}\n              .row=${this as ApexGridRow<T>}\n              .value=${this.data[column.key]}\n            ></apex-grid-cell>`,\n      )}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    [ApexGridRow.is]: ApexGridRow<object>;\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAASA,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,KAAK;AAC/C,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,mBAAmB;AACtD,SAASC,GAAG,QAAQ,uBAAuB;AAC3C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,iBAAiB,QAAQ,yBAAyB;AAE3D,OAAOC,YAAY,MAAM,WAAW;AACpC,SAASC,MAAM,QAAQ,2CAA2C;AAElE;;;AAGA,eAAc,MAAOC,WAA8B,SAAQT,UAAU;EAArEU,YAAA;;IAiBS,KAAAC,OAAO,GAAkC,EAAE;IAU3C,KAAAC,KAAK,GAAG,CAAC,CAAC;EAwBnB;EAlDS,WAAWC,EAAEA,CAAA;IAClB,OAAOR,YAAY;EACrB;EAGO,OAAOS,QAAQA,CAAA;IACpBR,iBAAiB,CAAC,IAAI,EAAE,CAACC,YAAY,CAAC,CAAC;EACzC;EAWA,IAAWQ,KAAKA,CAAA;IACd,OAAOC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACC,MAAM,CAAC;EAChC;EAQgBC,iBAAiBA,CAAA;IAC/B,KAAK,CAACA,iBAAiB,EAAE;IACzB,IAAI,CAACC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;EAC1C;EAEmBC,MAAMA,CAAA;IACvB,MAAM;MAAEC,MAAM,EAAEC,GAAG;MAAEC,GAAG,EAAEZ;IAAK,CAAE,GAAG,IAAI,CAACa,UAAU;IAEnD,OAAO1B,IAAI;QACPK,GAAG,CAAC,IAAI,CAACO,OAAO,EAAEW,MAAM,IACxBA,MAAM,CAACI,MAAM,GACTzB,OAAO,GACPF,IAAI;;wBAEQwB,GAAG,KAAKD,MAAM,CAACC,GAAG,IAAIX,KAAK,KAAK,IAAI,CAACA,KAAK;wBAC1CU,MAAM;qBACT,IAAsB;uBACpB,IAAI,CAACK,IAAI,CAACL,MAAM,CAACC,GAAG,CAAC;+BACb,CACxB;KACF;EACH;;AA9CuBd,WAAA,CAAAD,MAAM,GAAGA,MAAM;AAOtCoB,UAAA,EADCzB,QAAQ,CAACI,YAAY,CAACM,EAAE,CAAC,C,0CACqB;AAG/Ce,UAAA,EADC1B,QAAQ,CAAC;EAAE2B,SAAS,EAAE;AAAK,CAAE,CAAC,C,wCACf;AAGhBD,UAAA,EADC1B,QAAQ,CAAC;EAAE2B,SAAS,EAAE;AAAK,CAAE,CAAC,C,2CACoB;AAOnDD,UAAA,EADC1B,QAAQ,CAAC;EAAE2B,SAAS,EAAE;AAAK,CAAE,CAAC,C,8CACG;AAGlCD,UAAA,EADC1B,QAAQ,CAAC;EAAE2B,SAAS,EAAE,KAAK;EAAEC,IAAI,EAAEC;AAAM,CAAE,CAAC,C,yCAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}