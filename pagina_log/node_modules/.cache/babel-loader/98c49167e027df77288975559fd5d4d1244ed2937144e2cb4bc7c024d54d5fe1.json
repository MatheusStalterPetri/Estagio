{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.structured-clone.js\";\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html, nothing } from 'lit';\nimport { ContextProvider } from '@lit-labs/context';\nimport { eventOptions, property, query, queryAll, state } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { GRID_TAG } from '../internal/tags.js';\nimport { StateController, gridStateContext } from '../controllers/state.js';\nimport { DataOperationsController } from '../controllers/data-operation.js';\nimport { GridDOMController } from '../controllers/dom.js';\nimport { EventEmitterBase } from '../internal/mixins/event-emitter.js';\nimport { watch } from '../internal/watch.js';\nimport { DEFAULT_COLUMN_CONFIG, PIPELINE } from '../internal/constants.js';\nimport { asArray, autoGenerateColumns, getFilterOperandsFor } from '../internal/utils.js';\nimport { registerComponent } from '../internal/register.js';\nimport { styles as bootstrap } from '../styles/grid/themes/light/grid.bootstrap-styles.css.js';\nimport { styles as fluent } from '../styles/grid/themes/light/grid.fluent-styles.css.js';\nimport { styles as indigo } from '../styles/grid/themes/light/grid.indigo-styles.css.js';\nimport { styles as material } from '../styles/grid/themes/light/grid.material-styles.css.js';\nimport ApexVirtualizer from './virtualizer.js';\nimport ApexGridHeaderRow from './header-row.js';\nimport ApexGridRow from './row.js';\nimport ApexGridCell from './cell.js';\nimport ApexFilterRow from './filter-row.js';\nimport { themes } from 'igniteui-webcomponents/theming/theming-decorator.js';\nimport { defineComponents, IgcButtonComponent, IgcChipComponent, IgcDropdownComponent, IgcInputComponent, IgcIconComponent } from 'igniteui-webcomponents';\n/**\n * Apex grid is a web component for displaying data in a tabular format quick and easy.\n *\n * Out of the box it provides row virtualization, sort and filter operations (client and server side),\n * the ability to template cells and headers and column hiding.\n *\n * @element apex-grid\n *\n * @fires sorting - Emitted when sorting is initiated through the UI.\n * @fires sorted - Emitted when a sort operation initiated through the UI has completed.\n * @fires filtering - Emitted when filtering is initiated through the UI.\n * @fires filtered - Emitted when a filter operation initiated through the UI has completed.\n *\n */\nlet ApexGrid = class ApexGrid extends EventEmitterBase {\n  constructor() {\n    super(...arguments);\n    this.stateController = new StateController(this);\n    this.DOM = new GridDOMController(this, this.stateController);\n    this.dataController = new DataOperationsController(this);\n    this.stateProvider = new ContextProvider(this, gridStateContext, this.stateController);\n    this.dataState = [];\n    /** Column configuration for the grid. */\n    this.columns = [];\n    /** The data source for the grid. */\n    this.data = [];\n    /**\n     * Whether the grid will try to \"resolve\" its column configuration based on the passed\n     * data source.\n     *\n     * @remarks\n     * This is usually executed on initial rendering in the DOM. It depends on having an existing data source\n     * to infer the column configuration for the grid.\n     * Passing an empty data source or having a late bound data source (such as a HTTP request) will usually\n     * result in empty column configuration for the grid.\n     *\n     * This property is ignored if any existing column configuration already exists in the grid.\n     *\n     * In a scenario where you want to bind a new data source and still keep the auto-generation behavior,\n     * make sure to reset the column collection of the grid before passing in the new data source.\n     *\n     * @example\n     * ```typescript\n     * // assuming autoGenerate is set to true\n     * grid.columns = [];\n     * grid.data = [...];\n     * ```\n     *\n     * @attr auto-generate\n     */\n    this.autoGenerate = false;\n    /** Sort configuration property for the grid. */\n    this.sortConfiguration = {\n      multiple: true,\n      triState: true\n    };\n  }\n  static get is() {\n    return GRID_TAG;\n  }\n  static register() {\n    registerComponent(this, [ApexVirtualizer, ApexGridRow, ApexGridHeaderRow, ApexFilterRow]);\n    defineComponents(IgcButtonComponent, IgcChipComponent, IgcInputComponent, IgcDropdownComponent, IgcIconComponent);\n  }\n  /**\n   * Set the sort state for the grid.\n   */\n  set sortExpressions(expressions) {\n    if (expressions.length) {\n      this.sort(expressions);\n    }\n  }\n  /**\n   * Get the sort state for the grid.\n   */\n  get sortExpressions() {\n    return Array.from(this.stateController.sorting.state.values());\n  }\n  /**\n   * Set the filter state for the grid.\n   */\n  set filterExpressions(expressions) {\n    if (expressions.length) {\n      this.filter(expressions);\n    }\n  }\n  /**\n   * Get the filter state for the grid.\n   */\n  get filterExpressions() {\n    return this.stateController.filtering.state.values.reduce((prev, curr) => [...prev, ...curr.all], []);\n  }\n  /**\n   * Returns the collection of rendered row elements in the grid.\n   *\n   * @remarks\n   * Since the grid has virtualization, this property returns only the currently rendered\n   * chunk of elements in the DOM.\n   */\n  get rows() {\n    return Array.from(this._rows);\n  }\n  /**\n   * Returns the state of the data source after sort/filter operations\n   * have been applied.\n   */\n  get dataView() {\n    return this.dataState;\n  }\n  /**\n   * The total number of items in the {@link ApexGrid.dataView} collection.\n   */\n  get totalItems() {\n    return this.dataState.length;\n  }\n  watchColumns(_, newConfig = []) {\n    this.columns = newConfig.map(config => ({\n      ...DEFAULT_COLUMN_CONFIG,\n      ...config\n    }));\n  }\n  dataChanged() {\n    this.dataState = structuredClone(this.data);\n    autoGenerateColumns(this);\n    if (this.hasUpdated) {\n      this.pipeline();\n    }\n  }\n  async pipeline() {\n    this.dataState = await this.dataController.apply(structuredClone(this.data), this.stateController);\n  }\n  /**\n   * Performs a filter operation in the grid based on the passed expression(s).\n   */\n  filter(config) {\n    this.stateController.filtering.filter(asArray(config).map(each => typeof each.condition === 'string' ?\n    // XXX: Types\n    Object.assign(each, {\n      condition: getFilterOperandsFor(this.getColumn(each.key))[each.condition]\n    }) : each));\n  }\n  /**\n   * Performs a sort operation in the grid based on the passed expression(s).\n   */\n  sort(expressions) {\n    this.stateController.sorting.sort(expressions);\n  }\n  /**\n   * Resets the current sort state of the control.\n   */\n  clearSort(key) {\n    this.stateController.sorting.reset(key);\n    this.requestUpdate(PIPELINE);\n  }\n  /**\n   * Resets the current filter state of the control.\n   */\n  clearFilter(key) {\n    this.stateController.filtering.reset(key);\n    this.requestUpdate(PIPELINE);\n  }\n  /**\n   * Returns a {@link ColumnConfiguration} for a given column.\n   */\n  getColumn(id) {\n    return typeof id === 'number' ? this.columns.at(id) : this.columns.find(({\n      key\n    }) => key === id);\n  }\n  /**\n   * Updates the column configuration of the grid.\n   */\n  updateColumns(columns) {\n    asArray(columns).forEach(column => {\n      const idx = this.columns.findIndex(original => original.key === column.key);\n      this.columns[idx] = {\n        ...this.columns[idx],\n        ...column\n      };\n    });\n    this.requestUpdate(PIPELINE);\n  }\n  bodyClickHandler(event) {\n    const target = event.composedPath().find(el => el instanceof ApexGridCell);\n    if (target) {\n      this.stateController.active = {\n        column: target.column.key,\n        row: target.row.index\n      };\n    }\n  }\n  bodyKeydownHandler(event) {\n    if (this.scrollContainer.isSameNode(event.target)) {\n      this.stateController.navigation.navigate(event);\n    }\n  }\n  renderHeaderRow() {\n    return html`<apex-grid-header-row\n      style=${styleMap(this.DOM.columnSizes)}\n      .columns=${this.columns}\n    ></apex-grid-header-row>`;\n  }\n  renderBody() {\n    return html`\n      <apex-virtualizer\n        .items=${this.dataState}\n        .renderItem=${this.DOM.rowRenderer}\n        @click=${this.bodyClickHandler}\n        @keydown=${this.bodyKeydownHandler}\n      ></apex-virtualizer>\n    `;\n  }\n  renderFilterRow() {\n    return this.columns.some(column => column.filter) ? html`<apex-filter-row style=${styleMap(this.DOM.columnSizes)}></apex-filter-row>` : nothing;\n  }\n  render() {\n    return html` ${this.stateController.resizing.renderIndicator()} ${this.renderHeaderRow()}\n    ${this.renderFilterRow()} ${this.renderBody()}`;\n  }\n};\nApexGrid.styles = bootstrap;\n__decorate([query(ApexVirtualizer.is)], ApexGrid.prototype, \"scrollContainer\", void 0);\n__decorate([query(ApexGridHeaderRow.is)], ApexGrid.prototype, \"headerRow\", void 0);\n__decorate([query(ApexFilterRow.is)], ApexGrid.prototype, \"filterRow\", void 0);\n__decorate([state()], ApexGrid.prototype, \"dataState\", void 0);\n__decorate([queryAll(ApexGridRow.is)], ApexGrid.prototype, \"_rows\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexGrid.prototype, \"columns\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexGrid.prototype, \"data\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'auto-generate'\n})], ApexGrid.prototype, \"autoGenerate\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexGrid.prototype, \"sortConfiguration\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexGrid.prototype, \"dataPipelineConfiguration\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexGrid.prototype, \"sortExpressions\", null);\n__decorate([property({\n  attribute: false\n})], ApexGrid.prototype, \"filterExpressions\", null);\n__decorate([watch('columns')], ApexGrid.prototype, \"watchColumns\", null);\n__decorate([watch('data')], ApexGrid.prototype, \"dataChanged\", null);\n__decorate([watch(PIPELINE)], ApexGrid.prototype, \"pipeline\", null);\n__decorate([eventOptions({\n  capture: true\n})], ApexGrid.prototype, \"bodyClickHandler\", null);\nApexGrid = __decorate([themes({\n  bootstrap,\n  fluent,\n  indigo,\n  material\n})], ApexGrid);\nexport { ApexGrid };","map":{"version":3,"names":["html","nothing","ContextProvider","eventOptions","property","query","queryAll","state","styleMap","GRID_TAG","StateController","gridStateContext","DataOperationsController","GridDOMController","EventEmitterBase","watch","DEFAULT_COLUMN_CONFIG","PIPELINE","asArray","autoGenerateColumns","getFilterOperandsFor","registerComponent","styles","bootstrap","fluent","indigo","material","ApexVirtualizer","ApexGridHeaderRow","ApexGridRow","ApexGridCell","ApexFilterRow","themes","defineComponents","IgcButtonComponent","IgcChipComponent","IgcDropdownComponent","IgcInputComponent","IgcIconComponent","ApexGrid","constructor","stateController","DOM","dataController","stateProvider","dataState","columns","data","autoGenerate","sortConfiguration","multiple","triState","is","register","sortExpressions","expressions","length","sort","Array","from","sorting","values","filterExpressions","filter","filtering","reduce","prev","curr","all","rows","_rows","dataView","totalItems","watchColumns","_","newConfig","map","config","dataChanged","structuredClone","hasUpdated","pipeline","apply","each","condition","Object","assign","getColumn","key","clearSort","reset","requestUpdate","clearFilter","id","at","find","updateColumns","forEach","column","idx","findIndex","original","bodyClickHandler","event","target","composedPath","el","active","row","index","bodyKeydownHandler","scrollContainer","isSameNode","navigation","navigate","renderHeaderRow","columnSizes","renderBody","rowRenderer","renderFilterRow","some","render","resizing","renderIndicator","__decorate","attribute","type","Boolean","capture"],"sources":["../../../src/components/grid.ts"],"sourcesContent":["import { html, nothing } from 'lit';\nimport { ContextProvider } from '@lit-labs/context';\nimport { eventOptions, property, query, queryAll, state } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n\nimport { GRID_TAG } from '../internal/tags.js';\nimport { StateController, gridStateContext } from '../controllers/state.js';\nimport { DataOperationsController } from '../controllers/data-operation.js';\nimport { GridDOMController } from '../controllers/dom.js';\nimport { EventEmitterBase } from '../internal/mixins/event-emitter.js';\nimport { watch } from '../internal/watch.js';\nimport { DEFAULT_COLUMN_CONFIG, PIPELINE } from '../internal/constants.js';\nimport { asArray, autoGenerateColumns, getFilterOperandsFor } from '../internal/utils.js';\n\nimport type {\n  ColumnConfiguration,\n  DataPipelineConfiguration,\n  GridSortConfiguration,\n  Keys,\n} from '../internal/types.js';\nimport type { FilterExpression } from '../operations/filter/types.js';\nimport type { SortExpression } from '../operations/sort/types.js';\n\nimport { registerComponent } from '../internal/register.js';\n\nimport { styles as bootstrap } from '../styles/grid/themes/light/grid.bootstrap-styles.css.js';\nimport { styles as fluent } from '../styles/grid/themes/light/grid.fluent-styles.css.js';\nimport { styles as indigo } from '../styles/grid/themes/light/grid.indigo-styles.css.js';\nimport { styles as material } from '../styles/grid/themes/light/grid.material-styles.css.js';\n\nimport ApexVirtualizer from './virtualizer.js';\nimport ApexGridHeaderRow from './header-row.js';\nimport ApexGridRow from './row.js';\nimport ApexGridCell from './cell.js';\nimport ApexFilterRow from './filter-row.js';\n\nimport { themes } from 'igniteui-webcomponents/theming/theming-decorator.js';\nimport {\n  defineComponents,\n  IgcButtonComponent,\n  IgcChipComponent,\n  IgcDropdownComponent,\n  IgcInputComponent,\n  IgcIconComponent,\n} from 'igniteui-webcomponents';\n\n/**\n * Event object for the filtering event of the grid.\n */\nexport interface ApexFilteringEvent<T extends object> {\n  /**\n   * The target column for the filter operation.\n   */\n  key: Keys<T>;\n\n  /**\n   * The filter expression(s) to apply.\n   */\n  expressions: FilterExpression<T>[];\n\n  /**\n   * The type of modification which will be applied to the filter\n   * state of the column.\n   *\n   * @remarks\n   * `add` - a new filter expression will be added to the state of the column.\n   * `modify` - an existing filter expression will be modified.\n   * `remove` - the expression(s) will be removed from the state of the column.\n   */\n  type: 'add' | 'modify' | 'remove';\n}\n\n/**\n * Event object for the filtered event of the grid.\n */\nexport interface ApexFilteredEvent<T extends object> {\n  /**\n   * The target column for the filter operation.\n   */\n  key: Keys<T>;\n\n  /**\n   * The filter state of the column after the operation.\n   */\n  state: FilterExpression<T>[];\n}\n\n/**\n * Events for the apex-grid.\n */\nexport interface ApexGridEventMap<T extends object> {\n  /**\n   * Emitted when sorting is initiated through the UI.\n   * Returns the sort expression which will be used for the operation.\n   *\n   * @remarks\n   * The event is cancellable which prevents the operation from being applied.\n   * The expression can be modified prior to the operation running.\n   *\n   * @event\n   */\n  sorting: CustomEvent<SortExpression<T>>;\n  /**\n   * Emitted when a sort operation initiated through the UI has completed.\n   * Returns the sort expression used for the operation.\n   *\n   * @event\n   */\n  sorted: CustomEvent<SortExpression<T>>;\n  /**\n   * Emitted when filtering is initiated through the UI.\n   *\n   * @remarks\n   * The event is cancellable which prevents the operation from being applied.\n   * The expression can be modified prior to the operation running.\n   *\n   * @event\n   */\n  filtering: CustomEvent<ApexFilteringEvent<T>>;\n  /**\n   * Emitted when a filter operation initiated through the UI has completed.\n   * Returns the filter state for the affected column.\n   *\n   * @event\n   */\n  filtered: CustomEvent<ApexFilteredEvent<T>>;\n}\n\n/**\n * Apex grid is a web component for displaying data in a tabular format quick and easy.\n *\n * Out of the box it provides row virtualization, sort and filter operations (client and server side),\n * the ability to template cells and headers and column hiding.\n *\n * @element apex-grid\n *\n * @fires sorting - Emitted when sorting is initiated through the UI.\n * @fires sorted - Emitted when a sort operation initiated through the UI has completed.\n * @fires filtering - Emitted when filtering is initiated through the UI.\n * @fires filtered - Emitted when a filter operation initiated through the UI has completed.\n *\n */\n@themes({\n  bootstrap,\n  fluent,\n  indigo,\n  material,\n})\nexport class ApexGrid<T extends object> extends EventEmitterBase<ApexGridEventMap<T>> {\n  public static get is() {\n    return GRID_TAG;\n  }\n\n  public static override styles = bootstrap;\n\n  public static register() {\n    registerComponent(this, [ApexVirtualizer, ApexGridRow, ApexGridHeaderRow, ApexFilterRow]);\n    defineComponents(\n      IgcButtonComponent,\n      IgcChipComponent,\n      IgcInputComponent,\n      IgcDropdownComponent,\n      IgcIconComponent,\n    );\n  }\n\n  protected stateController = new StateController<T>(this);\n  protected DOM = new GridDOMController<T>(this, this.stateController);\n  protected dataController = new DataOperationsController<T>(this);\n\n  protected stateProvider = new ContextProvider(this, gridStateContext, this.stateController);\n\n  @query(ApexVirtualizer.is)\n  protected scrollContainer!: ApexVirtualizer;\n\n  @query(ApexGridHeaderRow.is)\n  protected headerRow!: ApexGridHeaderRow<T>;\n\n  @query(ApexFilterRow.is)\n  protected filterRow!: ApexFilterRow<T>;\n\n  @state()\n  protected dataState: Array<T> = [];\n\n  @queryAll(ApexGridRow.is)\n  protected _rows!: NodeListOf<ApexGridRow<T>>;\n\n  /** Column configuration for the grid. */\n  @property({ attribute: false })\n  public columns: Array<ColumnConfiguration<T>> = [];\n\n  /** The data source for the grid. */\n  @property({ attribute: false })\n  public data: Array<T> = [];\n\n  /**\n   * Whether the grid will try to \"resolve\" its column configuration based on the passed\n   * data source.\n   *\n   * @remarks\n   * This is usually executed on initial rendering in the DOM. It depends on having an existing data source\n   * to infer the column configuration for the grid.\n   * Passing an empty data source or having a late bound data source (such as a HTTP request) will usually\n   * result in empty column configuration for the grid.\n   *\n   * This property is ignored if any existing column configuration already exists in the grid.\n   *\n   * In a scenario where you want to bind a new data source and still keep the auto-generation behavior,\n   * make sure to reset the column collection of the grid before passing in the new data source.\n   *\n   * @example\n   * ```typescript\n   * // assuming autoGenerate is set to true\n   * grid.columns = [];\n   * grid.data = [...];\n   * ```\n   *\n   * @attr auto-generate\n   */\n  @property({ type: Boolean, attribute: 'auto-generate' })\n  public autoGenerate = false;\n\n  /** Sort configuration property for the grid. */\n  @property({ attribute: false })\n  public sortConfiguration: GridSortConfiguration = {\n    multiple: true,\n    triState: true,\n  };\n\n  /**\n   * Configuration object which controls remote data operations for the grid.\n   */\n  @property({ attribute: false })\n  public dataPipelineConfiguration!: DataPipelineConfiguration<T>;\n\n  /**\n   * Set the sort state for the grid.\n   */\n  public set sortExpressions(expressions: SortExpression<T>[]) {\n    if (expressions.length) {\n      this.sort(expressions);\n    }\n  }\n\n  /**\n   * Get the sort state for the grid.\n   */\n  @property({ attribute: false })\n  public get sortExpressions(): SortExpression<T>[] {\n    return Array.from(this.stateController.sorting.state.values());\n  }\n\n  /**\n   * Set the filter state for the grid.\n   */\n  public set filterExpressions(expressions: FilterExpression<T>[]) {\n    if (expressions.length) {\n      this.filter(expressions);\n    }\n  }\n\n  /**\n   * Get the filter state for the grid.\n   */\n  @property({ attribute: false })\n  public get filterExpressions(): FilterExpression<T>[] {\n    return this.stateController.filtering.state.values.reduce<FilterExpression<T>[]>(\n      (prev, curr) => [...prev, ...curr.all],\n      [],\n    );\n  }\n\n  /**\n   * Returns the collection of rendered row elements in the grid.\n   *\n   * @remarks\n   * Since the grid has virtualization, this property returns only the currently rendered\n   * chunk of elements in the DOM.\n   */\n  public get rows() {\n    return Array.from(this._rows);\n  }\n\n  /**\n   * Returns the state of the data source after sort/filter operations\n   * have been applied.\n   */\n  public get dataView(): ReadonlyArray<T> {\n    return this.dataState;\n  }\n\n  /**\n   * The total number of items in the {@link ApexGrid.dataView} collection.\n   */\n  public get totalItems() {\n    return this.dataState.length;\n  }\n\n  @watch('columns')\n  protected watchColumns(_: ColumnConfiguration<T>[], newConfig: ColumnConfiguration<T>[] = []) {\n    this.columns = newConfig.map(config => ({ ...DEFAULT_COLUMN_CONFIG, ...config }));\n  }\n\n  @watch('data')\n  protected dataChanged() {\n    this.dataState = structuredClone(this.data);\n    autoGenerateColumns(this);\n\n    if (this.hasUpdated) {\n      this.pipeline();\n    }\n  }\n\n  @watch(PIPELINE)\n  protected async pipeline() {\n    this.dataState = await this.dataController.apply(\n      structuredClone(this.data),\n      this.stateController,\n    );\n  }\n\n  /**\n   * Performs a filter operation in the grid based on the passed expression(s).\n   */\n  public filter(config: FilterExpression<T> | FilterExpression<T>[]) {\n    this.stateController.filtering.filter(\n      asArray(config).map(each =>\n        typeof each.condition === 'string'\n          ? // XXX: Types\n            Object.assign(each, {\n              condition: (getFilterOperandsFor(this.getColumn(each.key)!) as any)[each.condition],\n            })\n          : each,\n      ),\n    );\n  }\n\n  /**\n   * Performs a sort operation in the grid based on the passed expression(s).\n   */\n  public sort(expressions: SortExpression<T> | SortExpression<T>[]) {\n    this.stateController.sorting.sort(expressions);\n  }\n\n  /**\n   * Resets the current sort state of the control.\n   */\n  public clearSort(key?: Keys<T>) {\n    this.stateController.sorting.reset(key);\n    this.requestUpdate(PIPELINE);\n  }\n\n  /**\n   * Resets the current filter state of the control.\n   */\n  public clearFilter(key?: Keys<T>) {\n    this.stateController.filtering.reset(key);\n    this.requestUpdate(PIPELINE);\n  }\n\n  /**\n   * Returns a {@link ColumnConfiguration} for a given column.\n   */\n  public getColumn(id: Keys<T> | number) {\n    return typeof id === 'number'\n      ? this.columns.at(id)\n      : this.columns.find(({ key }) => key === id);\n  }\n\n  /**\n   * Updates the column configuration of the grid.\n   */\n  public updateColumns(columns: ColumnConfiguration<T> | ColumnConfiguration<T>[]) {\n    asArray(columns).forEach(column => {\n      const idx = this.columns.findIndex(original => original.key === column.key);\n      this.columns[idx] = { ...this.columns[idx], ...column };\n    });\n    this.requestUpdate(PIPELINE);\n  }\n\n  @eventOptions({ capture: true })\n  protected bodyClickHandler(event: MouseEvent) {\n    const target = event.composedPath().find(el => el instanceof ApexGridCell) as ApexGridCell<T>;\n    if (target) {\n      this.stateController.active = {\n        column: target.column.key,\n        row: target.row.index,\n      };\n    }\n  }\n\n  protected bodyKeydownHandler(event: KeyboardEvent) {\n    if (this.scrollContainer.isSameNode(event.target as HTMLElement)) {\n      this.stateController.navigation.navigate(event);\n    }\n  }\n\n  protected renderHeaderRow() {\n    return html`<apex-grid-header-row\n      style=${styleMap(this.DOM.columnSizes)}\n      .columns=${this.columns}\n    ></apex-grid-header-row>`;\n  }\n\n  protected renderBody() {\n    return html`\n      <apex-virtualizer\n        .items=${this.dataState}\n        .renderItem=${this.DOM.rowRenderer}\n        @click=${this.bodyClickHandler}\n        @keydown=${this.bodyKeydownHandler}\n      ></apex-virtualizer>\n    `;\n  }\n\n  protected renderFilterRow() {\n    return this.columns.some(column => column.filter)\n      ? html`<apex-filter-row style=${styleMap(this.DOM.columnSizes)}></apex-filter-row>`\n      : nothing;\n  }\n\n  protected override render() {\n    return html` ${this.stateController.resizing.renderIndicator()} ${this.renderHeaderRow()}\n    ${this.renderFilterRow()} ${this.renderBody()}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    [ApexGrid.is]: ApexGrid<object>;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}