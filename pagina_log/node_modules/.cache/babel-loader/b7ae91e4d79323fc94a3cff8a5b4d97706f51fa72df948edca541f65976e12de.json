{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { ContextRequestEvent } from '../context-request-event.js';\n/**\n * ContextConsumer is a ReactiveController which binds a custom-element's\n * lifecycle to the Context API. When an element is connected to the DOM it\n * will emit the context-request event, invoking the callback set on the\n * controller when the context request is satisfied. It will also call\n * the dispose method provided by the Context API when the element is\n * disconnected.\n */\nexport class ContextConsumer {\n  constructor(host, context, callback, subscribe = false) {\n    this.host = host;\n    this.context = context;\n    this.callback = callback;\n    this.subscribe = subscribe;\n    this.provided = false;\n    this.value = undefined;\n    this.host.addController(this);\n  }\n  hostConnected() {\n    this.dispatchRequest();\n  }\n  hostDisconnected() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = undefined;\n    }\n  }\n  dispatchRequest() {\n    this.host.dispatchEvent(new ContextRequestEvent(this.context, (value, unsubscribe) => {\n      // some providers will pass an unsubscribe function indicating they may provide future values\n      if (this.unsubscribe) {\n        // if the unsubscribe function changes this implies we have changed provider\n        if (this.unsubscribe !== unsubscribe) {\n          // cleanup the old provider\n          this.provided = false;\n          this.unsubscribe();\n        }\n        // if we don't support subscription, immediately unsubscribe\n        if (!this.subscribe) {\n          this.unsubscribe();\n        }\n      }\n      // store the value so that it can be retrieved from the controller\n      this.value = value;\n      // schedule an update in case this value is used in a template\n      this.host.requestUpdate();\n      // only invoke callback if we are either expecting updates or have not yet\n      // been provided a value\n      if (!this.provided || this.subscribe) {\n        this.provided = true;\n        if (this.callback) {\n          this.callback(value, unsubscribe);\n        }\n      }\n      this.unsubscribe = unsubscribe;\n    }, this.subscribe));\n  }\n}","map":{"version":3,"names":["ContextRequestEvent","ContextConsumer","constructor","host","context","callback","subscribe","provided","value","undefined","addController","hostConnected","dispatchRequest","hostDisconnected","unsubscribe","dispatchEvent","requestUpdate"],"sources":["../../../src/lib/controllers/context-consumer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextRequestEvent} from '../context-request-event.js';\nimport {Context, ContextType} from '../create-context.js';\nimport {ReactiveController, ReactiveElement} from 'lit';\n\n/**\n * ContextConsumer is a ReactiveController which binds a custom-element's\n * lifecycle to the Context API. When an element is connected to the DOM it\n * will emit the context-request event, invoking the callback set on the\n * controller when the context request is satisfied. It will also call\n * the dispose method provided by the Context API when the element is\n * disconnected.\n */\nexport class ContextConsumer<\n  C extends Context<unknown, unknown>,\n  HostElement extends ReactiveElement\n> implements ReactiveController\n{\n  private provided = false;\n\n  public value?: ContextType<C> = undefined;\n\n  constructor(\n    protected host: HostElement,\n    private context: C,\n    private callback?: (value: ContextType<C>, dispose?: () => void) => void,\n    private subscribe: boolean = false\n  ) {\n    this.host.addController(this);\n  }\n\n  private unsubscribe?: () => void;\n\n  hostConnected(): void {\n    this.dispatchRequest();\n  }\n  hostDisconnected(): void {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = undefined;\n    }\n  }\n\n  private dispatchRequest() {\n    this.host.dispatchEvent(\n      new ContextRequestEvent(\n        this.context,\n        (value, unsubscribe) => {\n          // some providers will pass an unsubscribe function indicating they may provide future values\n          if (this.unsubscribe) {\n            // if the unsubscribe function changes this implies we have changed provider\n            if (this.unsubscribe !== unsubscribe) {\n              // cleanup the old provider\n              this.provided = false;\n              this.unsubscribe();\n            }\n            // if we don't support subscription, immediately unsubscribe\n            if (!this.subscribe) {\n              this.unsubscribe();\n            }\n          }\n\n          // store the value so that it can be retrieved from the controller\n          this.value = value;\n          // schedule an update in case this value is used in a template\n          this.host.requestUpdate();\n\n          // only invoke callback if we are either expecting updates or have not yet\n          // been provided a value\n          if (!this.provided || this.subscribe) {\n            this.provided = true;\n            if (this.callback) {\n              this.callback(value, unsubscribe);\n            }\n          }\n\n          this.unsubscribe = unsubscribe;\n        },\n        this.subscribe\n      )\n    );\n  }\n}\n"],"mappings":"AAAA;;;;;AAMA,SAAQA,mBAAmB,QAAO,6BAA6B;AAI/D;;;;;;;;AAQA,OAAM,MAAOC,eAAe;EAS1BC,YACYC,IAAiB,EACnBC,OAAU,EACVC,QAAgE,EAChEC,SAAA,GAAqB,KAAK;IAHxB,KAAAH,IAAI,GAAJA,IAAI;IACN,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,SAAS,GAATA,SAAS;IARX,KAAAC,QAAQ,GAAG,KAAK;IAEjB,KAAAC,KAAK,GAAoBC,SAAS;IAQvC,IAAI,CAACN,IAAI,CAACO,aAAa,CAAC,IAAI,CAAC;EAC/B;EAIAC,aAAaA,CAAA;IACX,IAAI,CAACC,eAAe,EAAE;EACxB;EACAC,gBAAgBA,CAAA;IACd,IAAI,IAAI,CAACC,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,EAAE;MAClB,IAAI,CAACA,WAAW,GAAGL,SAAS;;EAEhC;EAEQG,eAAeA,CAAA;IACrB,IAAI,CAACT,IAAI,CAACY,aAAa,CACrB,IAAIf,mBAAmB,CACrB,IAAI,CAACI,OAAO,EACZ,CAACI,KAAK,EAAEM,WAAW,KAAI;MACrB;MACA,IAAI,IAAI,CAACA,WAAW,EAAE;QACpB;QACA,IAAI,IAAI,CAACA,WAAW,KAAKA,WAAW,EAAE;UACpC;UACA,IAAI,CAACP,QAAQ,GAAG,KAAK;UACrB,IAAI,CAACO,WAAW,EAAE;;QAEpB;QACA,IAAI,CAAC,IAAI,CAACR,SAAS,EAAE;UACnB,IAAI,CAACQ,WAAW,EAAE;;;MAItB;MACA,IAAI,CAACN,KAAK,GAAGA,KAAK;MAClB;MACA,IAAI,CAACL,IAAI,CAACa,aAAa,EAAE;MAEzB;MACA;MACA,IAAI,CAAC,IAAI,CAACT,QAAQ,IAAI,IAAI,CAACD,SAAS,EAAE;QACpC,IAAI,CAACC,QAAQ,GAAG,IAAI;QACpB,IAAI,IAAI,CAACF,QAAQ,EAAE;UACjB,IAAI,CAACA,QAAQ,CAACG,KAAK,EAAEM,WAAW,CAAC;;;MAIrC,IAAI,CAACA,WAAW,GAAGA,WAAW;IAChC,CAAC,EACD,IAAI,CAACR,SAAS,CACf,CACF;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}