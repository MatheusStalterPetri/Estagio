{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { css, html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\nexport default class IgcFormComponent extends EventEmitterMixin(LitElement) {\n  constructor() {\n    super();\n    this._controlsWithChecked = ['input', 'radio', 'igc-radio', 'igc-switch', 'igc-checkbox'];\n    this._controlsWithValue = ['input', 'igc-input', 'igc-mask-input', 'textarea', 'igc-rating', 'igc-select', 'igc-combo', 'igc-date-time-input'];\n    this._controlsThatSubmit = ['input', 'button', 'igc-button', 'igc-icon-button'];\n    this.novalidate = false;\n    this.addEventListener('click', this.handleClick);\n  }\n  submit() {\n    const formData = this.getFormData();\n    if (!this.novalidate && !this.reportValidity()) {\n      return false;\n    }\n    this.emitEvent('igcSubmit', {\n      detail: formData\n    });\n    return true;\n  }\n  reset() {\n    const formElements = this.getFormElements();\n    formElements.forEach(element => {\n      const tagName = element.tagName.toLowerCase();\n      if (tagName === 'select') {\n        for (let i = 0; i < element.options.length; i++) {\n          const option = element.options[i];\n          option.selected = option.defaultSelected;\n        }\n      } else if (tagName === 'input' && (element.type === 'checkbox' || element.type == 'radio') || tagName !== 'input' && this._controlsWithChecked.includes(tagName)) {\n        element.checked = element.hasAttribute('checked');\n      } else if (tagName === 'igc-input' || tagName === 'igc-rating' || tagName === 'igc-mask-input' || tagName === 'igc-date-time-input') {\n        element.value = element.getAttribute('value');\n      } else if (this._controlsWithValue.includes(tagName)) {\n        element.value = element.defaultValue;\n      }\n    });\n    this.emitEvent('igcReset');\n  }\n  getFormElements() {\n    var _a;\n    const slot = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('slot');\n    const assignedElements = slot === null || slot === void 0 ? void 0 : slot.assignedElements({\n      flatten: true\n    });\n    const formElements = [];\n    assignedElements === null || assignedElements === void 0 ? void 0 : assignedElements.forEach(element => {\n      if (!element.disabled) {\n        formElements.push(element);\n      }\n      const children = Array.from(element.getElementsByTagName('*')).filter(element => !element.disabled);\n      formElements.push(...children);\n    });\n    return formElements;\n  }\n  getFormData() {\n    const formData = new FormData();\n    const formElements = this.getFormElements();\n    formElements.forEach(element => {\n      const tagName = element.tagName.toLowerCase();\n      if (tagName === 'select') {\n        for (let i = 0; i < element.options.length; i++) {\n          const option = element.options[i];\n          if (option.selected) {\n            formData.append(element.name, option.value);\n          }\n        }\n      } else if (this._controlsWithChecked.includes(tagName) && element.checked) {\n        formData.append(element.name, element.value || 'on');\n      } else if (this._controlsWithValue.includes(tagName) && element.type !== 'checkbox' && element.type !== 'radio' && element.type !== 'submit') {\n        formData.append(element.name, element.value);\n      }\n    });\n    return formData;\n  }\n  reportValidity() {\n    const formElements = this.getFormElements();\n    return !formElements.some(element => typeof element.reportValidity === 'function' && element.reportValidity() === false);\n  }\n  handleClick(event) {\n    var _a, _b;\n    const targetElement = event.target;\n    if (this._controlsThatSubmit.includes(targetElement.tagName.toLowerCase()) && ((_a = targetElement.type) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'submit') {\n      this.submit();\n    } else if (((_b = targetElement.type) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'reset') {\n      this.reset();\n    }\n    return true;\n  }\n  render() {\n    return html`<slot></slot>`;\n  }\n}\nIgcFormComponent.tagName = 'igc-form';\nIgcFormComponent.styles = css`\n    :host {\n      display: block;\n    }\n  `;\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], IgcFormComponent.prototype, \"novalidate\", void 0);\n__decorate([alternateName('performSubmit')], IgcFormComponent.prototype, \"submit\", null);\n__decorate([alternateName('performReset')], IgcFormComponent.prototype, \"reset\", null);\n__decorate([blazorSuppress()], IgcFormComponent.prototype, \"getFormData\", null);","map":{"version":3,"names":["css","html","LitElement","property","EventEmitterMixin","alternateName","blazorSuppress","IgcFormComponent","constructor","_controlsWithChecked","_controlsWithValue","_controlsThatSubmit","novalidate","addEventListener","handleClick","submit","formData","getFormData","reportValidity","emitEvent","detail","reset","formElements","getFormElements","forEach","element","tagName","toLowerCase","i","options","length","option","selected","defaultSelected","type","includes","checked","hasAttribute","value","getAttribute","defaultValue","slot","_a","shadowRoot","querySelector","assignedElements","flatten","disabled","push","children","Array","from","getElementsByTagName","filter","FormData","append","name","some","event","targetElement","target","_b","render","styles","__decorate","Boolean","reflect"],"sources":["../../../src/components/form/form.ts"],"sourcesContent":["import { css, html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { Constructor } from '../common/mixins/constructor.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\n\nexport interface IgcFormEventMap {\n  igcSubmit: CustomEvent<FormData>;\n  igcReset: CustomEvent;\n}\n\n/**\n * The form is a component used to collect user input from\n * interactive controls.\n *\n * @element igc-form\n *\n * @slot - Default slot for the form.\n *\n * @fires igcSubmit - Emitted when the form is submitted.\n * @fires igcReset - Emitted when the form is reset.\n */\nexport default class IgcFormComponent extends EventEmitterMixin<\n  IgcFormEventMap,\n  Constructor<LitElement>\n>(LitElement) {\n  public static readonly tagName = 'igc-form';\n\n  public static styles = css`\n    :host {\n      display: block;\n    }\n  `;\n\n  private _controlsWithChecked = [\n    'input',\n    'radio',\n    'igc-radio',\n    'igc-switch',\n    'igc-checkbox',\n  ];\n  private _controlsWithValue = [\n    'input',\n    'igc-input',\n    'igc-mask-input',\n    'textarea',\n    'igc-rating',\n    'igc-select',\n    'igc-combo',\n    'igc-date-time-input',\n  ];\n  private _controlsThatSubmit = [\n    'input',\n    'button',\n    'igc-button',\n    'igc-icon-button',\n  ];\n\n  /** Specifies if form data validation should be skipped on submit. */\n  @property({ type: Boolean, reflect: true }) public novalidate = false;\n\n  constructor() {\n    super();\n\n    this.addEventListener('click', this.handleClick);\n  }\n\n  /** Submits the form. */\n  @alternateName('performSubmit')\n  public submit(): boolean {\n    const formData = this.getFormData();\n    if (!this.novalidate && !this.reportValidity()) {\n      return false;\n    }\n\n    this.emitEvent('igcSubmit', { detail: formData });\n    return true;\n  }\n\n  /** Resets the form. */\n  @alternateName('performReset')\n  public reset() {\n    const formElements = this.getFormElements();\n    formElements.forEach((element) => {\n      const tagName = element.tagName.toLowerCase();\n      if (tagName === 'select') {\n        for (let i = 0; i < element.options.length; i++) {\n          const option = element.options[i];\n          option.selected = option.defaultSelected;\n        }\n      } else if (\n        (tagName === 'input' &&\n          (element.type === 'checkbox' || element.type == 'radio')) ||\n        (tagName !== 'input' && this._controlsWithChecked.includes(tagName))\n      ) {\n        element.checked = element.hasAttribute('checked');\n      } else if (\n        tagName === 'igc-input' ||\n        tagName === 'igc-rating' ||\n        tagName === 'igc-mask-input' ||\n        tagName === 'igc-date-time-input'\n      ) {\n        element.value = element.getAttribute('value');\n      } else if (this._controlsWithValue.includes(tagName)) {\n        element.value = element.defaultValue;\n      }\n    });\n\n    this.emitEvent('igcReset');\n  }\n\n  private getFormElements(): any[] {\n    const slot = this.shadowRoot?.querySelector('slot');\n    const assignedElements = slot?.assignedElements({ flatten: true });\n    const formElements: any[] = [];\n    assignedElements?.forEach((element: any) => {\n      if (!element.disabled) {\n        formElements.push(element);\n      }\n      const children = Array.from(element.getElementsByTagName('*')).filter(\n        (element: any) => !element.disabled\n      );\n      formElements.push(...children);\n    });\n\n    return formElements;\n  }\n\n  //suppressing in blazor for now due to an issue, bringing it back later\n  /** Retrieves the data from the form in the format of a FormData object. */\n  @blazorSuppress()\n  public getFormData() {\n    const formData = new FormData();\n\n    const formElements = this.getFormElements();\n    formElements.forEach((element) => {\n      const tagName = element.tagName.toLowerCase();\n      if (tagName === 'select') {\n        for (let i = 0; i < element.options.length; i++) {\n          const option = element.options[i];\n          if (option.selected) {\n            formData.append(element.name, option.value);\n          }\n        }\n      } else if (\n        this._controlsWithChecked.includes(tagName) &&\n        element.checked\n      ) {\n        formData.append(element.name, element.value || 'on');\n      } else if (\n        this._controlsWithValue.includes(tagName) &&\n        element.type !== 'checkbox' &&\n        element.type !== 'radio' &&\n        element.type !== 'submit'\n      ) {\n        formData.append(element.name, element.value);\n      }\n    });\n\n    return formData;\n  }\n\n  /** Checks for validity of the form. */\n  public reportValidity(): boolean {\n    const formElements = this.getFormElements();\n    return !formElements.some(\n      (element) =>\n        typeof element.reportValidity === 'function' &&\n        element.reportValidity() === false\n    );\n  }\n\n  private handleClick(event: MouseEvent) {\n    const targetElement: any = event.target as HTMLElement;\n    if (\n      this._controlsThatSubmit.includes(targetElement.tagName.toLowerCase()) &&\n      targetElement.type?.toLowerCase() === 'submit'\n    ) {\n      this.submit();\n    } else if (targetElement.type?.toLowerCase() === 'reset') {\n      this.reset();\n    }\n\n    return true;\n  }\n\n  protected override render() {\n    return html`<slot></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-form': IgcFormComponent;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}