{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ApexGridHeader_instances, _ApexGridHeader_addResizeEventHandlers, _ApexGridHeader_handleClick, _ApexGridHeader_handleResize, _ApexGridHeader_handleResizeStart, _ApexGridHeader_handlePointerLost, _ApexGridHeader_handleAutosize;\nimport { html, LitElement, nothing } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { consume } from '@lit-labs/context';\nimport { partNameMap } from '../internal/part-map.js';\nimport { GRID_HEADER_TAG } from '../internal/tags.js';\nimport { registerComponent } from '../internal/register.js';\nimport { MIN_COL_RESIZE_WIDTH, SORT_ICON_ASCENDING, SORT_ICON_DESCENDING } from '../internal/constants.js';\nimport { gridStateContext } from '../controllers/state.js';\nimport { styles } from '../styles/header-cell/header-cell-styles.css.js';\nexport default class ApexGridHeader extends LitElement {\n  constructor() {\n    super(...arguments);\n    _ApexGridHeader_instances.add(this);\n    _ApexGridHeader_handleResize.set(this, ({\n      clientX\n    }) => {\n      const {\n        left\n      } = this.getBoundingClientRect();\n      const width = Math.max(clientX - left, MIN_COL_RESIZE_WIDTH);\n      const x = this.offsetLeft + width;\n      this.resizeController.resize(this.column, width, x);\n    });\n    _ApexGridHeader_handlePointerLost.set(this, () => {\n      this.resizeController.indicatorActive = false;\n      this.removeEventListener('pointermove', __classPrivateFieldGet(this, _ApexGridHeader_handleResize, \"f\"));\n      this.resizeController.stop();\n    });\n    _ApexGridHeader_handleAutosize.set(this, () => this.resizeController.autosize(this.column, this));\n  }\n  static get is() {\n    return GRID_HEADER_TAG;\n  }\n  static register() {\n    registerComponent(this);\n  }\n  get context() {\n    return {\n      parent: this,\n      column: this.column\n    };\n  }\n  get isSortable() {\n    return Boolean(this.column.sort);\n  }\n  get resizeController() {\n    return this.state.resizing;\n  }\n  renderSortPart() {\n    const state = this.state.sorting.state.get(this.column.key);\n    const idx = Array.from(this.state.sorting.state.values()).indexOf(state);\n    const attr = this.state.host.sortConfiguration.multiple ? idx > -1 ? idx + 1 : nothing : nothing;\n    const icon = state ? state.direction === 'ascending' ? SORT_ICON_ASCENDING : SORT_ICON_DESCENDING : SORT_ICON_ASCENDING;\n    return state || this.isSortable ? html`<span\n          part=${partNameMap({\n      action: true,\n      sorted: !!(state === null || state === void 0 ? void 0 : state.direction)\n    })}\n          @click=${this.isSortable ? __classPrivateFieldGet(this, _ApexGridHeader_instances, \"m\", _ApexGridHeader_handleClick) : nothing}\n        >\n          <igc-icon\n            part=${partNameMap({\n      'sorting-action': !!state\n    })}\n            data-sortIndex=${attr}\n            name=${icon}\n            collection=\"internal\"\n          ></igc-icon>\n        </span>` : nothing;\n  }\n  renderContentPart() {\n    var _a;\n    const defaultContent = (_a = this.column.headerText) !== null && _a !== void 0 ? _a : this.column.key;\n    const template = this.column.headerTemplate;\n    return html`\n      <span part=\"title\">\n        <span>${template ? template(this.context) : html`${defaultContent}`}</span>\n      </span>\n    `;\n  }\n  renderResizePart() {\n    return this.column.resizable ? html`<span\n          part=\"resizable\"\n          @dblclick=${__classPrivateFieldGet(this, _ApexGridHeader_handleAutosize, \"f\")}\n          @pointerdown=${__classPrivateFieldGet(this, _ApexGridHeader_instances, \"m\", _ApexGridHeader_handleResizeStart)}\n        ></span>` : nothing;\n  }\n  render() {\n    return html`\n      <div\n        part=${partNameMap({\n      content: true,\n      sortable: this.isSortable,\n      resizing: this.resizeController.indicatorActive\n    })}\n      >\n        ${this.renderContentPart()}\n        <div part=\"actions\">${this.renderSortPart()}</div>\n      </div>\n      ${this.renderResizePart()}\n    `;\n  }\n}\n_ApexGridHeader_handleResize = new WeakMap(), _ApexGridHeader_handlePointerLost = new WeakMap(), _ApexGridHeader_handleAutosize = new WeakMap(), _ApexGridHeader_instances = new WeakSet(), _ApexGridHeader_addResizeEventHandlers = function _ApexGridHeader_addResizeEventHandlers() {\n  const config = {\n    once: true\n  };\n  this.addEventListener('gotpointercapture', () => this.resizeController.indicatorActive = true, config);\n  this.addEventListener('lostpointercapture', __classPrivateFieldGet(this, _ApexGridHeader_handlePointerLost, \"f\"), config);\n  this.addEventListener('pointerup', e => this.releasePointerCapture(e.pointerId), config);\n  this.addEventListener('pointermove', __classPrivateFieldGet(this, _ApexGridHeader_handleResize, \"f\"));\n}, _ApexGridHeader_handleClick = function _ApexGridHeader_handleClick(e) {\n  e.stopPropagation();\n  this.state.sorting.sortFromHeaderClick(this.column);\n}, _ApexGridHeader_handleResizeStart = function _ApexGridHeader_handleResizeStart(ev) {\n  const {\n    target,\n    pointerId\n  } = ev;\n  ev.preventDefault();\n  __classPrivateFieldGet(this, _ApexGridHeader_instances, \"m\", _ApexGridHeader_addResizeEventHandlers).call(this);\n  this.resizeController.start(this);\n  target.setPointerCapture(pointerId);\n};\nApexGridHeader.styles = styles;\n__decorate([consume({\n  context: gridStateContext,\n  subscribe: true\n}), property({\n  attribute: false\n})], ApexGridHeader.prototype, \"state\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexGridHeader.prototype, \"column\", void 0);","map":{"version":3,"names":["html","LitElement","nothing","property","consume","partNameMap","GRID_HEADER_TAG","registerComponent","MIN_COL_RESIZE_WIDTH","SORT_ICON_ASCENDING","SORT_ICON_DESCENDING","gridStateContext","styles","ApexGridHeader","constructor","_ApexGridHeader_handleResize","set","clientX","left","getBoundingClientRect","width","Math","max","x","offsetLeft","resizeController","resize","column","_ApexGridHeader_handlePointerLost","indicatorActive","removeEventListener","__classPrivateFieldGet","stop","_ApexGridHeader_handleAutosize","autosize","is","register","context","parent","isSortable","Boolean","sort","state","resizing","renderSortPart","sorting","get","key","idx","Array","from","values","indexOf","attr","host","sortConfiguration","multiple","icon","direction","action","sorted","_ApexGridHeader_instances","_ApexGridHeader_handleClick","renderContentPart","defaultContent","_a","headerText","template","headerTemplate","renderResizePart","resizable","_ApexGridHeader_handleResizeStart","render","content","sortable","config","once","addEventListener","e","releasePointerCapture","pointerId","stopPropagation","sortFromHeaderClick","ev","target","preventDefault","_ApexGridHeader_addResizeEventHandlers","call","start","setPointerCapture","__decorate","subscribe","attribute"],"sources":["../../../src/components/header.ts"],"sourcesContent":["import { html, LitElement, nothing } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { consume } from '@lit-labs/context';\nimport { partNameMap } from '../internal/part-map.js';\nimport { GRID_HEADER_TAG } from '../internal/tags.js';\nimport { registerComponent } from '../internal/register.js';\nimport {\n  MIN_COL_RESIZE_WIDTH,\n  SORT_ICON_ASCENDING,\n  SORT_ICON_DESCENDING,\n} from '../internal/constants.js';\nimport type { ColumnConfiguration, ApexHeaderContext } from '../internal/types.js';\nimport { StateController, gridStateContext } from '../controllers/state.js';\nimport { styles } from '../styles/header-cell/header-cell-styles.css.js';\n\nexport default class ApexGridHeader<T extends object> extends LitElement {\n  public static get is() {\n    return GRID_HEADER_TAG;\n  }\n\n  public static override styles = styles;\n\n  public static register() {\n    registerComponent(this);\n  }\n\n  protected get context(): ApexHeaderContext<T> {\n    return {\n      parent: this,\n      column: this.column,\n    };\n  }\n\n  protected get isSortable() {\n    return Boolean(this.column.sort);\n  }\n\n  protected get resizeController() {\n    return this.state.resizing;\n  }\n\n  @consume({ context: gridStateContext, subscribe: true })\n  @property({ attribute: false })\n  public state!: StateController<T>;\n\n  @property({ attribute: false })\n  public column!: ColumnConfiguration<T>;\n\n  #addResizeEventHandlers() {\n    const config: AddEventListenerOptions = { once: true };\n\n    this.addEventListener(\n      'gotpointercapture',\n      () => (this.resizeController.indicatorActive = true),\n      config,\n    );\n    this.addEventListener('lostpointercapture', this.#handlePointerLost, config);\n    this.addEventListener('pointerup', e => this.releasePointerCapture(e.pointerId), config);\n    this.addEventListener('pointermove', this.#handleResize);\n  }\n\n  #handleClick(e: Event) {\n    e.stopPropagation();\n    this.state.sorting.sortFromHeaderClick(this.column);\n  }\n\n  #handleResize = ({ clientX }: PointerEvent) => {\n    const { left } = this.getBoundingClientRect();\n    const width = Math.max(clientX - left, MIN_COL_RESIZE_WIDTH);\n    const x = this.offsetLeft + width;\n\n    this.resizeController.resize(this.column, width, x);\n  };\n\n  #handleResizeStart(ev: PointerEvent) {\n    const { target, pointerId } = ev;\n\n    ev.preventDefault();\n\n    this.#addResizeEventHandlers();\n    this.resizeController.start(this);\n\n    (target as HTMLElement).setPointerCapture(pointerId);\n  }\n\n  #handlePointerLost = () => {\n    this.resizeController.indicatorActive = false;\n    this.removeEventListener('pointermove', this.#handleResize);\n    this.resizeController.stop();\n  };\n\n  #handleAutosize = () => this.resizeController.autosize(this.column, this);\n\n  protected renderSortPart() {\n    const state = this.state.sorting.state.get(this.column.key);\n    const idx = Array.from(this.state.sorting.state.values()).indexOf(state!);\n    const attr = this.state.host.sortConfiguration.multiple\n      ? idx > -1\n        ? idx + 1\n        : nothing\n      : nothing;\n    const icon = state\n      ? state.direction === 'ascending'\n        ? SORT_ICON_ASCENDING\n        : SORT_ICON_DESCENDING\n      : SORT_ICON_ASCENDING;\n\n    return state || this.isSortable\n      ? html`<span\n          part=${partNameMap({ action: true, sorted: !!state?.direction })}\n          @click=${this.isSortable ? this.#handleClick : nothing}\n        >\n          <igc-icon\n            part=${partNameMap({ 'sorting-action': !!state })}\n            data-sortIndex=${attr}\n            name=${icon}\n            collection=\"internal\"\n          ></igc-icon>\n        </span>`\n      : nothing;\n  }\n\n  protected renderContentPart() {\n    const defaultContent = this.column.headerText ?? this.column.key;\n    const template = this.column.headerTemplate;\n\n    return html`\n      <span part=\"title\">\n        <span>${template ? template(this.context) : html`${defaultContent}`}</span>\n      </span>\n    `;\n  }\n\n  protected renderResizePart() {\n    return this.column.resizable\n      ? html`<span\n          part=\"resizable\"\n          @dblclick=${this.#handleAutosize}\n          @pointerdown=${this.#handleResizeStart}\n        ></span>`\n      : nothing;\n  }\n\n  protected override render() {\n    return html`\n      <div\n        part=${partNameMap({\n          content: true,\n          sortable: this.isSortable,\n          resizing: this.resizeController.indicatorActive,\n        })}\n      >\n        ${this.renderContentPart()}\n        <div part=\"actions\">${this.renderSortPart()}</div>\n      </div>\n      ${this.renderResizePart()}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    [ApexGridHeader.is]: ApexGridHeader<object>;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}