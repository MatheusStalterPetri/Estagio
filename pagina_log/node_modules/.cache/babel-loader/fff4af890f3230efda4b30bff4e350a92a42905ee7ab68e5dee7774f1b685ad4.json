{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { IgcSliderBaseComponent } from './slider-base.js';\nexport default class IgcSliderComponent extends EventEmitterMixin(IgcSliderBaseComponent) {\n  constructor() {\n    super(...arguments);\n    this._value = 0;\n  }\n  set value(val) {\n    const oldVal = this._value;\n    this._value = this.validateValue(val);\n    this.requestUpdate('value', oldVal);\n  }\n  get value() {\n    return this._value;\n  }\n  set ariaLabel(value) {\n    const oldVal = this._ariaLabel;\n    this._ariaLabel = value;\n    if (this.hasAttribute('aria-label')) {\n      this.removeAttribute('aria-label');\n    }\n    this.requestUpdate('ariaLabel', oldVal);\n  }\n  get ariaLabel() {\n    return this._ariaLabel;\n  }\n  get activeValue() {\n    return this.value;\n  }\n  normalizeValue() {\n    this._value = this.validateValue(this._value);\n  }\n  getTrackStyle() {\n    const position = this.valueToFraction(this.value);\n    const filledTrackStyle = {\n      width: `${position * 100}%`\n    };\n    return filledTrackStyle;\n  }\n  updateValue(increment) {\n    const oldValue = this.value;\n    this.value = this.value + increment;\n    if (oldValue === this.value) {\n      return false;\n    }\n    this.emitInputEvent();\n    return true;\n  }\n  emitInputEvent() {\n    this.emitEvent('igcInput', {\n      detail: this.value\n    });\n  }\n  emitChangeEvent() {\n    this.emitEvent('igcChange', {\n      detail: this.value\n    });\n  }\n  stepUp(stepIncrement = 1) {\n    this.value = this.value + stepIncrement * this.step;\n  }\n  stepDown(stepDecrement = 1) {\n    this.value = this.value - stepDecrement * this.step;\n  }\n  renderThumbs() {\n    return html`${this.renderThumb(this.value, this.ariaLabel)}`;\n  }\n}\nIgcSliderComponent.tagName = 'igc-slider';\n__decorate([property({\n  type: Number\n})], IgcSliderComponent.prototype, \"value\", null);\n__decorate([property({\n  attribute: 'aria-label'\n})], IgcSliderComponent.prototype, \"ariaLabel\", null);","map":{"version":3,"names":["html","property","EventEmitterMixin","IgcSliderBaseComponent","IgcSliderComponent","constructor","_value","value","val","oldVal","validateValue","requestUpdate","ariaLabel","_ariaLabel","hasAttribute","removeAttribute","activeValue","normalizeValue","getTrackStyle","position","valueToFraction","filledTrackStyle","width","updateValue","increment","oldValue","emitInputEvent","emitEvent","detail","emitChangeEvent","stepUp","stepIncrement","step","stepDown","stepDecrement","renderThumbs","renderThumb","tagName","__decorate","type","Number","attribute"],"sources":["../../../src/components/slider/slider.ts"],"sourcesContent":["import { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { IgcSliderBaseComponent } from './slider-base.js';\n\nexport interface IgcSliderEventMap {\n  /**\n   * Emitted when a value is changed via thumb drag or keyboard interaction.\n   */\n  igcInput: CustomEvent<number>;\n  /**\n   * Emitted when a value change is committed on a thumb drag end or keyboard interaction.\n   */\n  igcChange: CustomEvent<number>;\n}\n\n/**\n * A slider component used to select numeric value within a range.\n *\n * @element igc-slider\n *\n * @fires igcInput - Emitted when a value is changed via thumb drag or keyboard interaction.\n * @fires igcChange - Emitted when a value change is committed on a thumb drag end or keyboard interaction.\n *\n * @csspart base - The base wrapper of the slider.\n * @csspart ticks - The ticks container.\n * @csspart tick-group - The tick group container.\n * @csspart tick - The tick element.\n * @csspart tick-label - The tick label element.\n * @csspart tick-label-inner - The inner element of the tick label.\n * @csspart thumbs - The thumbs container.\n * @csspart thumb - The thumb element.\n * @csspart thumb-label - The thumb tooltip label container.\n * @csspart thumb-label-inner - The thumb tooltip label inner element.\n * @csspart track - The track container.\n * @csspart steps - The track steps element.\n * @csspart inactive - The inactive element of the track.\n * @csspart fill - The filled part of the track.\n */\nexport default class IgcSliderComponent extends EventEmitterMixin<\n  IgcSliderEventMap,\n  Constructor<IgcSliderBaseComponent>\n>(IgcSliderBaseComponent) {\n  public static readonly tagName = 'igc-slider';\n\n  private _value = 0;\n  private _ariaLabel!: string;\n\n  public set value(val: number) {\n    const oldVal = this._value;\n    this._value = this.validateValue(val);\n    this.requestUpdate('value', oldVal);\n  }\n\n  /**\n   * The current value of the slider.\n   * @attr\n   */\n  @property({ type: Number })\n  public get value() {\n    return this._value;\n  }\n\n  public override set ariaLabel(value: string) {\n    const oldVal = this._ariaLabel;\n    this._ariaLabel = value;\n\n    if (this.hasAttribute('aria-label')) {\n      this.removeAttribute('aria-label');\n    }\n    this.requestUpdate('ariaLabel', oldVal);\n  }\n\n  /**\n   * The aria label of the slider thumb.\n   * @attr\n   */\n  @property({ attribute: 'aria-label' })\n  public override get ariaLabel() {\n    return this._ariaLabel;\n  }\n\n  protected override get activeValue(): number {\n    return this.value;\n  }\n\n  protected override normalizeValue(): void {\n    this._value = this.validateValue(this._value);\n  }\n\n  protected override getTrackStyle() {\n    const position = this.valueToFraction(this.value);\n    const filledTrackStyle = {\n      width: `${position * 100}%`,\n    };\n\n    return filledTrackStyle;\n  }\n\n  protected override updateValue(increment: number) {\n    const oldValue = this.value;\n\n    this.value = (this.value as number) + increment;\n\n    if (oldValue === this.value) {\n      return false;\n    }\n\n    this.emitInputEvent();\n    return true;\n  }\n\n  protected override emitInputEvent() {\n    this.emitEvent('igcInput', { detail: this.value });\n  }\n\n  protected override emitChangeEvent() {\n    this.emitEvent('igcChange', { detail: this.value });\n  }\n\n  /**\n   * Increments the value of the slider by `stepIncrement * step`, where `stepIncrement` defaults to 1.\n   * @param stepIncrement Optional step increment. If no parameter is passed, it defaults to 1.\n   */\n  public stepUp(stepIncrement = 1) {\n    this.value = this.value + stepIncrement * this.step;\n  }\n\n  /**\n   * Decrements the value of the slider by `stepDecrement * step`, where `stepDecrement` defaults to 1.\n   * @param stepDecrement Optional step decrement. If no parameter is passed, it defaults to 1.\n   */\n  public stepDown(stepDecrement = 1) {\n    this.value = this.value - stepDecrement * this.step;\n  }\n\n  protected override renderThumbs() {\n    return html`${this.renderThumb(this.value, this.ariaLabel)}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-slider': IgcSliderComponent;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}