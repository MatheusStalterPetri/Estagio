{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ApexFilterRow_instances, _ApexFilterRow_setDefaultExpression, _ApexFilterRow_removeExpression, _ApexFilterRow_show, _ApexFilterRow_handleConditionChanged, _ApexFilterRow_handleInput, _ApexFilterRow_handleKeydown, _ApexFilterRow_handleResetClick, _ApexFilterRow_openDropdownList, _ApexFilterRow_chipCriteriaFor, _ApexFilterRow_chipSelectFor, _ApexFilterRow_chipRemoveFor;\nimport { html, LitElement, nothing } from 'lit';\nimport { consume } from '@lit-labs/context';\nimport { property, query } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { gridStateContext } from '../controllers/state.js';\nimport { DEFAULT_COLUMN_CONFIG } from '../internal/constants.js';\nimport { GRID_FILTER_ROW_TAG } from '../internal/tags.js';\nimport { getFilterOperandsFor } from '../internal/utils.js';\nimport { registerComponent } from '../internal/register.js';\nimport { watch } from '../internal/watch.js';\nimport { styles } from '../styles/filter-row/filter-row-styles.css.js';\nimport { IgcInputComponent, IgcDropdownComponent } from 'igniteui-webcomponents';\nfunction prefixedIcon(icon) {\n  return html`<igc-icon\n    slot=\"prefix\"\n    name=${ifDefined(icon)}\n    collection=\"internal\"\n  ></igc-icon>`;\n}\nexport default class ApexFilterRow extends LitElement {\n  constructor() {\n    super(...arguments);\n    _ApexFilterRow_instances.add(this);\n    this.active = false;\n    this.column = DEFAULT_COLUMN_CONFIG;\n  }\n  static get is() {\n    return GRID_FILTER_ROW_TAG;\n  }\n  static register() {\n    registerComponent(this);\n  }\n  get isNumeric() {\n    return this.column.type === 'number';\n  }\n  get filterController() {\n    return this.state.filtering;\n  }\n  get condition() {\n    return this.expression.condition;\n  }\n  activeChanged() {\n    this.style.display = this.active ? 'flex' : '';\n    if (!this.active) {\n      this.column = DEFAULT_COLUMN_CONFIG;\n    }\n    this.state.host.requestUpdate();\n  }\n  renderCriteriaButton(expr, index) {\n    return index ? html`<igc-button\n          variant=\"flat\"\n          @click=${__classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_chipCriteriaFor).call(this, expr)}\n        >\n          ${expr.criteria}\n        </igc-button>` : nothing;\n  }\n  renderExpressionChip(props) {\n    const {\n      name,\n      unary\n    } = props.expression.condition;\n    const {\n      searchTerm: term\n    } = props.expression;\n    const prefix = html`<span slot=\"select\"></span>${prefixedIcon(name)}`;\n    return html`<igc-chip\n      selectable\n      removable\n      ?selected=${props.selected}\n      @igcRemove=${props.onRemove}\n      @igcSelect=${props.onSelect}\n    >\n      ${prefix}${unary ? name : term}\n    </igc-chip>`;\n  }\n  renderActiveChips() {\n    const state = this.filterController.get(this.column.key);\n    return !state ? nothing : Array.from(state).map((expression, idx) => {\n      const props = {\n        expression,\n        selected: this.expression === expression,\n        onRemove: __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_chipRemoveFor).call(this, expression),\n        onSelect: __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_chipSelectFor).call(this, expression)\n      };\n      return html`${this.renderCriteriaButton(expression, idx)}${this.renderExpressionChip(props)}`;\n    });\n  }\n  renderFilterActions() {\n    return html`\n      <igc-button\n        id=\"reset\"\n        variant=\"flat\"\n        @click=${__classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_handleResetClick)}\n      >\n        ${prefixedIcon('refresh')} Reset\n      </igc-button>\n      <igc-button\n        id=\"close\"\n        variant=\"flat\"\n        @click=${() => this.active = false}\n      >\n        ${prefixedIcon('close')} Close\n      </igc-button>\n    `;\n  }\n  renderDropdown() {\n    return html`<igc-dropdown\n      flip\n      same-width\n      @igcChange=${__classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_handleConditionChanged)}\n    >\n      ${Object.entries(getFilterOperandsFor(this.column)).map(([key, operand]) => {\n      var _a;\n      return html`\n          <igc-dropdown-item\n            .value=${key}\n            ?selected=${this.condition.name === key}\n          >\n            ${prefixedIcon(key)}${(_a = operand === null || operand === void 0 ? void 0 : operand.label) !== null && _a !== void 0 ? _a : key}\n          </igc-dropdown-item>\n        `;\n    })}\n    </igc-dropdown>`;\n  }\n  renderDropdownTarget() {\n    return html`<igc-icon\n      id=\"condition\"\n      slot=\"prefix\"\n      collection=\"internal\"\n      .name=${this.condition.name}\n      @click=${__classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_openDropdownList)}\n    >\n    </igc-icon>`;\n  }\n  renderInputArea() {\n    return html`<igc-input\n        outlined\n        value=${ifDefined(this.expression.searchTerm)}\n        placeholder=\"Add filter value\"\n        ?readonly=${this.condition.unary}\n        @igcInput=${__classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_handleInput)}\n        @keydown=${__classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_handleKeydown)}\n      >\n        ${this.renderDropdownTarget()}\n      </igc-input>\n      ${this.renderDropdown()}`;\n  }\n  renderActiveState() {\n    return html`<div part=\"active-state\">\n      <div part=\"filter-row-input\">${this.renderInputArea()}</div>\n      <div part=\"filter-row-filters\">${this.renderActiveChips()}</div>\n      <div part=\"filter-row-actions\">${this.renderFilterActions()}</div>\n    </div> `;\n  }\n  renderInactiveChips(column, state) {\n    return Array.from(state).map((expression, idx) => {\n      const props = {\n        expression,\n        selected: false,\n        onRemove: __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_chipRemoveFor).call(this, expression),\n        onSelect: e => {\n          e.stopPropagation();\n          this.column = column;\n          this.expression = expression;\n          __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_show).call(this);\n        }\n      };\n      return html`${this.renderCriteriaButton(expression, idx)}${this.renderExpressionChip(props)}`;\n    });\n  }\n  renderFilterState(column) {\n    const state = this.filterController.get(column.key);\n    const partial = state && state.length < 3;\n    const hidden = state && state.length >= 3;\n    const open = () => {\n      this.column = column;\n      __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_setDefaultExpression).call(this);\n      __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_show).call(this);\n    };\n    const count = hidden ? html`<span slot=\"suffix\">${state.length}</span>` : nothing;\n    const chip = html`<igc-chip\n      data-column=${column.key}\n      @click=${open}\n      >${prefixedIcon('filter')}Filter${count}</igc-chip\n    >`;\n    return partial ? this.renderInactiveChips(column, state) : chip;\n  }\n  renderInactiveState() {\n    return this.state.host.columns.map(column => column.hidden ? nothing : html`<div part=\"filter-row-preview\">\n            ${column.filter ? this.renderFilterState(column) : nothing}\n          </div>`);\n  }\n  render() {\n    return html`${this.active ? this.renderActiveState() : this.renderInactiveState()}`;\n  }\n}\n_ApexFilterRow_instances = new WeakSet(), _ApexFilterRow_setDefaultExpression = function _ApexFilterRow_setDefaultExpression() {\n  this.expression = this.filterController.getDefaultExpression(this.column);\n}, _ApexFilterRow_removeExpression = function _ApexFilterRow_removeExpression(expression) {\n  this.filterController.removeExpression(expression);\n}, _ApexFilterRow_show = async function _ApexFilterRow_show() {\n  var _a;\n  this.active = true;\n  await this.updateComplete;\n  (_a = this.input) === null || _a === void 0 ? void 0 : _a.select();\n}, _ApexFilterRow_handleConditionChanged = function _ApexFilterRow_handleConditionChanged(event) {\n  event.stopPropagation();\n  const key = event.detail.value;\n  // XXX: Types\n  this.expression.condition = getFilterOperandsFor(this.column)[key];\n  if (this.input.value || this.expression.condition.unary) {\n    this.filterController.filterWithEvent(this.expression, 'modify');\n  }\n  this.requestUpdate();\n}, _ApexFilterRow_handleInput = function _ApexFilterRow_handleInput(event) {\n  var _a;\n  event.stopPropagation();\n  const value = this.isNumeric ? parseFloat(event.detail) : event.detail;\n  const shouldUpdate = this.isNumeric ? !isNaN(value) : !!value;\n  const type = ((_a = this.filterController.get(this.expression.key)) === null || _a === void 0 ? void 0 : _a.has(this.expression)) ? 'modify' : 'add';\n  if (shouldUpdate) {\n    this.expression.searchTerm = value;\n    this.filterController.filterWithEvent(this.expression, type);\n  } else {\n    __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_removeExpression).call(this, this.expression);\n  }\n  this.requestUpdate();\n}, _ApexFilterRow_handleKeydown = function _ApexFilterRow_handleKeydown(event) {\n  event.stopPropagation();\n  switch (event.key) {\n    case 'Enter':\n      this.input.value = '';\n      __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_setDefaultExpression).call(this);\n      return;\n    case 'Escape':\n      this.active = false;\n      return;\n    default:\n      return;\n  }\n}, _ApexFilterRow_handleResetClick = function _ApexFilterRow_handleResetClick() {\n  this.filterController.removeAllExpressions(this.column.key);\n  this.requestUpdate();\n}, _ApexFilterRow_openDropdownList = function _ApexFilterRow_openDropdownList() {\n  this.dropdown.toggle(this.input);\n}, _ApexFilterRow_chipCriteriaFor = function _ApexFilterRow_chipCriteriaFor(expression) {\n  return async e => {\n    e.stopPropagation();\n    expression.criteria = expression.criteria === 'and' ? 'or' : 'and';\n    this.filterController.filterWithEvent(expression, 'modify');\n    this.requestUpdate();\n  };\n}, _ApexFilterRow_chipSelectFor = function _ApexFilterRow_chipSelectFor(expression) {\n  return async e => {\n    var _a;\n    e.stopPropagation();\n    this.expression = expression;\n    await this.updateComplete;\n    (_a = this.input) === null || _a === void 0 ? void 0 : _a.select();\n  };\n}, _ApexFilterRow_chipRemoveFor = function _ApexFilterRow_chipRemoveFor(expression) {\n  return async e => {\n    e.stopPropagation();\n    __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_removeExpression).call(this, expression);\n    if (this.active && this.expression === expression) {\n      __classPrivateFieldGet(this, _ApexFilterRow_instances, \"m\", _ApexFilterRow_setDefaultExpression).call(this);\n      await this.updateComplete;\n      this.input.focus();\n    }\n    this.requestUpdate();\n  };\n};\nApexFilterRow.styles = styles;\n__decorate([consume({\n  context: gridStateContext,\n  subscribe: true\n}), property({\n  attribute: false\n})], ApexFilterRow.prototype, \"state\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexFilterRow.prototype, \"active\", void 0);\n__decorate([query(IgcInputComponent.tagName)], ApexFilterRow.prototype, \"input\", void 0);\n__decorate([query('#condition')], ApexFilterRow.prototype, \"conditionElement\", void 0);\n__decorate([query(IgcDropdownComponent.tagName)], ApexFilterRow.prototype, \"dropdown\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexFilterRow.prototype, \"column\", void 0);\n__decorate([property({\n  attribute: false\n})], ApexFilterRow.prototype, \"expression\", void 0);\n__decorate([watch('active', {\n  waitUntilFirstUpdate: true\n})], ApexFilterRow.prototype, \"activeChanged\", null);","map":{"version":3,"names":["html","LitElement","nothing","consume","property","query","ifDefined","gridStateContext","DEFAULT_COLUMN_CONFIG","GRID_FILTER_ROW_TAG","getFilterOperandsFor","registerComponent","watch","styles","IgcInputComponent","IgcDropdownComponent","prefixedIcon","icon","ApexFilterRow","constructor","active","column","is","register","isNumeric","type","filterController","state","filtering","condition","expression","activeChanged","style","display","host","requestUpdate","renderCriteriaButton","expr","index","__classPrivateFieldGet","_ApexFilterRow_instances","_ApexFilterRow_chipCriteriaFor","call","criteria","renderExpressionChip","props","name","unary","searchTerm","term","prefix","selected","onRemove","onSelect","renderActiveChips","get","key","Array","from","map","idx","_ApexFilterRow_chipRemoveFor","_ApexFilterRow_chipSelectFor","renderFilterActions","_ApexFilterRow_handleResetClick","renderDropdown","_ApexFilterRow_handleConditionChanged","Object","entries","operand","_a","label","renderDropdownTarget","_ApexFilterRow_openDropdownList","renderInputArea","_ApexFilterRow_handleInput","_ApexFilterRow_handleKeydown","renderActiveState","renderInactiveChips","e","stopPropagation","_ApexFilterRow_show","renderFilterState","partial","length","hidden","open","_ApexFilterRow_setDefaultExpression","count","chip","renderInactiveState","columns","filter","render","getDefaultExpression","_ApexFilterRow_removeExpression","removeExpression","updateComplete","input","select","event","detail","value","filterWithEvent","parseFloat","shouldUpdate","isNaN","has","removeAllExpressions","dropdown","toggle","focus","__decorate","context","subscribe","attribute","tagName","waitUntilFirstUpdate"],"sources":["../../../src/components/filter-row.ts"],"sourcesContent":["import { html, LitElement, nothing } from 'lit';\nimport { consume } from '@lit-labs/context';\nimport { property, query } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { StateController, gridStateContext } from '../controllers/state.js';\nimport { DEFAULT_COLUMN_CONFIG } from '../internal/constants.js';\nimport { GRID_FILTER_ROW_TAG } from '../internal/tags.js';\nimport { getFilterOperandsFor } from '../internal/utils.js';\nimport { registerComponent } from '../internal/register.js';\nimport { watch } from '../internal/watch.js';\n\nimport { styles } from '../styles/filter-row/filter-row-styles.css.js';\n\nimport type { FilterExpressionTree } from '../operations/filter/tree.js';\nimport type { FilterExpression, FilterOperation, OperandKeys } from '../operations/filter/types.js';\nimport type { ColumnConfiguration } from '../internal/types.js';\nimport {\n  IgcInputComponent,\n  IgcDropdownComponent,\n  IgcDropdownItemComponent,\n  IgcIconComponent,\n} from 'igniteui-webcomponents';\n\ntype ExpressionChipProps<T> = {\n  expression: FilterExpression<T>;\n  selected: boolean;\n  onRemove: Function;\n  onSelect: Function;\n};\n\nfunction prefixedIcon(icon?: string) {\n  return html`<igc-icon\n    slot=\"prefix\"\n    name=${ifDefined(icon)}\n    collection=\"internal\"\n  ></igc-icon>`;\n}\n\nexport default class ApexFilterRow<T extends object> extends LitElement {\n  public static get is() {\n    return GRID_FILTER_ROW_TAG;\n  }\n\n  public static override styles = styles;\n\n  public static register() {\n    registerComponent(this);\n  }\n\n  @consume({ context: gridStateContext, subscribe: true })\n  @property({ attribute: false })\n  public state!: StateController<T>;\n\n  protected get isNumeric() {\n    return this.column.type === 'number';\n  }\n\n  protected get filterController() {\n    return this.state.filtering;\n  }\n\n  protected get condition() {\n    return this.expression.condition as FilterOperation<T>;\n  }\n\n  @property({ attribute: false })\n  public active = false;\n\n  @query(IgcInputComponent.tagName)\n  public input!: IgcInputComponent;\n\n  @query('#condition')\n  public conditionElement!: IgcIconComponent;\n\n  @query(IgcDropdownComponent.tagName)\n  public dropdown!: IgcDropdownComponent;\n\n  @property({ attribute: false })\n  public column: ColumnConfiguration<T> = DEFAULT_COLUMN_CONFIG as ColumnConfiguration<T>;\n\n  @property({ attribute: false })\n  public expression!: FilterExpression<T>;\n\n  #setDefaultExpression() {\n    this.expression = this.filterController.getDefaultExpression(this.column);\n  }\n\n  #removeExpression(expression: FilterExpression<T>) {\n    this.filterController.removeExpression(expression);\n  }\n\n  async #show() {\n    this.active = true;\n\n    await this.updateComplete;\n    this.input?.select();\n  }\n\n  #handleConditionChanged(event: CustomEvent<IgcDropdownItemComponent>) {\n    event.stopPropagation();\n    const key = event.detail.value as OperandKeys<T[typeof this.column.key]>;\n\n    // XXX: Types\n    this.expression.condition = (getFilterOperandsFor(this.column) as any)[key] as FilterOperation<\n      T[keyof T]\n    >;\n\n    if (this.input.value || this.expression.condition.unary) {\n      this.filterController.filterWithEvent(this.expression, 'modify');\n    }\n\n    this.requestUpdate();\n  }\n\n  #handleInput(event: CustomEvent<string>) {\n    event.stopPropagation();\n\n    const value = this.isNumeric ? parseFloat(event.detail) : event.detail;\n    const shouldUpdate = this.isNumeric ? !isNaN(value as number) : !!value;\n    const type = this.filterController.get(this.expression.key)?.has(this.expression)\n      ? 'modify'\n      : 'add';\n\n    if (shouldUpdate) {\n      this.expression.searchTerm = value as any;\n\n      this.filterController.filterWithEvent(this.expression, type);\n    } else {\n      this.#removeExpression(this.expression);\n    }\n\n    this.requestUpdate();\n  }\n\n  #handleKeydown(event: KeyboardEvent) {\n    event.stopPropagation();\n\n    switch (event.key) {\n      case 'Enter':\n        this.input.value = '';\n        this.#setDefaultExpression();\n        return;\n      case 'Escape':\n        this.active = false;\n        return;\n      default:\n        return;\n    }\n  }\n\n  #handleResetClick() {\n    this.filterController.removeAllExpressions(this.column.key);\n    this.requestUpdate();\n  }\n\n  #openDropdownList() {\n    this.dropdown.toggle(this.input);\n  }\n\n  @watch('active', { waitUntilFirstUpdate: true })\n  protected activeChanged() {\n    this.style.display = this.active ? 'flex' : '';\n\n    if (!this.active) {\n      this.column = DEFAULT_COLUMN_CONFIG as ColumnConfiguration<T>;\n    }\n\n    this.state.host.requestUpdate();\n  }\n\n  #chipCriteriaFor(expression: FilterExpression<T>) {\n    return async (e: Event) => {\n      e.stopPropagation();\n\n      expression.criteria = expression.criteria === 'and' ? 'or' : 'and';\n      this.filterController.filterWithEvent(expression, 'modify');\n      this.requestUpdate();\n    };\n  }\n\n  #chipSelectFor(expression: FilterExpression<T>) {\n    return async (e: Event) => {\n      e.stopPropagation();\n      this.expression = expression;\n      await this.updateComplete;\n      this.input?.select();\n    };\n  }\n\n  #chipRemoveFor(expression: FilterExpression<T>) {\n    return async (e: Event) => {\n      e.stopPropagation();\n      this.#removeExpression(expression);\n\n      if (this.active && this.expression === expression) {\n        this.#setDefaultExpression();\n        await this.updateComplete;\n        this.input.focus();\n      }\n\n      this.requestUpdate();\n    };\n  }\n\n  protected renderCriteriaButton(expr: FilterExpression<T>, index: number) {\n    return index\n      ? html`<igc-button\n          variant=\"flat\"\n          @click=${this.#chipCriteriaFor(expr)}\n        >\n          ${expr.criteria}\n        </igc-button>`\n      : nothing;\n  }\n\n  protected renderExpressionChip(props: ExpressionChipProps<T>) {\n    const { name, unary } = props.expression.condition as FilterOperation<T>;\n    const { searchTerm: term } = props.expression;\n\n    const prefix = html`<span slot=\"select\"></span>${prefixedIcon(name)}`;\n\n    return html`<igc-chip\n      selectable\n      removable\n      ?selected=${props.selected}\n      @igcRemove=${props.onRemove}\n      @igcSelect=${props.onSelect}\n    >\n      ${prefix}${unary ? name : term}\n    </igc-chip>`;\n  }\n\n  protected renderActiveChips() {\n    const state = this.filterController.get(this.column.key);\n\n    return !state\n      ? nothing\n      : Array.from(state).map((expression, idx) => {\n          const props: ExpressionChipProps<T> = {\n            expression,\n            selected: this.expression === expression,\n            onRemove: this.#chipRemoveFor(expression),\n            onSelect: this.#chipSelectFor(expression),\n          };\n\n          return html`${this.renderCriteriaButton(expression, idx)}${this.renderExpressionChip(\n            props,\n          )}`;\n        });\n  }\n\n  protected renderFilterActions() {\n    return html`\n      <igc-button\n        id=\"reset\"\n        variant=\"flat\"\n        @click=${this.#handleResetClick}\n      >\n        ${prefixedIcon('refresh')} Reset\n      </igc-button>\n      <igc-button\n        id=\"close\"\n        variant=\"flat\"\n        @click=${() => (this.active = false)}\n      >\n        ${prefixedIcon('close')} Close\n      </igc-button>\n    `;\n  }\n\n  protected renderDropdown() {\n    return html`<igc-dropdown\n      flip\n      same-width\n      @igcChange=${this.#handleConditionChanged}\n    >\n      ${Object.entries(getFilterOperandsFor(this.column)).map(\n        ([key, operand]) => html`\n          <igc-dropdown-item\n            .value=${key}\n            ?selected=${this.condition.name === key}\n          >\n            ${prefixedIcon(key)}${operand?.label ?? key}\n          </igc-dropdown-item>\n        `,\n      )}\n    </igc-dropdown>`;\n  }\n\n  protected renderDropdownTarget() {\n    return html`<igc-icon\n      id=\"condition\"\n      slot=\"prefix\"\n      collection=\"internal\"\n      .name=${this.condition.name}\n      @click=${this.#openDropdownList}\n    >\n    </igc-icon>`;\n  }\n\n  protected renderInputArea() {\n    return html`<igc-input\n        outlined\n        value=${ifDefined(this.expression.searchTerm)}\n        placeholder=\"Add filter value\"\n        ?readonly=${this.condition.unary}\n        @igcInput=${this.#handleInput}\n        @keydown=${this.#handleKeydown}\n      >\n        ${this.renderDropdownTarget()}\n      </igc-input>\n      ${this.renderDropdown()}`;\n  }\n\n  protected renderActiveState() {\n    return html`<div part=\"active-state\">\n      <div part=\"filter-row-input\">${this.renderInputArea()}</div>\n      <div part=\"filter-row-filters\">${this.renderActiveChips()}</div>\n      <div part=\"filter-row-actions\">${this.renderFilterActions()}</div>\n    </div> `;\n  }\n\n  protected renderInactiveChips(column: ColumnConfiguration<T>, state: FilterExpressionTree<T>) {\n    return Array.from(state).map((expression, idx) => {\n      const props: ExpressionChipProps<T> = {\n        expression,\n        selected: false,\n        onRemove: this.#chipRemoveFor(expression),\n        onSelect: (e: Event) => {\n          e.stopPropagation();\n          this.column = column;\n          this.expression = expression;\n          this.#show();\n        },\n      };\n\n      return html`${this.renderCriteriaButton(expression, idx)}${this.renderExpressionChip(props)}`;\n    });\n  }\n\n  protected renderFilterState(column: ColumnConfiguration<T>) {\n    const state = this.filterController.get(column.key);\n\n    const partial = state && state.length < 3;\n    const hidden = state && state.length >= 3;\n\n    const open = () => {\n      this.column = column;\n      this.#setDefaultExpression();\n      this.#show();\n    };\n\n    const count = hidden ? html`<span slot=\"suffix\">${state.length}</span>` : nothing;\n    const chip = html`<igc-chip\n      data-column=${column.key}\n      @click=${open}\n      >${prefixedIcon('filter')}Filter${count}</igc-chip\n    >`;\n\n    return partial ? this.renderInactiveChips(column, state) : chip;\n  }\n\n  protected renderInactiveState() {\n    return this.state.host.columns.map(column =>\n      column.hidden\n        ? nothing\n        : html`<div part=\"filter-row-preview\">\n            ${column.filter ? this.renderFilterState(column) : nothing}\n          </div>`,\n    );\n  }\n\n  protected override render() {\n    return html`${this.active ? this.renderActiveState() : this.renderInactiveState()}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    [ApexFilterRow.is]: ApexFilterRow<object>;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}