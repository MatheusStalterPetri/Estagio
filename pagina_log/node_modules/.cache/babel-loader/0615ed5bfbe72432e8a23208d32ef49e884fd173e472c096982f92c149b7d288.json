{"ast":null,"code":"export function EventEmitterMixin(superClass) {\n  class EventEmitterElement extends superClass {\n    addEventListener(type, listener, options) {\n      super.addEventListener(type, listener, options);\n    }\n    removeEventListener(type, listener, options) {\n      super.removeEventListener(type, listener, options);\n    }\n    emitEvent(type, eventInitDict) {\n      return this.dispatchEvent(new CustomEvent(type, Object.assign({\n        bubbles: true,\n        cancelable: false,\n        composed: true,\n        detail: {}\n      }, eventInitDict)));\n    }\n  }\n  return EventEmitterElement;\n}","map":{"version":3,"names":["EventEmitterMixin","superClass","EventEmitterElement","addEventListener","type","listener","options","removeEventListener","emitEvent","eventInitDict","dispatchEvent","CustomEvent","Object","assign","bubbles","cancelable","composed","detail"],"sources":["../../../../src/components/common/mixins/event-emitter.ts"],"sourcesContent":["import { LitElement } from 'lit';\nimport type { AbstractConstructor, Constructor } from './constructor';\n\nexport type UnpackCustomEvent<T> = T extends CustomEvent<infer U> ? U : never;\n\nexport declare class EventEmitterInterface<E> {\n  public addEventListener<K extends keyof M, M extends E & HTMLElementEventMap>(\n    type: K,\n    listener: (this: HTMLElement, ev: M[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  public addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  public removeEventListener<\n    K extends keyof M,\n    M extends E & HTMLElementEventMap\n  >(\n    type: K,\n    listener: (this: HTMLElement, ev: M[K]) => any,\n    options?: boolean | EventListenerOptions\n  ): void;\n  public removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void;\n  public emitEvent<K extends keyof E, D extends UnpackCustomEvent<E[K]>>(\n    type: K,\n    eventInitDict?: CustomEventInit<D>\n  ): boolean;\n}\n\nexport function EventEmitterMixin<E, T extends AbstractConstructor<LitElement>>(\n  superClass: T\n): AbstractConstructor<EventEmitterInterface<E>> & T;\nexport function EventEmitterMixin<E, T extends Constructor<LitElement>>(\n  superClass: T\n) {\n  class EventEmitterElement extends superClass {\n    /**\n     * @private\n     */\n    public override addEventListener<\n      K extends keyof M,\n      M extends E & HTMLElementEventMap\n    >(\n      type: K,\n      listener: (this: HTMLElement, ev: M[K]) => any,\n      options?: boolean | AddEventListenerOptions\n    ): void;\n    public override addEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions\n    ): void {\n      super.addEventListener(type, listener, options);\n    }\n\n    /**\n     * @private\n     */\n    public override removeEventListener<\n      K extends keyof M,\n      M extends E & HTMLElementEventMap\n    >(\n      type: K,\n      listener: (this: HTMLElement, ev: M[K]) => any,\n      options?: boolean | EventListenerOptions\n    ): void;\n    public override removeEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions\n    ): void {\n      super.removeEventListener(type, listener, options);\n    }\n\n    /**\n     * @private\n     */\n    public emitEvent<K extends keyof E, D extends UnpackCustomEvent<E[K]>>(\n      type: K,\n      eventInitDict?: CustomEventInit<D>\n    ): boolean {\n      return this.dispatchEvent(\n        new CustomEvent<D>(\n          type as string,\n          Object.assign(\n            {\n              bubbles: true,\n              cancelable: false,\n              composed: true,\n              detail: {},\n            },\n            eventInitDict\n          )\n        )\n      );\n    }\n  }\n  return EventEmitterElement as Constructor<EventEmitterInterface<E>> & T;\n}\n"],"mappings":"AAsCA,OAAM,SAAUA,iBAAiBA,CAC/BC,UAAa;EAEb,MAAMC,mBAAoB,SAAQD,UAAU;IAY1BE,gBAAgBA,CAC9BC,IAAY,EACZC,QAA4C,EAC5CC,OAA2C;MAE3C,KAAK,CAACH,gBAAgB,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;IACjD;IAagBC,mBAAmBA,CACjCH,IAAY,EACZC,QAA4C,EAC5CC,OAAwC;MAExC,KAAK,CAACC,mBAAmB,CAACH,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;IACpD;IAKOE,SAASA,CACdJ,IAAO,EACPK,aAAkC;MAElC,OAAO,IAAI,CAACC,aAAa,CACvB,IAAIC,WAAW,CACbP,IAAc,EACdQ,MAAM,CAACC,MAAM,CACX;QACEC,OAAO,EAAE,IAAI;QACbC,UAAU,EAAE,KAAK;QACjBC,QAAQ,EAAE,IAAI;QACdC,MAAM,EAAE;OACT,EACDR,aAAa,CACd,CACF,CACF;IACH;;EAEF,OAAOP,mBAAgE;AACzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}