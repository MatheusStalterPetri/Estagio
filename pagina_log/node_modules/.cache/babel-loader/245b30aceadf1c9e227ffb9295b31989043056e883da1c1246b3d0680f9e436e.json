{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3cfd3a3f\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Squid Web Cache Log Viewer\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_apex_grid = _resolveComponent(\"apex-grid\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"input\", {\n    type: \"file\",\n    ref: \"fileInput\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $setup.handleFileInputChange && $setup.handleFileInputChange(...args)),\n    accept: \".log\"\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), _createVNode(_component_apex_grid, {\n    columns: $setup.columns,\n    data: $setup.data\n  }, null, 8 /* PROPS */, [\"columns\", \"data\"])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","type","ref","onChange","_cache","args","$setup","handleFileInputChange","accept","_createVNode","_component_apex_grid","columns","data"],"sources":["C:\\Users\\mthss\\Documentos\\Projeto_estagio\\pagina_log\\src\\views\\LogView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Squid Web Cache Log Viewer</h1>\r\n    <input type=\"file\" ref=\"fileInput\" @change=\"handleFileInputChange\" accept=\".log\">\r\n    <apex-grid :columns=\"columns\" :data=\"data\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport '/node_modules/apex-grid/dist/apex-grid.min.css';\r\nimport ApexGrid from 'apex-grid';\r\n\r\nexport default {\r\n  name: 'LogView',\r\n  components: { ApexGrid },\r\n  setup() {\r\n    const columns = [\r\n      { name: 'date', label: 'Date', type: 'date', format: 'dd/MM/yyyy HH:mm:ss' },\r\n      { name: 'action', label: 'Action' },\r\n      { name: 'url', label: 'URL' },\r\n      { name: 'ip', label: 'IP Address' },\r\n      { name: 'user', label: 'User' },\r\n    ];\r\n    const data = ref([]);\r\n\r\n    const handleFileInputChange = (event) => {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n          const lines = reader.result.split('\\n');\r\n          const logData = [];\r\n          lines.forEach((line) => {\r\n            const [date, action, url, ip, user] = line.trim().split(' ');\r\n            logData.push({\r\n              date: new Date(date + ' UTC'),\r\n              action,\r\n              url,\r\n              ip,\r\n              user,\r\n            });\r\n          });\r\n          data.value = logData;\r\n        };\r\n        reader.readAsText(file);\r\n      }\r\n    };\r\n\r\n    return { columns, data, handleFileInputChange };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  text-align: center;\r\n}\r\n</style>\r\n"],"mappings":";;gEAEIA,mBAAA,CAAmC,YAA/B,4BAA0B;;;;uBADhCC,mBAAA,CAIM,cAHJC,UAAmC,EACnCF,mBAAA,CAAiF;IAA1EG,IAAI,EAAC,MAAM;IAACC,GAAG,EAAC,WAAW;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,qBAAA,IAAAD,MAAA,CAAAC,qBAAA,IAAAF,IAAA,CAAqB;IAAEG,MAAM,EAAC;kDAC1EC,YAAA,CAA6CC,oBAAA;IAAjCC,OAAO,EAAEL,MAAA,CAAAK,OAAO;IAAGC,IAAI,EAAEN,MAAA,CAAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}