{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_apex_grid = _resolveComponent(\"apex-grid\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_apex_grid, {\n    columns: $data.columns,\n    data: $data.logData\n  }, null, 8 /* PROPS */, [\"columns\", \"data\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_apex_grid","columns","$data","data","logData"],"sources":["C:\\Users\\mthss\\Documentos\\Projeto_estagio\\pagina_log\\src\\views\\LogView.vue"],"sourcesContent":["<style>\r\n#customers {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n\r\n#customers td, #customers th {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n}\r\n\r\n#customers tr:nth-child(even){background-color: #f2f2f2;}\r\n\r\n#customers tr:hover {background-color: #ddd;}\r\n\r\n#customers th {\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  text-align: left;\r\n  background-color: #04AA6D;\r\n  color: white;\r\n}\r\n</style>\r\n\r\n<!--\r\n<div style=\"overflow-x:auto;\">\r\n<table id=\"customers\">\r\n-->\r\n\r\n<template>\r\n  <div>\r\n    <apex-grid :columns=\"columns\" :data=\"logData\"></apex-grid>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ApexGrid from 'apex-grid';\r\nimport 'apex-grid/dist/apex-grid.min.css';\r\n\r\nexport default {\r\n  components: {\r\n    ApexGrid,\r\n  },\r\n  data() {\r\n    return {\r\n      columns: [\r\n        { field: 'time', header: 'Timestamp' },\r\n        { field: 'client', header: 'Client IP' },\r\n        { field: 'method', header: 'Method' },\r\n        { field: 'url', header: 'URL' },\r\n        { field: 'status', header: 'Status' },\r\n        { field: 'size', header: 'Size' },\r\n      ],\r\n      logData: [],\r\n    };\r\n  },\r\n  methods: {\r\n    async loadLogData() {\r\n      const response = await fetch('/logs/access.log');\r\n      const logText = await response.text();\r\n      const logLines = logText.split('\\n');\r\n      const logData = logLines.map((line) => {\r\n        const [time, client, method, url, status, size] = line.split(' ');\r\n        return { time, client, method, url, status, size };\r\n      });\r\n      this.logData = logData;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.loadLogData();\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;;uBA+BEA,mBAAA,CAEM,cADJC,YAAA,CAA0DC,oBAAA;IAA9CC,OAAO,EAAEC,KAAA,CAAAD,OAAO;IAAGE,IAAI,EAAED,KAAA,CAAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}