{"ast":null,"code":"import { VueApexCharts } from 'vue3-apexcharts';\nimport moment from 'moment';\nexport default {\n  components: {\n    ApexChart: VueApexCharts\n  },\n  data() {\n    return {\n      logs: [],\n      chartOptions: {\n        chart: {\n          id: 'log-chart',\n          height: 300,\n          type: 'line'\n        },\n        xaxis: {\n          type: 'datetime',\n          categories: []\n        },\n        yaxis: {\n          title: {\n            text: 'Log Entries'\n          }\n        }\n      },\n      chartSeries: [{\n        name: 'Entries',\n        data: []\n      }]\n    };\n  },\n  methods: {\n    handleFileSelect(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        const logs = reader.result.split('\\n').map(log => {\n          const [timeElapsed, responseTime, enderecoDoCliente, codeStatus, bytes, methodUrl, uri, type] = log.replace(/\\s+/g, ' ').trim().split(' ');\n\n          // Formatação da data/hora em formato legível por humanos usando moment.js\n          const formattedTime = moment.unix(timeElapsed).format('YYYY-MM-DD HH:mm:ss');\n          return {\n            timeElapsed: formattedTime,\n            responseTime,\n            enderecoDoCliente,\n            codeStatus,\n            bytes,\n            methodUrl,\n            uri,\n            type\n          };\n        });\n        this.logs = logs;\n\n        // Populando o gráfico\n        const categories = logs.map(log => log.timeElapsed);\n        const data = logs.map(log => log.bytes);\n        this.chartOptions.xaxis.categories = categories;\n        this.chartSeries[0].data = data;\n      };\n      reader.readAsText(file);\n    }\n  }\n};","map":{"version":3,"names":["VueApexCharts","moment","components","ApexChart","data","logs","chartOptions","chart","id","height","type","xaxis","categories","yaxis","title","text","chartSeries","name","methods","handleFileSelect","event","file","target","files","reader","FileReader","onload","result","split","map","log","timeElapsed","responseTime","enderecoDoCliente","codeStatus","bytes","methodUrl","uri","replace","trim","formattedTime","unix","format","readAsText"],"sources":["C:\\Users\\mthss\\Documentos\\Projeto_estagio\\pagina_log\\src\\views\\LogView.vue"],"sourcesContent":["<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n\r\n<template>\r\n  <div>\r\n    <h1>Log Viewer</h1>\r\n    <input type=\"file\" @change=\"handleFileSelect($event)\">\r\n    <table class=\"table table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th>Time Elapsed</th>\r\n          <th>Tempo De Resposta</th>\r\n          <th>Endereco Do Cliente</th>\r\n          <th>Códigos de resultado/status</th>\r\n          <th>Tamanho da transferência</th>\r\n          <th>Método de solicitação</th>\r\n          <th>URL</th>\r\n          <th>Tipo de conteúdo</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(log, index) in logs\" :key=\"index\">\r\n          <td>{{ log.timeElapsed }}</td>\r\n          <td>{{ log.tempoDeResposta }}</td>\r\n          <td>{{ log.enderecoDoCliente }}</td>\r\n          <td>{{ log.codeStatus }}</td>\r\n          <td>{{ log.bytes }}</td>\r\n          <td>{{ log.methodUrl }}</td>\r\n          <td>{{ log.uri }}</td>\r\n          <td>{{ log.type }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <apex-chart type=\"line\" :options=\"chartOptions\" :series=\"chartSeries\"></apex-chart>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { VueApexCharts } from 'vue3-apexcharts';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n  components: {\r\n    ApexChart: VueApexCharts,\r\n  },\r\n  data() {\r\n    return {\r\n      logs: [],\r\n      chartOptions: {\r\n        chart: {\r\n          id: 'log-chart',\r\n          height: 300,\r\n          type: 'line',\r\n        },\r\n        xaxis: {\r\n          type: 'datetime',\r\n          categories: [],\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Log Entries',\r\n          },\r\n        },\r\n      },\r\n      chartSeries: [{\r\n        name: 'Entries',\r\n        data: [],\r\n      }],\r\n    };\r\n  },\r\n  methods: {\r\n    handleFileSelect(event) {\r\n      const file = event.target.files[0];\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = () => {\r\n        const logs = reader.result.split('\\n').map((log) => {\r\n          const [timeElapsed, responseTime, enderecoDoCliente, codeStatus, bytes, methodUrl, uri, type] = log.replace(/\\s+/g, ' ').trim().split(' ');\r\n\r\n          // Formatação da data/hora em formato legível por humanos usando moment.js\r\n          const formattedTime = moment.unix(timeElapsed).format('YYYY-MM-DD HH:mm:ss');\r\n\r\n          return { timeElapsed: formattedTime, responseTime, enderecoDoCliente, codeStatus, bytes, methodUrl, uri, type };\r\n        });\r\n\r\n        this.logs = logs;\r\n\r\n        // Populando o gráfico\r\n        const categories = logs.map((log) => log.timeElapsed);\r\n        const data = logs.map((log) => log.bytes);\r\n        this.chartOptions.xaxis.categories = categories;\r\n        this.chartSeries[0].data = data;\r\n      };\r\n\r\n      reader.readAsText(file);\r\n    },\r\n\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AAqCA,SAASA,aAAY,QAAS,iBAAiB;AAC/C,OAAOC,MAAK,MAAO,QAAQ;AAE3B,eAAe;EACbC,UAAU,EAAE;IACVC,SAAS,EAAEH;EACb,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,YAAY,EAAE;QACZC,KAAK,EAAE;UACLC,EAAE,EAAE,WAAW;UACfC,MAAM,EAAE,GAAG;UACXC,IAAI,EAAE;QACR,CAAC;QACDC,KAAK,EAAE;UACLD,IAAI,EAAE,UAAU;UAChBE,UAAU,EAAE;QACd,CAAC;QACDC,KAAK,EAAE;UACLC,KAAK,EAAE;YACLC,IAAI,EAAE;UACR;QACF;MACF,CAAC;MACDC,WAAW,EAAE,CAAC;QACZC,IAAI,EAAE,SAAS;QACfb,IAAI,EAAE;MACR,CAAC;IACH,CAAC;EACH,CAAC;EACDc,OAAO,EAAE;IACPC,gBAAgBA,CAACC,KAAK,EAAE;MACtB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,MAAMC,MAAK,GAAI,IAAIC,UAAU,EAAE;MAE/BD,MAAM,CAACE,MAAK,GAAI,MAAM;QACpB,MAAMrB,IAAG,GAAImB,MAAM,CAACG,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAK;UAClD,MAAM,CAACC,WAAW,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,KAAK,EAAEC,SAAS,EAAEC,GAAG,EAAE3B,IAAI,IAAIoB,GAAG,CAACQ,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACC,IAAI,EAAE,CAACX,KAAK,CAAC,GAAG,CAAC;;UAE1I;UACA,MAAMY,aAAY,GAAIvC,MAAM,CAACwC,IAAI,CAACV,WAAW,CAAC,CAACW,MAAM,CAAC,qBAAqB,CAAC;UAE5E,OAAO;YAAEX,WAAW,EAAES,aAAa;YAAER,YAAY;YAAEC,iBAAiB;YAAEC,UAAU;YAAEC,KAAK;YAAEC,SAAS;YAAEC,GAAG;YAAE3B;UAAK,CAAC;QACjH,CAAC,CAAC;QAEF,IAAI,CAACL,IAAG,GAAIA,IAAI;;QAEhB;QACA,MAAMO,UAAS,GAAIP,IAAI,CAACwB,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,CAAC;QACrD,MAAM3B,IAAG,GAAIC,IAAI,CAACwB,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACK,KAAK,CAAC;QACzC,IAAI,CAAC7B,YAAY,CAACK,KAAK,CAACC,UAAS,GAAIA,UAAU;QAC/C,IAAI,CAACI,WAAW,CAAC,CAAC,CAAC,CAACZ,IAAG,GAAIA,IAAI;MACjC,CAAC;MAEDoB,MAAM,CAACmB,UAAU,CAACtB,IAAI,CAAC;IACzB;EAEF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}