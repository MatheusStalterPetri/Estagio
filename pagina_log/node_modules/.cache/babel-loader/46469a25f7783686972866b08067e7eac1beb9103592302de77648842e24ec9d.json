{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"IP\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Data e hora\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Requisição\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Código HTTP\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Bytes enviados\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"URL\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"table\", null, [_hoisted_1, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.logEntries, entry => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: entry.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(entry.ip), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(entry.timestamp), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(entry.request), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(entry.httpCode), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(entry.bytesSent), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(entry.url), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","logEntries","entry","key","id","_toDisplayString","ip","timestamp","request","httpCode","bytesSent","url"],"sources":["C:\\Users\\mthss\\Documentos\\Projeto_estagio\\pagina_log\\src\\views\\LogView.vue"],"sourcesContent":["<template>\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>IP</th>\r\n        <th>Data e hora</th>\r\n        <th>Requisição</th>\r\n        <th>Código HTTP</th>\r\n        <th>Bytes enviados</th>\r\n        <th>URL</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr v-for=\"entry in logEntries\" :key=\"entry.id\">\r\n        <td>{{ entry.ip }}</td>\r\n        <td>{{ entry.timestamp }}</td>\r\n        <td>{{ entry.request }}</td>\r\n        <td>{{ entry.httpCode }}</td>\r\n        <td>{{ entry.bytesSent }}</td>\r\n        <td>{{ entry.url }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'LogView',\r\n  data() {\r\n    return {\r\n      logEntries: [],\r\n    };\r\n  },\r\n  created() {\r\n    this.loadLogEntries();\r\n  },\r\n  methods: {\r\n    async loadLogEntries() {\r\n      const response = await fetch('/logs/access.log');\r\n      const text = await response.text();\r\n      const lines = text.split('\\n').filter((line) => !!line.trim());\r\n\r\n      this.logEntries = lines.map((line, index) => {\r\n        const [timestamp, ip, bytesSent, httpCode, request, url] = line.split(/\\s+/);\r\n\r\n        return {\r\n          id: index,\r\n          timestamp: new Date(timestamp).toLocaleString(),\r\n          ip,\r\n          bytesSent,\r\n          httpCode,\r\n          request,\r\n          url,\r\n        };\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";gCAEIA,mBAAA,CASQ,gB,aARNA,mBAAA,CAOK,a,aANHA,mBAAA,CAAW,YAAP,IAAE,G,aACNA,mBAAA,CAAoB,YAAhB,aAAW,G,aACfA,mBAAA,CAAmB,YAAf,YAAU,G,aACdA,mBAAA,CAAoB,YAAhB,aAAW,G,aACfA,mBAAA,CAAuB,YAAnB,gBAAc,G,aAClBA,mBAAA,CAAY,YAAR,KAAG,E;;;uBARbC,mBAAA,CAqBQ,gBApBNC,UASQ,EACRF,mBAAA,CASQ,iB,kBARNC,mBAAA,CAOKE,SAAA,QAAAC,WAAA,CAPeC,KAAA,CAAAC,UAAU,EAAnBC,KAAK;yBAAhBN,mBAAA,CAOK;MAP4BO,GAAG,EAAED,KAAK,CAACE;QAC1CT,mBAAA,CAAuB,YAAAU,gBAAA,CAAhBH,KAAK,CAACI,EAAE,kBACfX,mBAAA,CAA8B,YAAAU,gBAAA,CAAvBH,KAAK,CAACK,SAAS,kBACtBZ,mBAAA,CAA4B,YAAAU,gBAAA,CAArBH,KAAK,CAACM,OAAO,kBACpBb,mBAAA,CAA6B,YAAAU,gBAAA,CAAtBH,KAAK,CAACO,QAAQ,kBACrBd,mBAAA,CAA8B,YAAAU,gBAAA,CAAvBH,KAAK,CAACQ,SAAS,kBACtBf,mBAAA,CAAwB,YAAAU,gBAAA,CAAjBH,KAAK,CAACS,GAAG,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}