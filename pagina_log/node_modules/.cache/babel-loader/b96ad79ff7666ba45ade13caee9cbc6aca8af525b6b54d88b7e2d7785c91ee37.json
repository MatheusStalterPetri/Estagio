{"ast":null,"code":"import { adoptStyles, css } from 'lit';\nimport { getTheme } from './config.js';\nimport { CHANGE_THEME_EVENT } from './theming-event.js';\nclass ThemingController {\n  constructor(host, themes) {\n    this.__themingEventHandler = () => {\n      this.adoptStyles();\n      this.host.requestUpdate();\n    };\n    this.host = host;\n    this.themes = themes;\n  }\n  hostConnected() {\n    this.adoptStyles();\n    window.addEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);\n  }\n  hostDisconnected() {\n    window.removeEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);\n  }\n  adoptStyles() {\n    this.theme = getTheme();\n    const ctor = this.host.constructor;\n    const supportsAdoptingStyleSheets = window.ShadowRoot && 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;\n    let styleSheet = css``;\n    const [theme] = Object.entries(this.themes).filter(([name]) => name === this.theme);\n    if (theme) {\n      const [_, cssResult] = theme;\n      styleSheet = cssResult;\n    }\n    if (!supportsAdoptingStyleSheets) {\n      [...this.host.renderRoot.querySelectorAll('style')].slice(1).forEach(tag => tag.remove());\n    }\n    adoptStyles(this.host.shadowRoot, [...ctor.elementStyles, styleSheet]);\n  }\n}\nconst _updateWhenThemeChanges = (host, themes) => {\n  const controller = new ThemingController(host, themes);\n  host.addController(controller);\n  return controller;\n};\nexport const updateWhenThemeChanges = _updateWhenThemeChanges;","map":{"version":3,"names":["adoptStyles","css","getTheme","CHANGE_THEME_EVENT","ThemingController","constructor","host","themes","__themingEventHandler","requestUpdate","hostConnected","window","addEventListener","hostDisconnected","removeEventListener","theme","ctor","supportsAdoptingStyleSheets","ShadowRoot","Document","prototype","CSSStyleSheet","styleSheet","Object","entries","filter","name","_","cssResult","renderRoot","querySelectorAll","slice","forEach","tag","remove","shadowRoot","elementStyles","_updateWhenThemeChanges","controller","addController","updateWhenThemeChanges"],"sources":["../../src/theming/theming-controller.ts"],"sourcesContent":["import {\n  adoptStyles,\n  css,\n  LitElement,\n  ReactiveController,\n  ReactiveControllerHost,\n  ReactiveElement,\n} from 'lit';\nimport { getTheme } from './config.js';\nimport { CHANGE_THEME_EVENT } from './theming-event.js';\nimport type { Theme, ThemeController, Themes } from './types.js';\n\nclass ThemingController implements ReactiveController, ThemeController {\n  private themes: Themes;\n  private host: ReactiveControllerHost & ReactiveElement;\n  public theme!: Theme;\n\n  constructor(host: ReactiveControllerHost & ReactiveElement, themes: Themes) {\n    this.host = host;\n    this.themes = themes;\n  }\n\n  private readonly __themingEventHandler = () => {\n    this.adoptStyles();\n    this.host.requestUpdate();\n  };\n\n  public hostConnected() {\n    this.adoptStyles();\n    window.addEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);\n  }\n\n  public hostDisconnected() {\n    window.removeEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);\n  }\n\n  protected adoptStyles() {\n    this.theme = getTheme();\n    const ctor = this.host.constructor as typeof LitElement;\n    const supportsAdoptingStyleSheets =\n      window.ShadowRoot &&\n      'adoptedStyleSheets' in Document.prototype &&\n      'replace' in CSSStyleSheet.prototype;\n\n    let styleSheet = css``;\n\n    const [theme] = Object.entries(this.themes).filter(\n      ([name]) => name === this.theme\n    );\n\n    if (theme) {\n      const [_, cssResult] = theme;\n      styleSheet = cssResult;\n    }\n\n    // Firefox and Safari don't support the adoptedStyleSheets API yet,\n    // and the lit framework appends the resolved stylesheets indiscriminately\n    // when using the adoptStyles API below. Hence, we need to remove all previously\n    // defined style tags in the shadow root as changing the themes at runtime just\n    // keeps stacking the resolved styles one over the other, resulting in broken themes.\n    if (!supportsAdoptingStyleSheets) {\n      [...this.host!.renderRoot.querySelectorAll('style')]\n        .slice(1)\n        .forEach((tag) => tag.remove());\n    }\n\n    adoptStyles(this.host.shadowRoot as ShadowRoot, [\n      ...ctor.elementStyles,\n      styleSheet,\n    ]);\n  }\n}\n\nconst _updateWhenThemeChanges = (\n  host: ReactiveControllerHost & ReactiveElement,\n  themes: Themes\n) => {\n  const controller = new ThemingController(host, themes);\n  host.addController(controller);\n  return controller;\n};\n\nexport const updateWhenThemeChanges: typeof _updateWhenThemeChanges & {\n  _THEMING_CONTROLLER_FN_?: never;\n} = _updateWhenThemeChanges;\n"],"mappings":"AAAA,SACEA,WAAW,EACXC,GAAG,QAKE,KAAK;AACZ,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,kBAAkB,QAAQ,oBAAoB;AAGvD,MAAMC,iBAAiB;EAKrBC,YAAYC,IAA8C,EAAEC,MAAc;IAKzD,KAAAC,qBAAqB,GAAG,MAAK;MAC5C,IAAI,CAACR,WAAW,EAAE;MAClB,IAAI,CAACM,IAAI,CAACG,aAAa,EAAE;IAC3B,CAAC;IAPC,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAOOG,aAAaA,CAAA;IAClB,IAAI,CAACV,WAAW,EAAE;IAClBW,MAAM,CAACC,gBAAgB,CAACT,kBAAkB,EAAE,IAAI,CAACK,qBAAqB,CAAC;EACzE;EAEOK,gBAAgBA,CAAA;IACrBF,MAAM,CAACG,mBAAmB,CAACX,kBAAkB,EAAE,IAAI,CAACK,qBAAqB,CAAC;EAC5E;EAEUR,WAAWA,CAAA;IACnB,IAAI,CAACe,KAAK,GAAGb,QAAQ,EAAE;IACvB,MAAMc,IAAI,GAAG,IAAI,CAACV,IAAI,CAACD,WAAgC;IACvD,MAAMY,2BAA2B,GAC/BN,MAAM,CAACO,UAAU,IACjB,oBAAoB,IAAIC,QAAQ,CAACC,SAAS,IAC1C,SAAS,IAAIC,aAAa,CAACD,SAAS;IAEtC,IAAIE,UAAU,GAAGrB,GAAG,EAAE;IAEtB,MAAM,CAACc,KAAK,CAAC,GAAGQ,MAAM,CAACC,OAAO,CAAC,IAAI,CAACjB,MAAM,CAAC,CAACkB,MAAM,CAChD,CAAC,CAACC,IAAI,CAAC,KAAKA,IAAI,KAAK,IAAI,CAACX,KAAK,CAChC;IAED,IAAIA,KAAK,EAAE;MACT,MAAM,CAACY,CAAC,EAAEC,SAAS,CAAC,GAAGb,KAAK;MAC5BO,UAAU,GAAGM,SAAS;;IAQxB,IAAI,CAACX,2BAA2B,EAAE;MAChC,CAAC,GAAG,IAAI,CAACX,IAAK,CAACuB,UAAU,CAACC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CACjDC,KAAK,CAAC,CAAC,CAAC,CACRC,OAAO,CAAEC,GAAG,IAAKA,GAAG,CAACC,MAAM,EAAE,CAAC;;IAGnClC,WAAW,CAAC,IAAI,CAACM,IAAI,CAAC6B,UAAwB,EAAE,CAC9C,GAAGnB,IAAI,CAACoB,aAAa,EACrBd,UAAU,CACX,CAAC;EACJ;;AAGF,MAAMe,uBAAuB,GAAGA,CAC9B/B,IAA8C,EAC9CC,MAAc,KACZ;EACF,MAAM+B,UAAU,GAAG,IAAIlC,iBAAiB,CAACE,IAAI,EAAEC,MAAM,CAAC;EACtDD,IAAI,CAACiC,aAAa,CAACD,UAAU,CAAC;EAC9B,OAAOA,UAAU;AACnB,CAAC;AAED,OAAO,MAAME,sBAAsB,GAE/BH,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}