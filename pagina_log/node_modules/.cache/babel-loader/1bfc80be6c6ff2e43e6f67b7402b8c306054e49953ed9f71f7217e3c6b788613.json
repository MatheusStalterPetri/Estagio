{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/**\n * A simple class which stores a value, and triggers registered callbacks when the\n * value is changed via its setter.\n *\n * An implementor might use other observable patterns such as MobX or Redux to get\n * behavior like this. But this is a pretty minimal approach that will likely work\n * for a number of use cases.\n */\nexport class ValueNotifier {\n  constructor(defaultValue) {\n    this.callbacks = new Map();\n    this.updateObservers = () => {\n      for (const [callback, disposer] of this.callbacks) {\n        callback(this._value, disposer);\n      }\n    };\n    if (defaultValue !== undefined) {\n      this.value = defaultValue;\n    }\n  }\n  get value() {\n    return this._value;\n  }\n  set value(v) {\n    this.setValue(v);\n  }\n  setValue(v, force = false) {\n    const update = force || !Object.is(v, this._value);\n    this._value = v;\n    if (update) {\n      this.updateObservers();\n    }\n  }\n  addCallback(callback, subscribe) {\n    if (subscribe) {\n      if (!this.callbacks.has(callback)) {\n        this.callbacks.set(callback, () => {\n          this.callbacks.delete(callback);\n        });\n      }\n    }\n    callback(this.value);\n  }\n  clearCallbacks() {\n    this.callbacks.clear();\n  }\n}","map":{"version":3,"names":["ValueNotifier","constructor","defaultValue","callbacks","Map","updateObservers","callback","disposer","_value","undefined","value","v","setValue","force","update","Object","is","addCallback","subscribe","has","set","delete","clearCallbacks","clear"],"sources":["../../src/lib/value-notifier.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextCallback} from './context-request-event.js';\n\n/**\n * A disposer function\n */\ntype Disposer = () => void;\n\n/**\n * A simple class which stores a value, and triggers registered callbacks when the\n * value is changed via its setter.\n *\n * An implementor might use other observable patterns such as MobX or Redux to get\n * behavior like this. But this is a pretty minimal approach that will likely work\n * for a number of use cases.\n */\nexport class ValueNotifier<T> {\n  private callbacks: Map<ContextCallback<T>, Disposer> = new Map();\n\n  private _value!: T;\n  public get value(): T {\n    return this._value;\n  }\n  public set value(v: T) {\n    this.setValue(v);\n  }\n\n  public setValue(v: T, force = false) {\n    const update = force || !Object.is(v, this._value);\n    this._value = v;\n    if (update) {\n      this.updateObservers();\n    }\n  }\n\n  constructor(defaultValue?: T) {\n    if (defaultValue !== undefined) {\n      this.value = defaultValue;\n    }\n  }\n\n  updateObservers = (): void => {\n    for (const [callback, disposer] of this.callbacks) {\n      callback(this._value, disposer);\n    }\n  };\n\n  addCallback(callback: ContextCallback<T>, subscribe?: boolean): void {\n    if (subscribe) {\n      if (!this.callbacks.has(callback)) {\n        this.callbacks.set(callback, () => {\n          this.callbacks.delete(callback);\n        });\n      }\n    }\n    callback(this.value);\n  }\n\n  clearCallbacks(): void {\n    this.callbacks.clear();\n  }\n}\n"],"mappings":"AAAA;;;;;AAaA;;;;;;;;AAQA,OAAM,MAAOA,aAAa;EAmBxBC,YAAYC,YAAgB;IAlBpB,KAAAC,SAAS,GAAsC,IAAIC,GAAG,EAAE;IAwBhE,KAAAC,eAAe,GAAG,MAAW;MAC3B,KAAK,MAAM,CAACC,QAAQ,EAAEC,QAAQ,CAAC,IAAI,IAAI,CAACJ,SAAS,EAAE;QACjDG,QAAQ,CAAC,IAAI,CAACE,MAAM,EAAED,QAAQ,CAAC;;IAEnC,CAAC;IATC,IAAIL,YAAY,KAAKO,SAAS,EAAE;MAC9B,IAAI,CAACC,KAAK,GAAGR,YAAY;;EAE7B;EAnBA,IAAWQ,KAAKA,CAAA;IACd,OAAO,IAAI,CAACF,MAAM;EACpB;EACA,IAAWE,KAAKA,CAACC,CAAI;IACnB,IAAI,CAACC,QAAQ,CAACD,CAAC,CAAC;EAClB;EAEOC,QAAQA,CAACD,CAAI,EAAEE,KAAK,GAAG,KAAK;IACjC,MAAMC,MAAM,GAAGD,KAAK,IAAI,CAACE,MAAM,CAACC,EAAE,CAACL,CAAC,EAAE,IAAI,CAACH,MAAM,CAAC;IAClD,IAAI,CAACA,MAAM,GAAGG,CAAC;IACf,IAAIG,MAAM,EAAE;MACV,IAAI,CAACT,eAAe,EAAE;;EAE1B;EAcAY,WAAWA,CAACX,QAA4B,EAAEY,SAAmB;IAC3D,IAAIA,SAAS,EAAE;MACb,IAAI,CAAC,IAAI,CAACf,SAAS,CAACgB,GAAG,CAACb,QAAQ,CAAC,EAAE;QACjC,IAAI,CAACH,SAAS,CAACiB,GAAG,CAACd,QAAQ,EAAE,MAAK;UAChC,IAAI,CAACH,SAAS,CAACkB,MAAM,CAACf,QAAQ,CAAC;QACjC,CAAC,CAAC;;;IAGNA,QAAQ,CAAC,IAAI,CAACI,KAAK,CAAC;EACtB;EAEAY,cAAcA,CAAA;IACZ,IAAI,CAACnB,SAAS,CAACoB,KAAK,EAAE;EACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}