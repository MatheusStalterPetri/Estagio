{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html, LitElement, nothing } from 'lit';\nimport { property, query, queryAssignedElements, state } from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { asPercent, clamp } from '../common/util.js';\nexport class IgcProgressBaseComponent extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.percentage = 0;\n    this.max = 100;\n    this.value = 0;\n    this.variant = 'primary';\n    this.animationDuration = 500;\n    this.indeterminate = false;\n    this.hideLabel = false;\n  }\n  indeterminateChange() {\n    this.cancelAnimations();\n    if (!this.indeterminate) {\n      this.percentage = Math.floor(asPercent(this.value, this.max));\n    }\n  }\n  maxChange() {\n    this.max = Math.max(0, this.max);\n    if (this.value > this.max) {\n      this.value = this.max;\n    } else {\n      if (!this.indeterminate) {\n        this.animateLabelTo(this.max, this.value);\n      }\n    }\n  }\n  valueChange(oldVal) {\n    this.value = clamp(this.value, 0, this.max);\n    if (!this.indeterminate) {\n      cancelAnimationFrame(this.tick);\n      if (this.percentage !== Math.floor(asPercent(this.value, this.max))) {\n        this.animateLabelTo(oldVal, this.value);\n      }\n    }\n  }\n  slotChanges() {\n    this.requestUpdate();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.initialMax = Math.max(0, this.max);\n    this.initialValue = clamp(this.value, 0, this.initialMax);\n    this.value = 0;\n    this.max = 100;\n  }\n  firstUpdated() {\n    if (!this.indeterminate) {\n      setTimeout(() => {\n        this.max = this.initialMax;\n        this.value = this.initialValue;\n      }, 0);\n    }\n  }\n  cancelAnimations() {\n    requestAnimationFrame(() => {\n      var _a;\n      (_a = this.progressIndicator) === null || _a === void 0 ? void 0 : _a.getAnimations().forEach(animation => {\n        if (animation instanceof CSSTransition) {\n          animation.cancel();\n        }\n      });\n    });\n    cancelAnimationFrame(this.tick);\n  }\n  animateLabelTo(start, end) {\n    let t0;\n    const tick = t1 => {\n      t0 = t0 !== null && t0 !== void 0 ? t0 : t1;\n      const progress = Math.min((t1 - t0) / (this.animationDuration || 1), 1);\n      this.percentage = Math.floor(asPercent(progress * (end - start) + start, this.max));\n      progress < 1 ? this.tick = requestAnimationFrame(tick) : cancelAnimationFrame(this.tick);\n    };\n    requestAnimationFrame(tick);\n  }\n  renderLabelFormat() {\n    return this.labelFormat.replace(/\\{0\\}/gm, `${this.value}`).replace(/\\{1\\}/gm, `${this.max}`);\n  }\n  renderDefaultSlot() {\n    return html`<slot part=\"label\" @slotchange=${this.slotChanges}></slot>\n      ${when(this.indeterminate || this.hideLabel || this.assignedElements.length, () => nothing, () => html`<span part=\"label value\">${this.renderLabelText()}</span>`)}`;\n  }\n  renderLabelText() {\n    return this.labelFormat ? this.renderLabelFormat() : `${this.percentage}%`;\n  }\n}\n__decorate([queryAssignedElements()], IgcProgressBaseComponent.prototype, \"assignedElements\", void 0);\n__decorate([query('[part~=\"fill\"]', true)], IgcProgressBaseComponent.prototype, \"progressIndicator\", void 0);\n__decorate([state()], IgcProgressBaseComponent.prototype, \"percentage\", void 0);\n__decorate([property({\n  type: Number\n})], IgcProgressBaseComponent.prototype, \"max\", void 0);\n__decorate([property({\n  type: Number\n})], IgcProgressBaseComponent.prototype, \"value\", void 0);\n__decorate([property({\n  reflect: true\n})], IgcProgressBaseComponent.prototype, \"variant\", void 0);\n__decorate([property({\n  type: Number,\n  attribute: 'animation-duration'\n})], IgcProgressBaseComponent.prototype, \"animationDuration\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: false\n})], IgcProgressBaseComponent.prototype, \"indeterminate\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'hide-label',\n  reflect: false\n})], IgcProgressBaseComponent.prototype, \"hideLabel\", void 0);\n__decorate([property({\n  attribute: 'label-format'\n})], IgcProgressBaseComponent.prototype, \"labelFormat\", void 0);\n__decorate([watch('indeterminate', {\n  waitUntilFirstUpdate: true\n})], IgcProgressBaseComponent.prototype, \"indeterminateChange\", null);\n__decorate([watch('max', {\n  waitUntilFirstUpdate: true\n})], IgcProgressBaseComponent.prototype, \"maxChange\", null);\n__decorate([watch('value', {\n  waitUntilFirstUpdate: true\n})], IgcProgressBaseComponent.prototype, \"valueChange\", null);","map":{"version":3,"names":["html","LitElement","nothing","property","query","queryAssignedElements","state","when","watch","asPercent","clamp","IgcProgressBaseComponent","constructor","percentage","max","value","variant","animationDuration","indeterminate","hideLabel","indeterminateChange","cancelAnimations","Math","floor","maxChange","animateLabelTo","valueChange","oldVal","cancelAnimationFrame","tick","slotChanges","requestUpdate","connectedCallback","initialMax","initialValue","firstUpdated","setTimeout","requestAnimationFrame","_a","progressIndicator","getAnimations","forEach","animation","CSSTransition","cancel","start","end","t0","t1","progress","min","renderLabelFormat","labelFormat","replace","renderDefaultSlot","assignedElements","length","renderLabelText","__decorate","type","Number","reflect","attribute","Boolean","waitUntilFirstUpdate"],"sources":["../../../src/components/progress/base.ts"],"sourcesContent":["import { html, LitElement, nothing } from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  state,\n} from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { asPercent, clamp } from '../common/util.js';\n\nexport abstract class IgcProgressBaseComponent extends LitElement {\n  private initialMax!: number;\n  private initialValue!: number;\n\n  protected tick!: number;\n\n  @queryAssignedElements()\n  protected assignedElements!: Array<HTMLElement>;\n\n  @query('[part~=\"fill\"]', true)\n  protected progressIndicator!: Element;\n\n  @state()\n  protected percentage = 0;\n\n  /**\n   * Maximum value of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public max = 100;\n\n  /**\n   * The value of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public value = 0;\n\n  /**\n   * The variant of the control.\n   * @attr\n   */\n  @property({ reflect: true })\n  public variant: 'primary' | 'info' | 'success' | 'warning' | 'danger' =\n    'primary';\n\n  /**\n   * Animation duration in milliseconds.\n   * @attr animation-duration\n   */\n  @property({ type: Number, attribute: 'animation-duration' })\n  public animationDuration = 500;\n\n  /**\n   * The indeterminate state of the control.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: false })\n  public indeterminate = false;\n\n  /**\n   * Shows/hides the label of the control.\n   * @attr hide-label\n   */\n  @property({ type: Boolean, attribute: 'hide-label', reflect: false })\n  public hideLabel = false;\n\n  /**\n   * Format string for the default label of the control.\n   * Placeholders:\n   *  {0} - current value of the control.\n   *  {1} - max value of the control.\n   * @attr label-format\n   */\n  @property({ attribute: 'label-format' })\n  public labelFormat!: string;\n\n  @watch('indeterminate', { waitUntilFirstUpdate: true })\n  protected indeterminateChange() {\n    this.cancelAnimations();\n    if (!this.indeterminate) {\n      this.percentage = Math.floor(asPercent(this.value, this.max));\n    }\n  }\n\n  @watch('max', { waitUntilFirstUpdate: true })\n  protected maxChange() {\n    this.max = Math.max(0, this.max);\n    if (this.value > this.max) {\n      this.value = this.max;\n    } else {\n      if (!this.indeterminate) {\n        this.animateLabelTo(this.max, this.value);\n      }\n    }\n  }\n\n  @watch('value', { waitUntilFirstUpdate: true })\n  protected valueChange(oldVal: number) {\n    this.value = clamp(this.value, 0, this.max);\n    if (!this.indeterminate) {\n      cancelAnimationFrame(this.tick);\n      if (this.percentage !== Math.floor(asPercent(this.value, this.max))) {\n        this.animateLabelTo(oldVal, this.value);\n      }\n    }\n  }\n\n  protected slotChanges() {\n    this.requestUpdate();\n  }\n\n  public override connectedCallback(): void {\n    super.connectedCallback();\n    this.initialMax = Math.max(0, this.max);\n    this.initialValue = clamp(this.value, 0, this.initialMax);\n    this.value = 0;\n    this.max = 100;\n  }\n\n  protected override firstUpdated() {\n    if (!this.indeterminate) {\n      // trigger transition initially\n      setTimeout(() => {\n        this.max = this.initialMax;\n        this.value = this.initialValue;\n      }, 0);\n    }\n  }\n\n  protected cancelAnimations() {\n    requestAnimationFrame(() => {\n      this.progressIndicator?.getAnimations().forEach((animation) => {\n        if (animation instanceof CSSTransition) {\n          animation.cancel();\n        }\n      });\n    });\n    cancelAnimationFrame(this.tick);\n  }\n\n  protected animateLabelTo(start: number, end: number) {\n    let t0: number;\n\n    const tick = (t1: number) => {\n      t0 = t0 ?? t1;\n\n      const progress = Math.min((t1 - t0) / (this.animationDuration || 1), 1);\n      this.percentage = Math.floor(\n        asPercent(progress * (end - start) + start, this.max)\n      );\n      progress < 1\n        ? (this.tick = requestAnimationFrame(tick))\n        : cancelAnimationFrame(this.tick);\n    };\n\n    requestAnimationFrame(tick);\n  }\n\n  protected renderLabelFormat() {\n    return this.labelFormat\n      .replace(/\\{0\\}/gm, `${this.value}`)\n      .replace(/\\{1\\}/gm, `${this.max}`);\n  }\n\n  protected renderDefaultSlot() {\n    return html`<slot part=\"label\" @slotchange=${this.slotChanges}></slot>\n      ${when(\n        this.indeterminate || this.hideLabel || this.assignedElements.length,\n        () => nothing,\n        () => html`<span part=\"label value\">${this.renderLabelText()}</span>`\n      )}`;\n  }\n\n  protected renderLabelText() {\n    return this.labelFormat ? this.renderLabelFormat() : `${this.percentage}%`;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}