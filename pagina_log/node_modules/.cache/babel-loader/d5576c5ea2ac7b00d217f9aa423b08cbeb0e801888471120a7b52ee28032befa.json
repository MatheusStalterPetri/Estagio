{"ast":null,"code":"var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _GridDOMController_initialSize;\nimport { html } from 'lit';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { applyColumnWidths } from '../internal/utils.js';\nimport { registerGridIcons } from '../internal/icon-registry.js';\nexport class GridDOMController {\n  constructor(host, state) {\n    this.host = host;\n    this.state = state;\n    _GridDOMController_initialSize.set(this, () => {\n      setTimeout(() => this.setScrollOffset());\n    });\n    this.columnSizes = {};\n    this.rowRenderer = (data, index) => {\n      return html`<apex-grid-row\n      part=\"row\"\n      style=${styleMap({\n        ...this.columnSizes,\n        ...this.getActiveRowStyles(index)\n      })}\n      .index=${index}\n      .activeNode=${this.state.active}\n      .data=${data}\n      .columns=${this.host.columns}\n    ></apex-grid-row>`;\n    };\n    this.host.addController(this);\n  }\n  get container() {\n    // @ts-expect-error: protected member access\n    return this.host.scrollContainer;\n  }\n  async hostConnected() {\n    registerGridIcons();\n    this.setGridColumnSizes();\n    // Wait for the initial paint of the virtualizer and recalculate the scrollbar offset\n    // for the next one\n    await this.host.updateComplete;\n    this.container.addEventListener('visibilityChanged', __classPrivateFieldGet(this, _GridDOMController_initialSize, \"f\"), {\n      once: true\n    });\n  }\n  hostUpdate() {\n    this.setScrollOffset();\n    this.setGridColumnSizes();\n  }\n  setScrollOffset() {\n    const size = this.container ? this.container.offsetWidth - this.container.clientWidth : 0;\n    this.host.style.setProperty('--scrollbar-offset', `${size}px`);\n  }\n  setGridColumnSizes() {\n    this.columnSizes = applyColumnWidths(this.host.columns);\n  }\n  getActiveRowStyles(index) {\n    const {\n      row\n    } = this.state.active;\n    return row === index ? {\n      'z-index': '3'\n    } : {};\n  }\n}\n_GridDOMController_initialSize = new WeakMap();","map":{"version":3,"names":["html","styleMap","applyColumnWidths","registerGridIcons","GridDOMController","constructor","host","state","_GridDOMController_initialSize","set","setTimeout","setScrollOffset","columnSizes","rowRenderer","data","index","getActiveRowStyles","active","columns","addController","container","scrollContainer","hostConnected","setGridColumnSizes","updateComplete","addEventListener","__classPrivateFieldGet","once","hostUpdate","size","offsetWidth","clientWidth","style","setProperty","row"],"sources":["../../../src/controllers/dom.ts"],"sourcesContent":["import { html, ReactiveController } from 'lit';\nimport { StyleInfo, styleMap } from 'lit/directives/style-map.js';\nimport { RenderItemFunction } from '@lit-labs/virtualizer/virtualize.js';\nimport { StateController } from './state.js';\nimport { applyColumnWidths } from '../internal/utils.js';\nimport { registerGridIcons } from '../internal/icon-registry.js';\nimport type { GridHost } from '../internal/types.js';\n\nexport class GridDOMController<T extends object> implements ReactiveController {\n  constructor(protected host: GridHost<T>, protected state: StateController<T>) {\n    this.host.addController(this);\n  }\n\n  #initialSize = () => {\n    setTimeout(() => this.setScrollOffset());\n  };\n\n  public get container() {\n    // @ts-expect-error: protected member access\n    return this.host.scrollContainer;\n  }\n\n  public columnSizes: StyleInfo = {};\n\n  public rowRenderer: RenderItemFunction<T> = (data: T, index: number) => {\n    return html`<apex-grid-row\n      part=\"row\"\n      style=${styleMap({ ...this.columnSizes, ...this.getActiveRowStyles(index) })}\n      .index=${index}\n      .activeNode=${this.state.active}\n      .data=${data}\n      .columns=${this.host.columns}\n    ></apex-grid-row>`;\n  };\n\n  public async hostConnected() {\n    registerGridIcons();\n    this.setGridColumnSizes();\n    // Wait for the initial paint of the virtualizer and recalculate the scrollbar offset\n    // for the next one\n    await this.host.updateComplete;\n    this.container.addEventListener('visibilityChanged', this.#initialSize, { once: true });\n  }\n\n  public hostUpdate(): void {\n    this.setScrollOffset();\n    this.setGridColumnSizes();\n  }\n\n  public setScrollOffset() {\n    const size = this.container ? this.container.offsetWidth - this.container.clientWidth : 0;\n    this.host.style.setProperty('--scrollbar-offset', `${size}px`);\n  }\n\n  protected setGridColumnSizes() {\n    this.columnSizes = applyColumnWidths(this.host.columns);\n  }\n\n  public getActiveRowStyles(index: number): StyleInfo {\n    const { row } = this.state.active;\n    return row === index ? { 'z-index': '3' } : {};\n  }\n}\n"],"mappings":";;;;;;AAAA,SAASA,IAAI,QAA4B,KAAK;AAC9C,SAAoBC,QAAQ,QAAQ,6BAA6B;AAGjE,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,iBAAiB,QAAQ,8BAA8B;AAGhE,OAAM,MAAOC,iBAAiB;EAC5BC,YAAsBC,IAAiB,EAAYC,KAAyB;IAAtD,KAAAD,IAAI,GAAJA,IAAI;IAAyB,KAAAC,KAAK,GAALA,KAAK;IAIxDC,8BAAA,CAAAC,GAAA,OAAe,MAAK;MAClBC,UAAU,CAAC,MAAM,IAAI,CAACC,eAAe,EAAE,CAAC;IAC1C,CAAC;IAOM,KAAAC,WAAW,GAAc,EAAE;IAE3B,KAAAC,WAAW,GAA0B,CAACC,IAAO,EAAEC,KAAa,KAAI;MACrE,OAAOf,IAAI;;cAEDC,QAAQ,CAAC;QAAE,GAAG,IAAI,CAACW,WAAW;QAAE,GAAG,IAAI,CAACI,kBAAkB,CAACD,KAAK;MAAC,CAAE,CAAC;eACnEA,KAAK;oBACA,IAAI,CAACR,KAAK,CAACU,MAAM;cACvBH,IAAI;iBACD,IAAI,CAACR,IAAI,CAACY,OAAO;sBACZ;IACpB,CAAC;IAvBC,IAAI,CAACZ,IAAI,CAACa,aAAa,CAAC,IAAI,CAAC;EAC/B;EAMA,IAAWC,SAASA,CAAA;IAClB;IACA,OAAO,IAAI,CAACd,IAAI,CAACe,eAAe;EAClC;EAeO,MAAMC,aAAaA,CAAA;IACxBnB,iBAAiB,EAAE;IACnB,IAAI,CAACoB,kBAAkB,EAAE;IACzB;IACA;IACA,MAAM,IAAI,CAACjB,IAAI,CAACkB,cAAc;IAC9B,IAAI,CAACJ,SAAS,CAACK,gBAAgB,CAAC,mBAAmB,EAAEC,sBAAA,KAAI,EAAAlB,8BAAA,MAAa,EAAE;MAAEmB,IAAI,EAAE;IAAI,CAAE,CAAC;EACzF;EAEOC,UAAUA,CAAA;IACf,IAAI,CAACjB,eAAe,EAAE;IACtB,IAAI,CAACY,kBAAkB,EAAE;EAC3B;EAEOZ,eAAeA,CAAA;IACpB,MAAMkB,IAAI,GAAG,IAAI,CAACT,SAAS,GAAG,IAAI,CAACA,SAAS,CAACU,WAAW,GAAG,IAAI,CAACV,SAAS,CAACW,WAAW,GAAG,CAAC;IACzF,IAAI,CAACzB,IAAI,CAAC0B,KAAK,CAACC,WAAW,CAAC,oBAAoB,EAAE,GAAGJ,IAAI,IAAI,CAAC;EAChE;EAEUN,kBAAkBA,CAAA;IAC1B,IAAI,CAACX,WAAW,GAAGV,iBAAiB,CAAC,IAAI,CAACI,IAAI,CAACY,OAAO,CAAC;EACzD;EAEOF,kBAAkBA,CAACD,KAAa;IACrC,MAAM;MAAEmB;IAAG,CAAE,GAAG,IAAI,CAAC3B,KAAK,CAACU,MAAM;IACjC,OAAOiB,GAAG,KAAKnB,KAAK,GAAG;MAAE,SAAS,EAAE;IAAG,CAAE,GAAG,EAAE;EAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}