{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.structured-clone.js\";\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html, LitElement } from 'lit';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { styles } from './themes/light/combo.base.css.js';\nimport { styles as bootstrap } from './themes/light/combo.bootstrap.css.js';\nimport { styles as material } from './themes/light/combo.material.css.js';\nimport { styles as fluent } from './themes/light/combo.fluent.css.js';\nimport { styles as indigo } from './themes/light/combo.indigo.css.js';\nimport { property, query, queryAssignedElements, state } from 'lit/decorators.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { defineComponents } from '../common/definitions/defineComponents.js';\nimport IgcComboListComponent from './combo-list.js';\nimport IgcComboItemComponent from './combo-item.js';\nimport IgcComboHeaderComponent from './combo-header.js';\nimport IgcInputComponent from '../input/input.js';\nimport IgcIconComponent from '../icon/icon.js';\nimport { NavigationController } from './controllers/navigation.js';\nimport { SelectionController } from './controllers/selection.js';\nimport { IgcToggleController } from '../toggle/toggle.controller.js';\nimport { DataController } from './controllers/data.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { partNameMap } from '../common/util.js';\nimport { filteringOptionsConverter } from './utils/converters.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { blazorAdditionalDependencies } from '../common/decorators/blazorAdditionalDependencies.js';\nimport { blazorIndirectRender } from '../common/decorators/blazorIndirectRender.js';\ndefineComponents(IgcIconComponent, IgcComboListComponent, IgcComboItemComponent, IgcComboHeaderComponent, IgcInputComponent);\nlet IgcComboComponent = class IgcComboComponent extends EventEmitterMixin(LitElement) {\n  dataChanged() {\n    this.dataState = structuredClone(this.data);\n    if (this.hasUpdated) {\n      this.pipeline();\n    }\n  }\n  updateDisplayKey() {\n    var _a;\n    this.displayKey = (_a = this.displayKey) !== null && _a !== void 0 ? _a : this.valueKey;\n  }\n  updateFilterKey() {\n    var _a;\n    this.filteringOptions.filterKey = (_a = this.filteringOptions.filterKey) !== null && _a !== void 0 ? _a : this.displayKey;\n  }\n  async pipeline() {\n    this.dataState = await this.dataController.apply([...this.data]);\n  }\n  toggleDirectiveChange() {\n    if (!this.target) return;\n    this.toggleController.target = this.target;\n    this.target.setAttribute('aria-expanded', this.open ? 'true' : 'false');\n  }\n  constructor() {\n    super();\n    this._value = '';\n    this.navigationController = new NavigationController(this);\n    this.selectionController = new SelectionController(this);\n    this.dataController = new DataController(this);\n    this.data = [];\n    this.disabled = false;\n    this.required = false;\n    this.invalid = false;\n    this.outlined = false;\n    this.singleSelect = false;\n    this.autofocusList = false;\n    this.placeholderSearch = 'Search';\n    this.dir = 'auto';\n    this.open = false;\n    this.flip = true;\n    this.displayKey = this.valueKey;\n    this.groupKey = this.displayKey;\n    this.groupSorting = 'asc';\n    this.filteringOptions = {\n      filterKey: this.displayKey,\n      caseSensitive: false\n    };\n    this.caseSensitiveIcon = false;\n    this.disableFiltering = false;\n    this.itemTemplate = ({\n      item\n    }) => {\n      if (typeof item !== 'object' || item === null) {\n        return String(item);\n      }\n      if (this.displayKey) {\n        return html`${item[this.displayKey]}`;\n      }\n      return html`${String(item)}`;\n    };\n    this.groupHeaderTemplate = ({\n      item\n    }) => {\n      return html`${this.groupKey && item[this.groupKey]}`;\n    };\n    this.dataState = [];\n    this.itemRenderer = (item, index) => {\n      const record = item;\n      const dataItem = this.data.at(record.dataIndex);\n      const active = this.navigationController.active === index;\n      const selected = this.selectionController.selected.has(dataItem);\n      const headerTemplate = html`<igc-combo-header part=\"group-header\"\n      >${this.groupHeaderTemplate({\n        item: record\n      })}</igc-combo-header\n    >`;\n      const itemParts = partNameMap({\n        item: true,\n        selected,\n        active\n      });\n      const itemTemplate = html`<igc-combo-item\n      part=\"${itemParts}\"\n      exportparts=\"checkbox, checkbox-indicator, checked\"\n      @click=${this.itemClickHandler.bind(this)}\n      .index=${index}\n      .active=${active}\n      ?selected=${selected}\n      ?hide-checkbox=${this.singleSelect}\n      >${this.itemTemplate({\n        item: record\n      })}</igc-combo-item\n    >`;\n      return html`${this.groupKey && record.header ? headerTemplate : itemTemplate}`;\n    };\n    this.toggleController = new IgcToggleController(this, {\n      target: this.target,\n      closeCallback: async () => {\n        if (!this.handleClosing()) return;\n        this.open = false;\n        await this.updateComplete;\n        this.emitEvent('igcClosed');\n      }\n    });\n    this.addEventListener('focus', () => {\n      this.emitEvent('igcFocus');\n    });\n    this.addEventListener('blur', () => {\n      const {\n        selected\n      } = this.selectionController;\n      if (selected.size === 0) {\n        this.target.value = '';\n        this.resetSearchTerm();\n      }\n      this.emitEvent('igcBlur');\n    });\n    this.addEventListener('keydown', this.navigationController.navigateHost.bind(this.navigationController));\n  }\n  themeAdopted(controller) {\n    this.themeController = controller;\n  }\n  willUpdate() {\n    this.theme = this.themeController.theme;\n  }\n  async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this.toggleController.rendered;\n    return result;\n  }\n  resetSearchTerm() {\n    this.dataController.searchTerm = '';\n  }\n  async resetState() {\n    await this.updateComplete;\n    this.selectionController.selected.clear();\n    this.updateValue();\n    this.resetSearchTerm();\n    this.navigationController.active = -1;\n  }\n  get value() {\n    return this._value;\n  }\n  async updateValue() {\n    this._value = this.selectionController.getValue(Array.from(this.selectionController.selected));\n    await this.updateComplete;\n    this.target.value = this._value;\n  }\n  validate() {\n    this.updateComplete.then(() => this.reportValidity());\n  }\n  reportValidity() {\n    this.invalid = this.required && !this.value;\n    return !this.invalid;\n  }\n  checkValidity() {\n    return this.reportValidity();\n  }\n  focus(options) {\n    this.target.focus(options);\n  }\n  blur() {\n    this.target.blur();\n  }\n  normalizeSelection(items = []) {\n    return Array.isArray(items) ? items : [items];\n  }\n  select(items) {\n    const _items = this.normalizeSelection(items);\n    this.selectionController.select(_items, false);\n    this.list.requestUpdate();\n    this.updateValue();\n  }\n  deselect(items) {\n    const _items = this.normalizeSelection(items);\n    this.selectionController.deselect(_items, false);\n    this.list.requestUpdate();\n    this.updateValue();\n  }\n  async handleMainInput(e) {\n    this._show();\n    this.dataController.searchTerm = e.detail;\n    await this.updateComplete;\n    const matchIndex = this.dataState.findIndex(i => !i.header);\n    this.navigationController.active = e.detail.length > 0 ? matchIndex : -1;\n    this.list.requestUpdate();\n    this.clearSingleSelection();\n  }\n  handleSearchInput(e) {\n    this.dataController.searchTerm = e.detail;\n  }\n  handleOpening() {\n    const args = {\n      cancelable: true\n    };\n    return this.emitEvent('igcOpening', args);\n  }\n  handleClosing() {\n    const args = {\n      cancelable: true\n    };\n    return this.emitEvent('igcClosing', args);\n  }\n  async _show(emit = true) {\n    if (this.open) return;\n    if (emit && !this.handleOpening()) return;\n    this.open = true;\n    await this.updateComplete;\n    emit && this.emitEvent('igcOpened');\n    if (!this.singleSelect) {\n      this.list.focus();\n    }\n    if (!this.autofocusList) {\n      this.input.focus();\n    }\n  }\n  show() {\n    this._show(false);\n  }\n  async _hide(emit = true) {\n    if (!this.open) return;\n    if (emit && !this.handleClosing()) return;\n    this.open = false;\n    await this.updateComplete;\n    emit && this.emitEvent('igcClosed');\n    this.navigationController.active = -1;\n  }\n  hide() {\n    this._hide(false);\n  }\n  _toggle(emit = true) {\n    this.open ? this._hide(emit) : this._show(emit);\n  }\n  toggle() {\n    this._toggle(false);\n  }\n  listKeydownHandler(event) {\n    const target = event.composedPath().find(el => el instanceof IgcComboListComponent);\n    if (target) {\n      this.navigationController.navigateList(event, target);\n    }\n  }\n  itemClickHandler(event) {\n    const input = this.singleSelect ? this.target : this.input;\n    const target = event.composedPath().find(el => el instanceof IgcComboItemComponent);\n    this.toggleSelect(target.index);\n    input.focus();\n    if (this.singleSelect) {\n      this._hide();\n    }\n  }\n  toggleSelect(index) {\n    const {\n      dataIndex\n    } = this.dataState.at(index);\n    this.selectionController.changeSelection(dataIndex);\n    this.navigationController.active = index;\n    this.updateValue();\n    this.list.requestUpdate();\n  }\n  navigateTo(item) {\n    this.navigationController.navigateTo(item, this.list);\n  }\n  clearSingleSelection() {\n    const {\n      selected\n    } = this.selectionController;\n    const selection = selected.values().next().value;\n    if (selection) {\n      const item = this.valueKey ? selection[this.valueKey] : selection;\n      this.selectionController.deselect([item], selected.size > 0);\n    }\n  }\n  handleClearIconClick(e) {\n    e.stopPropagation();\n    if (this.singleSelect) {\n      this.resetSearchTerm();\n      this.clearSingleSelection();\n    } else {\n      this.selectionController.deselect([], true);\n    }\n    this.updateValue();\n    this.navigationController.active = -1;\n    this.list.requestUpdate();\n  }\n  handleMainInputKeydown(e) {\n    this.navigationController.navigateMainInput(e, this.list);\n  }\n  handleSearchInputKeydown(e) {\n    this.navigationController.navigateSearchInput(e, this.list);\n  }\n  toggleCaseSensitivity() {\n    this.filteringOptions.caseSensitive = !this.filteringOptions.caseSensitive;\n    this.requestUpdate('pipeline');\n  }\n  get hasPrefixes() {\n    return this.inputPrefix.length > 0;\n  }\n  get hasSuffixes() {\n    return this.inputSuffix.length > 0;\n  }\n  renderToggleIcon() {\n    const openIcon = this.theme === 'material' ? 'keyboard_arrow_up' : 'arrow_drop_up';\n    const closeIcon = this.theme === 'material' ? 'keyboard_arrow_down' : 'arrow_drop_down';\n    return html`\n      <span slot=\"suffix\" part=\"toggle-icon\">\n        <slot name=\"toggle-icon\">\n          <igc-icon\n            name=${this.open ? openIcon : closeIcon}\n            collection=\"internal\"\n            aria-hidden=\"true\"\n          ></igc-icon>\n        </slot>\n      </span>\n    `;\n  }\n  renderClearIcon() {\n    const {\n      selected\n    } = this.selectionController;\n    const icon = this.theme === 'material' ? 'chip_cancel' : 'clear';\n    return html`<span\n      slot=\"suffix\"\n      part=\"clear-icon\"\n      @click=${this.handleClearIconClick}\n      ?hidden=${selected.size === 0}\n    >\n      <slot name=\"clear-icon\">\n        <igc-icon\n          name=\"${icon}\"\n          collection=\"internal\"\n          aria-hidden=\"true\"\n        ></igc-icon>\n      </slot>\n    </span>`;\n  }\n  renderMainInput() {\n    return html`<igc-input\n      id=\"target\"\n      role=\"combobox\"\n      aria-owns=\"dropdown\"\n      aria-describedby=\"helper-text\"\n      aria-disabled=${this.disabled}\n      exportparts=\"container: input, input: native-input, label, prefix, suffix\"\n      @click=${e => {\n      e.preventDefault();\n      this._toggle(true);\n    }}\n      placeholder=${ifDefined(this.placeholder)}\n      label=${ifDefined(this.label)}\n      dir=${this.dir}\n      @igcChange=${e => e.stopPropagation()}\n      @igcFocus=${e => {\n      e.stopPropagation();\n      requestAnimationFrame(() => {\n        this.target.select();\n      });\n    }}\n      @igcBlur=${e => e.stopPropagation()}\n      @igcInput=${this.handleMainInput}\n      @keydown=${this.handleMainInputKeydown}\n      .disabled=${this.disabled}\n      .required=${this.required}\n      .invalid=${this.invalid}\n      .outlined=${this.outlined}\n      .autofocus=${this.autofocus}\n      ?readonly=${!this.singleSelect}\n    >\n      <span slot=${this.hasPrefixes && 'prefix'}>\n        <slot name=\"prefix\"></slot>\n      </span>\n      ${this.renderClearIcon()}\n      <span slot=${this.hasSuffixes && 'suffix'}>\n        <slot name=\"suffix\"></slot>\n      </span>\n      ${this.renderToggleIcon()}\n    </igc-input>`;\n  }\n  renderSearchInput() {\n    var _a;\n    return html`<div\n      part=\"filter-input\"\n      ?hidden=${this.disableFiltering || this.singleSelect}\n    >\n      <igc-input\n        part=\"search-input\"\n        placeholder=${this.placeholderSearch}\n        exportparts=\"input: search-input\"\n        @igcFocus=${e => e.stopPropagation()}\n        @igcBlur=${e => e.stopPropagation()}\n        @igcInput=${this.handleSearchInput}\n        @keydown=${this.handleSearchInputKeydown}\n        dir=${this.dir}\n      >\n        <igc-icon\n          slot=${this.caseSensitiveIcon && 'suffix'}\n          name=\"case_sensitive\"\n          collection=\"internal\"\n          part=${partNameMap({\n      'case-icon': true,\n      active: (_a = this.filteringOptions.caseSensitive) !== null && _a !== void 0 ? _a : false\n    })}\n          @click=${this.toggleCaseSensitivity}\n        ></igc-icon>\n      </igc-input>\n    </div>`;\n  }\n  renderEmptyTemplate() {\n    return html`<div part=\"empty\" ?hidden=${this.dataState.length > 0}>\n      <slot name=\"empty\">The list is empty</slot>\n    </div>`;\n  }\n  renderList() {\n    return html`<div\n      @keydown=${this.listKeydownHandler}\n      part=\"list-wrapper\"\n      ${this.toggleController.toggleDirective}\n    >\n      ${this.renderSearchInput()}\n      <div part=\"header\">\n        <slot name=\"header\"></slot>\n      </div>\n      <igc-combo-list\n        id=\"dropdown\"\n        part=\"list\"\n        aria-label=\"${this.label}\"\n        .items=${this.dataState}\n        .renderItem=${this.itemRenderer}\n        ?hidden=${this.dataState.length === 0}\n      >\n      </igc-combo-list>\n      ${this.renderEmptyTemplate()}\n      <div part=\"footer\">\n        <slot name=\"footer\"></slot>\n      </div>\n    </div>`;\n  }\n  renderHelperText() {\n    return html`<div\n      id=\"helper-text\"\n      part=\"helper-text\"\n      ?hidden=\"${this.helperText.length === 0}\"\n    >\n      <slot name=\"helper-text\"></slot>\n    </div>`;\n  }\n  render() {\n    return html`\n      ${this.renderMainInput()}${this.renderList()}${this.renderHelperText()}\n    `;\n  }\n};\nIgcComboComponent.tagName = 'igc-combo';\nIgcComboComponent.styles = styles;\n__decorate([queryAssignedElements({\n  slot: 'helper-text'\n})], IgcComboComponent.prototype, \"helperText\", void 0);\n__decorate([queryAssignedElements({\n  slot: 'suffix'\n})], IgcComboComponent.prototype, \"inputSuffix\", void 0);\n__decorate([queryAssignedElements({\n  slot: 'prefix'\n})], IgcComboComponent.prototype, \"inputPrefix\", void 0);\n__decorate([query('[part=\"search-input\"]')], IgcComboComponent.prototype, \"input\", void 0);\n__decorate([query('igc-input#target')], IgcComboComponent.prototype, \"target\", void 0);\n__decorate([query('igc-combo-list')], IgcComboComponent.prototype, \"list\", void 0);\n__decorate([property({\n  attribute: false\n})], IgcComboComponent.prototype, \"data\", void 0);\n__decorate([property()], IgcComboComponent.prototype, \"name\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Boolean\n})], IgcComboComponent.prototype, \"disabled\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Boolean\n})], IgcComboComponent.prototype, \"required\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Boolean\n})], IgcComboComponent.prototype, \"invalid\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Boolean\n})], IgcComboComponent.prototype, \"outlined\", void 0);\n__decorate([property({\n  attribute: 'single-select',\n  reflect: true,\n  type: Boolean\n})], IgcComboComponent.prototype, \"singleSelect\", void 0);\n__decorate([property({\n  type: Boolean\n})], IgcComboComponent.prototype, \"autofocus\", void 0);\n__decorate([property({\n  attribute: 'autofocus-list',\n  type: Boolean\n})], IgcComboComponent.prototype, \"autofocusList\", void 0);\n__decorate([property({\n  type: String\n})], IgcComboComponent.prototype, \"label\", void 0);\n__decorate([property({\n  type: String\n})], IgcComboComponent.prototype, \"placeholder\", void 0);\n__decorate([property({\n  attribute: 'placeholder-search',\n  type: String\n})], IgcComboComponent.prototype, \"placeholderSearch\", void 0);\n__decorate([property({\n  reflect: true\n})], IgcComboComponent.prototype, \"dir\", void 0);\n__decorate([property({\n  type: Boolean\n})], IgcComboComponent.prototype, \"open\", void 0);\n__decorate([property({\n  type: Boolean\n})], IgcComboComponent.prototype, \"flip\", void 0);\n__decorate([property({\n  attribute: 'value-key',\n  reflect: false\n})], IgcComboComponent.prototype, \"valueKey\", void 0);\n__decorate([property({\n  attribute: 'display-key',\n  reflect: false\n})], IgcComboComponent.prototype, \"displayKey\", void 0);\n__decorate([property({\n  attribute: 'group-key',\n  reflect: false\n})], IgcComboComponent.prototype, \"groupKey\", void 0);\n__decorate([property({\n  attribute: 'group-sorting',\n  reflect: false\n})], IgcComboComponent.prototype, \"groupSorting\", void 0);\n__decorate([property({\n  attribute: 'filtering-options',\n  reflect: false,\n  converter: filteringOptionsConverter\n})], IgcComboComponent.prototype, \"filteringOptions\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'case-sensitive-icon',\n  reflect: false\n})], IgcComboComponent.prototype, \"caseSensitiveIcon\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'disable-filtering',\n  reflect: false\n})], IgcComboComponent.prototype, \"disableFiltering\", void 0);\n__decorate([property({\n  attribute: false\n})], IgcComboComponent.prototype, \"itemTemplate\", void 0);\n__decorate([property({\n  attribute: false\n})], IgcComboComponent.prototype, \"groupHeaderTemplate\", void 0);\n__decorate([state()], IgcComboComponent.prototype, \"dataState\", void 0);\n__decorate([watch('data')], IgcComboComponent.prototype, \"dataChanged\", null);\n__decorate([watch('valueKey')], IgcComboComponent.prototype, \"updateDisplayKey\", null);\n__decorate([watch('displayKey')], IgcComboComponent.prototype, \"updateFilterKey\", null);\n__decorate([watch('groupKey'), watch('groupSorting'), watch('pipeline')], IgcComboComponent.prototype, \"pipeline\", null);\n__decorate([watch('open')], IgcComboComponent.prototype, \"toggleDirectiveChange\", null);\n__decorate([watch('singleSelect', {\n  waitUntilFirstUpdate: true\n})], IgcComboComponent.prototype, \"resetState\", null);\n__decorate([watch('value')], IgcComboComponent.prototype, \"validate\", null);\nIgcComboComponent = __decorate([themes({\n  material,\n  bootstrap,\n  fluent,\n  indigo\n}), blazorAdditionalDependencies('IgcIconComponent, IgcInputComponent'), blazorIndirectRender], IgcComboComponent);\nexport default IgcComboComponent;","map":{"version":3,"names":["html","LitElement","themes","styles","bootstrap","material","fluent","indigo","property","query","queryAssignedElements","state","watch","defineComponents","IgcComboListComponent","IgcComboItemComponent","IgcComboHeaderComponent","IgcInputComponent","IgcIconComponent","NavigationController","SelectionController","IgcToggleController","DataController","ifDefined","partNameMap","filteringOptionsConverter","EventEmitterMixin","blazorAdditionalDependencies","blazorIndirectRender","IgcComboComponent","dataChanged","dataState","structuredClone","data","hasUpdated","pipeline","updateDisplayKey","displayKey","_a","valueKey","updateFilterKey","filteringOptions","filterKey","dataController","apply","toggleDirectiveChange","target","toggleController","setAttribute","open","constructor","_value","navigationController","selectionController","disabled","required","invalid","outlined","singleSelect","autofocusList","placeholderSearch","dir","flip","groupKey","groupSorting","caseSensitive","caseSensitiveIcon","disableFiltering","itemTemplate","item","String","groupHeaderTemplate","itemRenderer","index","record","dataItem","at","dataIndex","active","selected","has","headerTemplate","itemParts","itemClickHandler","bind","header","closeCallback","handleClosing","updateComplete","emitEvent","addEventListener","size","value","resetSearchTerm","navigateHost","themeAdopted","controller","themeController","willUpdate","theme","getUpdateComplete","result","rendered","searchTerm","resetState","clear","updateValue","getValue","Array","from","validate","then","reportValidity","checkValidity","focus","options","blur","normalizeSelection","items","isArray","select","_items","list","requestUpdate","deselect","handleMainInput","e","_show","detail","matchIndex","findIndex","i","length","clearSingleSelection","handleSearchInput","handleOpening","args","cancelable","emit","input","show","_hide","hide","_toggle","toggle","listKeydownHandler","event","composedPath","find","el","navigateList","toggleSelect","changeSelection","navigateTo","selection","values","next","handleClearIconClick","stopPropagation","handleMainInputKeydown","navigateMainInput","handleSearchInputKeydown","navigateSearchInput","toggleCaseSensitivity","hasPrefixes","inputPrefix","hasSuffixes","inputSuffix","renderToggleIcon","openIcon","closeIcon","renderClearIcon","icon","renderMainInput","preventDefault","placeholder","label","requestAnimationFrame","autofocus","renderSearchInput","renderEmptyTemplate","renderList","toggleDirective","renderHelperText","helperText","render","tagName","__decorate","slot","attribute","reflect","type","Boolean","converter","waitUntilFirstUpdate"],"sources":["../../../src/components/combo/combo.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from 'lit';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { styles } from './themes/light/combo.base.css.js';\nimport { styles as bootstrap } from './themes/light/combo.bootstrap.css.js';\nimport { styles as material } from './themes/light/combo.material.css.js';\nimport { styles as fluent } from './themes/light/combo.fluent.css.js';\nimport { styles as indigo } from './themes/light/combo.indigo.css.js';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  state,\n} from 'lit/decorators.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { defineComponents } from '../common/definitions/defineComponents.js';\nimport IgcComboListComponent from './combo-list.js';\nimport IgcComboItemComponent from './combo-item.js';\nimport IgcComboHeaderComponent from './combo-header.js';\nimport IgcInputComponent from '../input/input.js';\nimport IgcIconComponent from '../icon/icon.js';\nimport { NavigationController } from './controllers/navigation.js';\nimport { SelectionController } from './controllers/selection.js';\nimport { IgcToggleController } from '../toggle/toggle.controller.js';\nimport { DataController } from './controllers/data.js';\nimport { IgcToggleComponent } from '../toggle/types.js';\nimport {\n  Keys,\n  ComboRecord,\n  GroupingDirection,\n  FilteringOptions,\n  IgcComboEventMap,\n  ComboItemTemplate,\n  Item,\n} from './types.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { partNameMap } from '../common/util.js';\nimport { filteringOptionsConverter } from './utils/converters.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { Constructor } from '../common/mixins/constructor.js';\nimport type { ThemeController, Theme } from '../../theming/types.js';\nimport { blazorAdditionalDependencies } from '../common/decorators/blazorAdditionalDependencies.js';\nimport { blazorIndirectRender } from '../common/decorators/blazorIndirectRender.js';\n\ndefineComponents(\n  IgcIconComponent,\n  IgcComboListComponent,\n  IgcComboItemComponent,\n  IgcComboHeaderComponent,\n  IgcInputComponent\n);\n\n/**\n * @element igc-combo\n *\n * @slot prefix - Renders content before the input.\n * @slot suffix - Renders content after input.\n * @slot header - Renders a container before the list of options.\n * @slot footer - Renders a container after the list of options.\n * @slot helper-text - Renders content below the input.\n * @slot toggle-icon - Renders content inside the suffix container.\n * @slot clear-icon - Renders content inside the suffix container.\n *\n * @fires igcFocus - Emitted when the select gains focus.\n * @fires igcBlur - Emitted when the select loses focus.\n * @fires igcChange - Emitted when the control's selection has changed.\n * @fires igcOpening - Emitted just before the list of options is opened.\n * @fires igcOpened - Emitted after the list of options is opened.\n * @fires igcClosing - Emitter just before the list of options is closed.\n * @fires igcClosed - Emitted after the list of options is closed.\n *\n * @csspart label - The encapsulated text label.\n * @csspart input - The main input field.\n * @csspart native-input - The native input of the main input field.\n * @csspart prefix - The prefix wrapper.\n * @csspart suffix - The suffix wrapper.\n * @csspart toggle-icon - The toggle icon wrapper.\n * @csspart clear-icon - The clear icon wrapper.\n * @csspart case-icon - The case icon wrapper.\n * @csspart helper-text - The helper text wrapper.\n * @csspart search-input - The search input field.\n * @csspart list-wrapper - The list of options wrapper.\n * @csspart list - The list of options box.\n * @csspart item - Represents each item in the list of options.\n * @csspart group-header - Represents each header in the list of options.\n * @csspart active - Appended to the item parts list when the item is active.\n * @csspart selected - Appended to the item parts list when the item is selected.\n * @csspart checkbox - Represents each checkbox of each list item.\n * @csspart checkbox-indicator - Represents the checkbox indicator of each list item.\n * @csspart checked - Appended to checkbox parts list when checkbox is checked.\n * @csspart header - The container holding the header content.\n * @csspart footer - The container holding the footer content.\n * @csspart empty - The container holding the empty content.\n */\n@themes({ material, bootstrap, fluent, indigo })\n@blazorAdditionalDependencies('IgcIconComponent, IgcInputComponent')\n@blazorIndirectRender\n// TODO: pressing arrow down should scroll to the selected item\nexport default class IgcComboComponent<T extends object>\n  extends EventEmitterMixin<IgcComboEventMap, Constructor<LitElement>>(\n    LitElement\n  )\n  implements Partial<IgcToggleComponent>\n{\n  public static readonly tagName = 'igc-combo';\n  public static styles = styles;\n  private _value = '';\n\n  protected navigationController = new NavigationController<T>(this);\n  protected selectionController = new SelectionController<T>(this);\n  protected dataController = new DataController<T>(this);\n  protected toggleController!: IgcToggleController;\n  protected themeController!: ThemeController;\n  protected theme!: Theme;\n\n  @queryAssignedElements({ slot: 'helper-text' })\n  protected helperText!: Array<HTMLElement>;\n\n  @queryAssignedElements({ slot: 'suffix' })\n  protected inputSuffix!: Array<HTMLElement>;\n\n  @queryAssignedElements({ slot: 'prefix' })\n  protected inputPrefix!: Array<HTMLElement>;\n\n  @query('[part=\"search-input\"]')\n  protected input!: IgcInputComponent;\n\n  @query('igc-input#target')\n  private target!: IgcInputComponent;\n\n  @query('igc-combo-list')\n  private list!: IgcComboListComponent;\n\n  /** The data source used to generate the list of options. */\n  /* treatAsRef */\n  /* blazorAlternateType: object */\n  @property({ attribute: false })\n  public data: Array<T> = [];\n\n  /**\n   * The name attribute of the control.\n   * @attr name\n   */\n  @property()\n  public name!: string;\n\n  /**\n   * The disabled attribute of the control.\n   * @attr disabled\n   */\n  @property({ reflect: true, type: Boolean })\n  public disabled = false;\n\n  /**\n   * The required attribute of the control.\n   * @attr required\n   */\n  @property({ reflect: true, type: Boolean })\n  public required = false;\n\n  /**\n   * The invalid attribute of the control.\n   * @attr invalid\n   */\n  @property({ reflect: true, type: Boolean })\n  public invalid = false;\n\n  /**\n   * The outlined attribute of the control.\n   * @attr outlined\n   */\n  @property({ reflect: true, type: Boolean })\n  public outlined = false;\n\n  /**\n   * Enables single selection mode and moves item filtering to the main input.\n   * @attr single-select\n   */\n  @property({ attribute: 'single-select', reflect: true, type: Boolean })\n  public singleSelect = false;\n\n  /**\n   * The autofocus attribute of the control.\n   * @attr autofocus\n   */\n  @property({ type: Boolean })\n  public override autofocus!: boolean;\n\n  /**\n   * Focuses the list of options when the menu opens.\n   * @attr autofocus-list\n   */\n  @property({ attribute: 'autofocus-list', type: Boolean })\n  public autofocusList = false;\n\n  /**\n   * The label attribute of the control.\n   * @attr label\n   */\n  @property({ type: String })\n  public label!: string;\n\n  /**\n   * The placeholder attribute of the control.\n   * @attr placeholder\n   */\n  @property({ type: String })\n  public placeholder!: string;\n\n  /**\n   * The placeholder attribute of the search input.\n   * @attr placeholder-search\n   */\n  @property({ attribute: 'placeholder-search', type: String })\n  public placeholderSearch = 'Search';\n\n  /**\n   * The direction attribute of the control.\n   * @attr dir\n   */\n  @property({ reflect: true })\n  public override dir: 'ltr' | 'rtl' | 'auto' = 'auto';\n\n  /**\n   * Sets the open state of the component.\n   * @attr open\n   */\n  @property({ type: Boolean })\n  public open = false;\n\n  /** @hidden @internal */\n  @property({ type: Boolean })\n  public flip = true;\n\n  /* blazorAlternateType: string */\n  /**\n   * The key in the data source used when selecting items.\n   * @attr value-key\n   */\n  @property({ attribute: 'value-key', reflect: false })\n  public valueKey?: Keys<T>;\n\n  /* blazorAlternateType: string */\n  /**\n   * The key in the data source used to display items in the list.\n   * @attr display-key\n   */\n  @property({ attribute: 'display-key', reflect: false })\n  public displayKey?: Keys<T> = this.valueKey;\n\n  /* blazorAlternateType: string */\n  /**\n   * The key in the data source used to group items in the list.\n   * @attr group-key\n   */\n  @property({ attribute: 'group-key', reflect: false })\n  public groupKey?: Keys<T> = this.displayKey;\n\n  /**\n   * Sorts the items in each group by ascending or descending order.\n   * @attr group-sorting\n   * @type {\"asc\" | \"desc\"}\n   */\n  @property({ attribute: 'group-sorting', reflect: false })\n  public groupSorting: GroupingDirection = 'asc';\n\n  /**\n   * An object that configures the filtering of the combo.\n   * @attr filtering-options\n   * @type {FilteringOptions<T>}\n   * @param filterKey - The key in the data source used when filtering the list of options.\n   * @param caseSensitive - Determines whether the filtering operation should be case sensitive.\n   */\n  @property({\n    attribute: 'filtering-options',\n    reflect: false,\n    converter: filteringOptionsConverter,\n  })\n  public filteringOptions: FilteringOptions<T> = {\n    filterKey: this.displayKey,\n    caseSensitive: false,\n  };\n\n  /**\n   * Enables the case sensitive search icon in the filtering input.\n   * @attr case-sensitive-icon\n   */\n  @property({ type: Boolean, attribute: 'case-sensitive-icon', reflect: false })\n  public caseSensitiveIcon = false;\n\n  /**\n   * Disables the filtering of the list of options.\n   * @attr disable-filtering\n   */\n  @property({ type: Boolean, attribute: 'disable-filtering', reflect: false })\n  public disableFiltering = false;\n\n  /* blazorSuppress */\n  /**\n   * The template used for the content of each combo item.\n   * @type {ComboItemTemplate<T>}\n   */\n  @property({ attribute: false })\n  public itemTemplate: ComboItemTemplate<T> = ({ item }) => {\n    if (typeof item !== 'object' || item === null) {\n      return String(item) as any;\n    }\n\n    if (this.displayKey) {\n      return html`${item[this.displayKey]}`;\n    }\n\n    return html`${String(item)}`;\n  };\n\n  /* blazorSuppress */\n  /**\n   * The template used for the content of each combo group header.\n   * @type {ComboItemTemplate<T>}\n   */\n  @property({ attribute: false })\n  public groupHeaderTemplate: ComboItemTemplate<T> = ({ item }) => {\n    return html`${this.groupKey && item[this.groupKey]}`;\n  };\n\n  @state()\n  protected dataState: Array<ComboRecord<T>> = [];\n\n  @watch('data')\n  protected dataChanged() {\n    this.dataState = structuredClone(this.data) as ComboRecord<T>[];\n\n    if (this.hasUpdated) {\n      this.pipeline();\n    }\n  }\n\n  @watch('valueKey')\n  protected updateDisplayKey() {\n    this.displayKey = this.displayKey ?? this.valueKey;\n  }\n\n  @watch('displayKey')\n  protected updateFilterKey() {\n    this.filteringOptions.filterKey =\n      this.filteringOptions.filterKey ?? this.displayKey;\n  }\n\n  @watch('groupKey')\n  @watch('groupSorting')\n  @watch('pipeline')\n  protected async pipeline() {\n    this.dataState = await this.dataController.apply([...this.data]);\n  }\n\n  @watch('open')\n  protected toggleDirectiveChange() {\n    if (!this.target) return;\n    this.toggleController.target = this.target;\n    this.target.setAttribute('aria-expanded', this.open ? 'true' : 'false');\n  }\n\n  constructor() {\n    super();\n\n    this.toggleController = new IgcToggleController(this, {\n      target: this.target,\n      closeCallback: async () => {\n        if (!this.handleClosing()) return;\n        this.open = false;\n\n        await this.updateComplete;\n        this.emitEvent('igcClosed');\n      },\n    });\n\n    this.addEventListener('focus', () => {\n      this.emitEvent('igcFocus');\n    });\n\n    this.addEventListener('blur', () => {\n      const { selected } = this.selectionController;\n\n      if (selected.size === 0) {\n        this.target.value = '';\n        this.resetSearchTerm();\n      }\n\n      this.emitEvent('igcBlur');\n    });\n\n    this.addEventListener(\n      'keydown',\n      this.navigationController.navigateHost.bind(this.navigationController)\n    );\n  }\n\n  protected themeAdopted(controller: ThemeController) {\n    this.themeController = controller;\n  }\n\n  protected override willUpdate() {\n    this.theme = this.themeController.theme;\n  }\n\n  protected override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this.toggleController.rendered;\n    return result;\n  }\n\n  protected resetSearchTerm() {\n    this.dataController.searchTerm = '';\n  }\n\n  @watch('singleSelect', { waitUntilFirstUpdate: true })\n  protected async resetState() {\n    await this.updateComplete;\n\n    this.selectionController.selected.clear();\n    this.updateValue();\n    this.resetSearchTerm();\n    this.navigationController.active = -1;\n  }\n\n  /**\n   * Returns the current selection as a list of commma separated values,\n   * represented by the display key, when provided.\n   */\n  public get value() {\n    return this._value;\n  }\n\n  protected async updateValue() {\n    this._value = this.selectionController.getValue(\n      Array.from(this.selectionController.selected)\n    );\n\n    await this.updateComplete;\n    this.target.value = this._value;\n  }\n\n  @watch('value')\n  protected validate() {\n    this.updateComplete.then(() => this.reportValidity());\n  }\n\n  /** Checks the validity of the control. */\n  public reportValidity() {\n    this.invalid = this.required && !this.value;\n    return !this.invalid;\n  }\n\n  /** A wrapper around the reportValidity method to comply with the native input API. */\n  public checkValidity() {\n    return this.reportValidity();\n  }\n\n  /* alternateName: focusComponent */\n  /** Sets focus on the component. */\n  public override focus(options?: FocusOptions) {\n    this.target.focus(options);\n  }\n\n  /* alternateName: blurComponent */\n  /** Removes focus from the component. */\n  public override blur() {\n    this.target.blur();\n  }\n\n  protected normalizeSelection(items: Item<T> | Item<T>[] = []): Item<T>[] {\n    return Array.isArray(items) ? items : [items];\n  }\n\n  /**\n   * Selects option(s) in the list by either reference or valueKey.\n   * If not argument is provided all items will be selected.\n   * @param { Item<T> | Items<T> } items - One or more items to be selected. Multiple items should be passed as an array.\n   * When valueKey is specified, the corresponding value should be used in place of the item reference.\n   * @example\n   * ```typescript\n   * const combo<IgcComboComponent<T>> = document.querySelector('igc-combo');\n   *\n   * // Select one item at a time by reference when valueKey is not specified.\n   * combo.select(combo.data[0]);\n   *\n   * // Select multiple items at a time by reference when valueKey is not specified.\n   * combo.select([combo.data[0], combo.data[1]]);\n   *\n   * // Select one item at a time when valueKey is specified.\n   * combo.select('BG01');\n   *\n   * // Select multiple items at a time when valueKey is specified.\n   * combo.select(['BG01', 'BG02']);\n   * ```\n   */\n  public select(items?: Item<T> | Item<T>[]) {\n    const _items = this.normalizeSelection(items);\n    this.selectionController.select(_items, false);\n    this.list.requestUpdate();\n    this.updateValue();\n  }\n\n  /**\n   * Deselects option(s) in the list by either reference or valueKey.\n   * If not argument is provided all items will be deselected.\n   * @param { Item<T> | Items<T> } items - One or more items to be deselected. Multiple items should be passed as an array.\n   * When valueKey is specified, the corresponding value should be used in place of the item reference.\n   * @example\n   * ```typescript\n   * const combo<IgcComboComponent<T>> = document.querySelector('igc-combo');\n   *\n   * // Deselect one item at a time by reference when valueKey is not specified.\n   * combo.deselect(combo.data[0]);\n   *\n   * // Deselect multiple items at a time by reference when valueKey is not specified.\n   * combo.deselect([combo.data[0], combo.data[1]]);\n   *\n   * // Deselect one item at a time when valueKey is specified.\n   * combo.deselect('BG01');\n   *\n   * // Deselect multiple items at a time when valueKey is specified.\n   * combo.deselect(['BG01', 'BG02']);\n   * ```\n   */\n  public deselect(items?: Item<T> | Item<T>[]) {\n    const _items = this.normalizeSelection(items);\n    this.selectionController.deselect(_items, false);\n    this.list.requestUpdate();\n    this.updateValue();\n  }\n\n  protected async handleMainInput(e: CustomEvent) {\n    this._show();\n    this.dataController.searchTerm = e.detail;\n\n    // wait for the dataState to update after filtering\n    await this.updateComplete;\n\n    const matchIndex = this.dataState.findIndex((i) => !i.header);\n    this.navigationController.active = e.detail.length > 0 ? matchIndex : -1;\n\n    // update the list after changing the active item\n    this.list.requestUpdate();\n\n    // clear the selection upon typing\n    this.clearSingleSelection();\n  }\n\n  protected handleSearchInput(e: CustomEvent) {\n    this.dataController.searchTerm = e.detail;\n  }\n\n  protected handleOpening() {\n    const args = { cancelable: true };\n    return this.emitEvent('igcOpening', args);\n  }\n\n  protected handleClosing(): boolean {\n    const args = { cancelable: true };\n    return this.emitEvent('igcClosing', args);\n  }\n\n  protected async _show(emit = true) {\n    if (this.open) return;\n    if (emit && !this.handleOpening()) return;\n    this.open = true;\n\n    await this.updateComplete;\n    emit && this.emitEvent('igcOpened');\n\n    if (!this.singleSelect) {\n      this.list.focus();\n    }\n\n    if (!this.autofocusList) {\n      this.input.focus();\n    }\n  }\n\n  /** Shows the list of options. */\n  public show() {\n    this._show(false);\n  }\n\n  protected async _hide(emit = true) {\n    if (!this.open) return;\n    if (emit && !this.handleClosing()) return;\n    this.open = false;\n\n    await this.updateComplete;\n    emit && this.emitEvent('igcClosed');\n    this.navigationController.active = -1;\n  }\n\n  /** Hides the list of options. */\n  public hide() {\n    this._hide(false);\n  }\n\n  /** @hidden @internal */\n  public _toggle(emit = true) {\n    this.open ? this._hide(emit) : this._show(emit);\n  }\n\n  /** Toggles the list of options. */\n  public toggle() {\n    this._toggle(false);\n  }\n\n  protected itemRenderer = (item: T, index: number): TemplateResult => {\n    const record = item as ComboRecord<T>;\n    const dataItem = this.data.at(record.dataIndex);\n    const active = this.navigationController.active === index;\n    const selected = this.selectionController.selected.has(dataItem!);\n    const headerTemplate = html`<igc-combo-header part=\"group-header\"\n      >${this.groupHeaderTemplate({ item: record })}</igc-combo-header\n    >`;\n\n    const itemParts = partNameMap({\n      item: true,\n      selected,\n      active,\n    });\n\n    const itemTemplate = html`<igc-combo-item\n      part=\"${itemParts}\"\n      exportparts=\"checkbox, checkbox-indicator, checked\"\n      @click=${this.itemClickHandler.bind(this)}\n      .index=${index}\n      .active=${active}\n      ?selected=${selected}\n      ?hide-checkbox=${this.singleSelect}\n      >${this.itemTemplate({ item: record })}</igc-combo-item\n    >`;\n\n    return html`${this.groupKey && record.header\n      ? headerTemplate\n      : itemTemplate}`;\n  };\n\n  protected listKeydownHandler(event: KeyboardEvent) {\n    const target = event\n      .composedPath()\n      .find(\n        (el) => el instanceof IgcComboListComponent\n      ) as IgcComboListComponent;\n\n    if (target) {\n      this.navigationController.navigateList(event, target);\n    }\n  }\n\n  protected itemClickHandler(event: MouseEvent) {\n    const input = this.singleSelect ? this.target : this.input;\n\n    const target = event\n      .composedPath()\n      .find(\n        (el) => el instanceof IgcComboItemComponent\n      ) as IgcComboItemComponent;\n\n    this.toggleSelect(target.index);\n    input.focus();\n\n    if (this.singleSelect) {\n      this._hide();\n    }\n  }\n\n  protected toggleSelect(index: number) {\n    const { dataIndex } = this.dataState.at(index)!;\n\n    this.selectionController.changeSelection(dataIndex);\n    this.navigationController.active = index;\n    this.updateValue();\n    this.list.requestUpdate();\n  }\n\n  protected navigateTo(item: T) {\n    this.navigationController.navigateTo(item, this.list);\n  }\n\n  protected clearSingleSelection() {\n    const { selected } = this.selectionController;\n    const selection = selected.values().next().value;\n\n    if (selection) {\n      const item = this.valueKey ? selection[this.valueKey] : selection;\n      this.selectionController.deselect([item], selected.size > 0);\n    }\n  }\n\n  protected handleClearIconClick(e: MouseEvent) {\n    e.stopPropagation();\n\n    if (this.singleSelect) {\n      this.resetSearchTerm();\n      this.clearSingleSelection();\n    } else {\n      this.selectionController.deselect([], true);\n    }\n\n    this.updateValue();\n    this.navigationController.active = -1;\n    this.list.requestUpdate();\n  }\n\n  protected handleMainInputKeydown(e: KeyboardEvent) {\n    this.navigationController.navigateMainInput(e, this.list);\n  }\n\n  protected handleSearchInputKeydown(e: KeyboardEvent) {\n    this.navigationController.navigateSearchInput(e, this.list);\n  }\n\n  protected toggleCaseSensitivity() {\n    this.filteringOptions.caseSensitive = !this.filteringOptions.caseSensitive;\n    this.requestUpdate('pipeline');\n  }\n\n  protected get hasPrefixes() {\n    return this.inputPrefix.length > 0;\n  }\n\n  protected get hasSuffixes() {\n    return this.inputSuffix.length > 0;\n  }\n\n  private renderToggleIcon() {\n    const openIcon =\n      this.theme === 'material' ? 'keyboard_arrow_up' : 'arrow_drop_up';\n    const closeIcon =\n      this.theme === 'material' ? 'keyboard_arrow_down' : 'arrow_drop_down';\n\n    return html`\n      <span slot=\"suffix\" part=\"toggle-icon\">\n        <slot name=\"toggle-icon\">\n          <igc-icon\n            name=${this.open ? openIcon : closeIcon}\n            collection=\"internal\"\n            aria-hidden=\"true\"\n          ></igc-icon>\n        </slot>\n      </span>\n    `;\n  }\n\n  private renderClearIcon() {\n    const { selected } = this.selectionController;\n    const icon = this.theme === 'material' ? 'chip_cancel' : 'clear';\n\n    return html`<span\n      slot=\"suffix\"\n      part=\"clear-icon\"\n      @click=${this.handleClearIconClick}\n      ?hidden=${selected.size === 0}\n    >\n      <slot name=\"clear-icon\">\n        <igc-icon\n          name=\"${icon}\"\n          collection=\"internal\"\n          aria-hidden=\"true\"\n        ></igc-icon>\n      </slot>\n    </span>`;\n  }\n\n  private renderMainInput() {\n    return html`<igc-input\n      id=\"target\"\n      role=\"combobox\"\n      aria-owns=\"dropdown\"\n      aria-describedby=\"helper-text\"\n      aria-disabled=${this.disabled}\n      exportparts=\"container: input, input: native-input, label, prefix, suffix\"\n      @click=${(e: MouseEvent) => {\n        e.preventDefault();\n        this._toggle(true);\n      }}\n      placeholder=${ifDefined(this.placeholder)}\n      label=${ifDefined(this.label)}\n      dir=${this.dir}\n      @igcChange=${(e: Event) => e.stopPropagation()}\n      @igcFocus=${(e: Event) => {\n        e.stopPropagation();\n\n        requestAnimationFrame(() => {\n          this.target.select();\n        });\n      }}\n      @igcBlur=${(e: Event) => e.stopPropagation()}\n      @igcInput=${this.handleMainInput}\n      @keydown=${this.handleMainInputKeydown}\n      .disabled=${this.disabled}\n      .required=${this.required}\n      .invalid=${this.invalid}\n      .outlined=${this.outlined}\n      .autofocus=${this.autofocus}\n      ?readonly=${!this.singleSelect}\n    >\n      <span slot=${this.hasPrefixes && 'prefix'}>\n        <slot name=\"prefix\"></slot>\n      </span>\n      ${this.renderClearIcon()}\n      <span slot=${this.hasSuffixes && 'suffix'}>\n        <slot name=\"suffix\"></slot>\n      </span>\n      ${this.renderToggleIcon()}\n    </igc-input>`;\n  }\n\n  private renderSearchInput() {\n    return html`<div\n      part=\"filter-input\"\n      ?hidden=${this.disableFiltering || this.singleSelect}\n    >\n      <igc-input\n        part=\"search-input\"\n        placeholder=${this.placeholderSearch}\n        exportparts=\"input: search-input\"\n        @igcFocus=${(e: Event) => e.stopPropagation()}\n        @igcBlur=${(e: Event) => e.stopPropagation()}\n        @igcInput=${this.handleSearchInput}\n        @keydown=${this.handleSearchInputKeydown}\n        dir=${this.dir}\n      >\n        <igc-icon\n          slot=${this.caseSensitiveIcon && 'suffix'}\n          name=\"case_sensitive\"\n          collection=\"internal\"\n          part=${partNameMap({\n            'case-icon': true,\n            active: this.filteringOptions.caseSensitive ?? false,\n          })}\n          @click=${this.toggleCaseSensitivity}\n        ></igc-icon>\n      </igc-input>\n    </div>`;\n  }\n\n  private renderEmptyTemplate() {\n    return html`<div part=\"empty\" ?hidden=${this.dataState.length > 0}>\n      <slot name=\"empty\">The list is empty</slot>\n    </div>`;\n  }\n\n  private renderList() {\n    return html`<div\n      @keydown=${this.listKeydownHandler}\n      part=\"list-wrapper\"\n      ${this.toggleController.toggleDirective}\n    >\n      ${this.renderSearchInput()}\n      <div part=\"header\">\n        <slot name=\"header\"></slot>\n      </div>\n      <igc-combo-list\n        id=\"dropdown\"\n        part=\"list\"\n        aria-label=\"${this.label}\"\n        .items=${this.dataState}\n        .renderItem=${this.itemRenderer}\n        ?hidden=${this.dataState.length === 0}\n      >\n      </igc-combo-list>\n      ${this.renderEmptyTemplate()}\n      <div part=\"footer\">\n        <slot name=\"footer\"></slot>\n      </div>\n    </div>`;\n  }\n\n  private renderHelperText() {\n    return html`<div\n      id=\"helper-text\"\n      part=\"helper-text\"\n      ?hidden=\"${this.helperText.length === 0}\"\n    >\n      <slot name=\"helper-text\"></slot>\n    </div>`;\n  }\n\n  protected override render() {\n    return html`\n      ${this.renderMainInput()}${this.renderList()}${this.renderHelperText()}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-combo': IgcComboComponent<object>;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}