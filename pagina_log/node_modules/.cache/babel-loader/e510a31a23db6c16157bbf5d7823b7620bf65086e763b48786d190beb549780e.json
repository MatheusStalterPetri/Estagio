{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport var DateRangeType;\n(function (DateRangeType) {\n  DateRangeType[DateRangeType[\"After\"] = 0] = \"After\";\n  DateRangeType[DateRangeType[\"Before\"] = 1] = \"Before\";\n  DateRangeType[DateRangeType[\"Between\"] = 2] = \"Between\";\n  DateRangeType[DateRangeType[\"Specific\"] = 3] = \"Specific\";\n  DateRangeType[DateRangeType[\"Weekdays\"] = 4] = \"Weekdays\";\n  DateRangeType[DateRangeType[\"Weekends\"] = 5] = \"Weekends\";\n})(DateRangeType || (DateRangeType = {}));\nexport var TimeDeltaInterval;\n(function (TimeDeltaInterval) {\n  TimeDeltaInterval[TimeDeltaInterval[\"Second\"] = 0] = \"Second\";\n  TimeDeltaInterval[TimeDeltaInterval[\"Minute\"] = 1] = \"Minute\";\n  TimeDeltaInterval[TimeDeltaInterval[\"Hour\"] = 2] = \"Hour\";\n  TimeDeltaInterval[TimeDeltaInterval[\"Day\"] = 3] = \"Day\";\n  TimeDeltaInterval[TimeDeltaInterval[\"Week\"] = 4] = \"Week\";\n  TimeDeltaInterval[TimeDeltaInterval[\"Month\"] = 5] = \"Month\";\n  TimeDeltaInterval[TimeDeltaInterval[\"Quarter\"] = 6] = \"Quarter\";\n  TimeDeltaInterval[TimeDeltaInterval[\"Year\"] = 7] = \"Year\";\n})(TimeDeltaInterval || (TimeDeltaInterval = {}));\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\nexport const range = (start = 0, stop, step = 1) => {\n  const res = [];\n  const cur = stop === undefined ? 0 : start;\n  const max = stop === undefined ? start : stop;\n  for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n    res.push(i);\n  }\n  return res;\n};\nexport const isLeap = year => year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\nexport const weekDay = (year, month, day) => new Date(year, month, day).getDay();\nexport const monthRange = (year, month) => {\n  if (month < 0 || month > 11) {\n    throw new Error('Invalid month specified');\n  }\n  const day = weekDay(year, month, 1);\n  let nDays = MDAYS[month];\n  if (month === FEBRUARY && isLeap(year)) {\n    nDays++;\n  }\n  return [day, nDays];\n};\nexport const isDateInRanges = (date, ranges) => {\n  date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  const dateInMs = date.getTime();\n  if (!ranges) {\n    return false;\n  }\n  for (const descriptor of ranges) {\n    const dRanges = descriptor.dateRange ? descriptor.dateRange.map(r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : [];\n    switch (descriptor.type) {\n      case DateRangeType.After:\n        if (dateInMs > dRanges[0].getTime()) {\n          return true;\n        }\n        break;\n      case DateRangeType.Before:\n        if (dateInMs < dRanges[0].getTime()) {\n          return true;\n        }\n        break;\n      case DateRangeType.Between:\n        {\n          const dRange = dRanges.map(d => d.getTime());\n          const min = Math.min(dRange[0], dRange[1]);\n          const max = Math.max(dRange[0], dRange[1]);\n          if (dateInMs >= min && dateInMs <= max) {\n            return true;\n          }\n          break;\n        }\n      case DateRangeType.Specific:\n        {\n          const datesInMs = dRanges.map(d => d.getTime());\n          for (const specificDateInMs of datesInMs) {\n            if (dateInMs === specificDateInMs) {\n              return true;\n            }\n          }\n          break;\n        }\n      case DateRangeType.Weekdays:\n        {\n          const day = date.getDay();\n          if (day % 6 !== 0) {\n            return true;\n          }\n          break;\n        }\n      case DateRangeType.Weekends:\n        {\n          const weekday = date.getDay();\n          if (weekday % 6 === 0) {\n            return true;\n          }\n          break;\n        }\n      default:\n        return false;\n    }\n  }\n  return false;\n};\nexport var WEEKDAYS;\n(function (WEEKDAYS) {\n  WEEKDAYS[WEEKDAYS[\"SUNDAY\"] = 0] = \"SUNDAY\";\n  WEEKDAYS[WEEKDAYS[\"MONDAY\"] = 1] = \"MONDAY\";\n  WEEKDAYS[WEEKDAYS[\"TUESDAY\"] = 2] = \"TUESDAY\";\n  WEEKDAYS[WEEKDAYS[\"WEDNESDAY\"] = 3] = \"WEDNESDAY\";\n  WEEKDAYS[WEEKDAYS[\"THURSDAY\"] = 4] = \"THURSDAY\";\n  WEEKDAYS[WEEKDAYS[\"FRIDAY\"] = 5] = \"FRIDAY\";\n  WEEKDAYS[WEEKDAYS[\"SATURDAY\"] = 6] = \"SATURDAY\";\n})(WEEKDAYS || (WEEKDAYS = {}));\nexport class Calendar {\n  constructor(firstWeekDay = WEEKDAYS.SUNDAY) {\n    this._firstWeekDay = firstWeekDay;\n  }\n  get firstWeekDay() {\n    return this._firstWeekDay % 7;\n  }\n  set firstWeekDay(value) {\n    this._firstWeekDay = value;\n  }\n  weekdays() {\n    const res = [];\n    for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n      res.push(i % 7);\n    }\n    return res;\n  }\n  monthdates(year, month, extraWeek = false) {\n    let date = new Date(year, month, 1);\n    let days = (date.getDay() - this.firstWeekDay) % 7;\n    if (days < 0) {\n      days = 7 - Math.abs(days);\n    }\n    date = this.timedelta(date, TimeDeltaInterval.Day, -days);\n    const res = [];\n    let value;\n    while (true) {\n      value = this.generateICalendarDate(date, year, month);\n      res.push(value);\n      date = this.timedelta(date, TimeDeltaInterval.Day, 1);\n      if (date.getMonth() !== month && date.getDay() === this.firstWeekDay) {\n        if (extraWeek && res.length <= 35) {\n          for (const _ of range(0, 7)) {\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n            date = this.timedelta(date, TimeDeltaInterval.Day, 1);\n          }\n        }\n        break;\n      }\n    }\n    return res;\n  }\n  monthdatescalendar(year, month, extraWeek = false) {\n    const dates = this.monthdates(year, month, extraWeek);\n    const res = [];\n    for (const i of range(0, dates.length, 7)) {\n      res.push(dates.slice(i, i + 7));\n    }\n    return res;\n  }\n  timedelta(date, interval, units) {\n    const ret = new Date(date);\n    const checkRollover = () => {\n      if (ret.getDate() !== date.getDate()) {\n        ret.setDate(0);\n      }\n    };\n    switch (interval) {\n      case TimeDeltaInterval.Year:\n        ret.setFullYear(ret.getFullYear() + units);\n        checkRollover();\n        break;\n      case TimeDeltaInterval.Quarter:\n        ret.setMonth(ret.getMonth() + 3 * units);\n        checkRollover();\n        break;\n      case TimeDeltaInterval.Month:\n        ret.setMonth(ret.getMonth() + units);\n        checkRollover();\n        break;\n      case TimeDeltaInterval.Week:\n        ret.setDate(ret.getDate() + 7 * units);\n        break;\n      case TimeDeltaInterval.Day:\n        ret.setDate(ret.getDate() + units);\n        break;\n      case TimeDeltaInterval.Hour:\n        ret.setTime(ret.getTime() + units * 3600000);\n        break;\n      case TimeDeltaInterval.Minute:\n        ret.setTime(ret.getTime() + units * 60000);\n        break;\n      case TimeDeltaInterval.Second:\n        ret.setTime(ret.getTime() + units * 1000);\n        break;\n      default:\n        throw new Error('Invalid interval specifier');\n    }\n    return ret;\n  }\n  getNextMonth(date) {\n    return this.timedelta(date, TimeDeltaInterval.Month, 1);\n  }\n  getPrevMonth(date) {\n    return this.timedelta(date, TimeDeltaInterval.Month, -1);\n  }\n  getNextYear(date) {\n    return this.timedelta(date, TimeDeltaInterval.Year, 1);\n  }\n  getPrevYear(date) {\n    return this.timedelta(date, TimeDeltaInterval.Year, -1);\n  }\n  getWeekNumber(date) {\n    const firstJan = new Date(date.getFullYear(), 0, 1).getTime();\n    const today = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n    const dayInMilSeconds = 86400000;\n    const dayOfYear = (today - firstJan + 1) / dayInMilSeconds;\n    return Math.ceil(dayOfYear / 7);\n  }\n  generateICalendarDate(date, year, month) {\n    return {\n      date,\n      isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n      isNextMonth: this.isNextMonth(date, year, month),\n      isPrevMonth: this.isPreviousMonth(date, year, month)\n    };\n  }\n  isPreviousMonth(date, year, month) {\n    if (date.getFullYear() === year) {\n      return date.getMonth() < month;\n    }\n    return date.getFullYear() < year;\n  }\n  isNextMonth(date, year, month) {\n    if (date.getFullYear() === year) {\n      return date.getMonth() > month;\n    }\n    return date.getFullYear() > year;\n  }\n}","map":{"version":3,"names":["DateRangeType","TimeDeltaInterval","MDAYS","FEBRUARY","range","start","stop","step","res","cur","undefined","max","i","push","isLeap","year","weekDay","month","day","Date","getDay","monthRange","Error","nDays","isDateInRanges","date","ranges","getFullYear","getMonth","getDate","dateInMs","getTime","descriptor","dRanges","dateRange","map","r","type","After","Before","Between","dRange","d","min","Math","Specific","datesInMs","specificDateInMs","Weekdays","Weekends","weekday","WEEKDAYS","Calendar","constructor","firstWeekDay","SUNDAY","_firstWeekDay","value","weekdays","monthdates","extraWeek","days","abs","timedelta","Day","generateICalendarDate","length","_","monthdatescalendar","dates","slice","interval","units","ret","checkRollover","setDate","Year","setFullYear","Quarter","setMonth","Month","Week","Hour","setTime","Minute","Second","getNextMonth","getPrevMonth","getNextYear","getPrevYear","getWeekNumber","firstJan","today","dayInMilSeconds","dayOfYear","ceil","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth"],"sources":["../../../../src/components/calendar/common/calendar.model.ts"],"sourcesContent":["/* creationType: DateRangeDescriptor */\nexport interface DateRangeDescriptor {\n  type: DateRangeType;\n  dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n  After,\n  Before,\n  Between,\n  Specific,\n  Weekdays,\n  Weekends,\n}\n\n/**\n * @hidden\n */\nexport enum TimeDeltaInterval {\n  Second,\n  Minute,\n  Hour,\n  Day,\n  Week,\n  Month,\n  Quarter,\n  Year,\n}\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport const range = (start = 0, stop: number, step = 1) => {\n  const res = [];\n  const cur = stop === undefined ? 0 : start;\n  const max = stop === undefined ? start : stop;\n  for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n    res.push(i);\n  }\n  return res;\n};\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport const isLeap = (year: number): boolean =>\n  year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n\nexport const weekDay = (year: number, month: number, day: number): number =>\n  new Date(year, month, day).getDay();\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport const monthRange = (year: number, month: number): number[] => {\n  if (month < 0 || month > 11) {\n    throw new Error('Invalid month specified');\n  }\n  const day = weekDay(year, month, 1);\n  let nDays = MDAYS[month];\n  if (month === FEBRUARY && isLeap(year)) {\n    nDays++;\n  }\n  return [day, nDays];\n};\n\nexport const isDateInRanges = (\n  date: Date,\n  ranges: DateRangeDescriptor[]\n): boolean => {\n  date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  const dateInMs = date.getTime();\n\n  if (!ranges) {\n    return false;\n  }\n\n  for (const descriptor of ranges) {\n    const dRanges: Date[] = descriptor.dateRange\n      ? descriptor.dateRange.map(\n          (r) => new Date(r.getFullYear(), r.getMonth(), r.getDate())\n        )\n      : [];\n    switch (descriptor.type) {\n      case DateRangeType.After:\n        if (dateInMs > dRanges[0].getTime()) {\n          return true;\n        }\n\n        break;\n      case DateRangeType.Before:\n        if (dateInMs < dRanges[0].getTime()) {\n          return true;\n        }\n\n        break;\n      case DateRangeType.Between: {\n        const dRange = dRanges.map((d) => d.getTime());\n        const min = Math.min(dRange[0], dRange[1]);\n        const max = Math.max(dRange[0], dRange[1]);\n        if (dateInMs >= min && dateInMs <= max) {\n          return true;\n        }\n\n        break;\n      }\n      case DateRangeType.Specific: {\n        const datesInMs = dRanges.map((d) => d.getTime());\n        for (const specificDateInMs of datesInMs) {\n          if (dateInMs === specificDateInMs) {\n            return true;\n          }\n        }\n\n        break;\n      }\n      case DateRangeType.Weekdays: {\n        const day = date.getDay();\n        if (day % 6 !== 0) {\n          return true;\n        }\n\n        break;\n      }\n      case DateRangeType.Weekends: {\n        const weekday = date.getDay();\n        if (weekday % 6 === 0) {\n          return true;\n        }\n\n        break;\n      }\n      default:\n        return false;\n    }\n  }\n\n  return false;\n};\n\n/* blazorSuppress */\nexport interface ICalendarDate {\n  date: Date;\n  isCurrentMonth: boolean;\n  isPrevMonth: boolean;\n  isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n  value: string;\n  literal?: string;\n  combined: string;\n}\n\nexport interface IFormattingViews {\n  day?: boolean;\n  month?: boolean;\n  year?: boolean;\n}\n\nexport type WeekDays =\n  | 'sunday'\n  | 'monday'\n  | 'tuesday'\n  | 'wednesday'\n  | 'thursday'\n  | 'friday'\n  | 'saturday';\n\nexport enum WEEKDAYS {\n  SUNDAY = 0,\n  MONDAY = 1,\n  TUESDAY = 2,\n  WEDNESDAY = 3,\n  THURSDAY = 4,\n  FRIDAY = 5,\n  SATURDAY = 6,\n}\n\nexport class Calendar {\n  private _firstWeekDay: number | WEEKDAYS;\n\n  constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n    this._firstWeekDay = firstWeekDay;\n  }\n\n  /** Gets the starting day of the week. */\n  public get firstWeekDay(): number {\n    return this._firstWeekDay % 7;\n  }\n\n  /** Sets the starting day of the week. */\n  public set firstWeekDay(value: number) {\n    this._firstWeekDay = value;\n  }\n\n  /**\n   * Returns an array of weekdays for one week starting\n   * with the currently set `firstWeekDay`\n   *\n   * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n   * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n   *\n   * @returns\n   *\n   * @memberof Calendar\n   */\n  public weekdays(): number[] {\n    const res = [];\n    for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n      res.push(i % 7);\n    }\n    return res;\n  }\n\n  /**\n   * Returns the date values for one month. It will always iterate throught\n   * complete weeks, so it will contain dates outside the specified month.\n   *\n   * @param year\n   * @param month\n   * @param boolean\n   * @returns\n   *\n   * @memberof Calendar\n   */\n  public monthdates(\n    year: number,\n    month: number,\n    extraWeek = false\n  ): ICalendarDate[] {\n    let date = new Date(year, month, 1);\n    let days = (date.getDay() - this.firstWeekDay) % 7;\n    if (days < 0) {\n      days = 7 - Math.abs(days);\n    }\n    date = this.timedelta(date, TimeDeltaInterval.Day, -days);\n    const res = [];\n    let value: ICalendarDate;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      value = this.generateICalendarDate(date, year, month);\n      res.push(value);\n\n      date = this.timedelta(date, TimeDeltaInterval.Day, 1);\n\n      if (date.getMonth() !== month && date.getDay() === this.firstWeekDay) {\n        if (extraWeek && res.length <= 35) {\n          for (const _ of range(0, 7)) {\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n            date = this.timedelta(date, TimeDeltaInterval.Day, 1);\n          }\n        }\n        break;\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Returns a matrix (array of arrays) representing a month's calendar.\n   * Each row represents a full week; week entries are ICalendarDate objects.\n   *\n   * @param year\n   * @param month\n   * @returns\n   *\n   * @memberof Calendar\n   */\n  public monthdatescalendar(\n    year: number,\n    month: number,\n    extraWeek = false\n  ): ICalendarDate[][] {\n    const dates = this.monthdates(year, month, extraWeek);\n    const res = [];\n    for (const i of range(0, dates.length, 7)) {\n      res.push(dates.slice(i, i + 7));\n    }\n    return res;\n  }\n\n  public timedelta(\n    date: Date,\n    interval: TimeDeltaInterval,\n    units: number\n  ): Date {\n    const ret = new Date(date);\n\n    const checkRollover = () => {\n      if (ret.getDate() !== date.getDate()) {\n        ret.setDate(0);\n      }\n    };\n\n    switch (interval) {\n      case TimeDeltaInterval.Year:\n        ret.setFullYear(ret.getFullYear() + units);\n        checkRollover();\n        break;\n      case TimeDeltaInterval.Quarter:\n        ret.setMonth(ret.getMonth() + 3 * units);\n        checkRollover();\n        break;\n      case TimeDeltaInterval.Month:\n        ret.setMonth(ret.getMonth() + units);\n        checkRollover();\n        break;\n      case TimeDeltaInterval.Week:\n        ret.setDate(ret.getDate() + 7 * units);\n        break;\n      case TimeDeltaInterval.Day:\n        ret.setDate(ret.getDate() + units);\n        break;\n      case TimeDeltaInterval.Hour:\n        ret.setTime(ret.getTime() + units * 3600000);\n        break;\n      case TimeDeltaInterval.Minute:\n        ret.setTime(ret.getTime() + units * 60000);\n        break;\n      case TimeDeltaInterval.Second:\n        ret.setTime(ret.getTime() + units * 1000);\n        break;\n      default:\n        throw new Error('Invalid interval specifier');\n    }\n    return ret;\n  }\n\n  /** Gets the same date the month after. */\n  public getNextMonth(date: Date) {\n    return this.timedelta(date, TimeDeltaInterval.Month, 1);\n  }\n\n  /** Gets the same date the month prior. */\n  public getPrevMonth(date: Date) {\n    return this.timedelta(date, TimeDeltaInterval.Month, -1);\n  }\n\n  /** Gets the same date the year after. */\n  public getNextYear(date: Date) {\n    return this.timedelta(date, TimeDeltaInterval.Year, 1);\n  }\n\n  /** Gets the same date the year prior. */\n  public getPrevYear(date: Date) {\n    return this.timedelta(date, TimeDeltaInterval.Year, -1);\n  }\n\n  /** Gets the week number of a given date. */\n  public getWeekNumber(date: Date) {\n    const firstJan = new Date(date.getFullYear(), 0, 1).getTime();\n    const today = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate()\n    ).getTime();\n    const dayInMilSeconds = 86400000;\n    const dayOfYear = (today - firstJan + 1) / dayInMilSeconds;\n    return Math.ceil(dayOfYear / 7);\n  }\n\n  private generateICalendarDate(\n    date: Date,\n    year: number,\n    month: number\n  ): ICalendarDate {\n    return {\n      date,\n      isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n      isNextMonth: this.isNextMonth(date, year, month),\n      isPrevMonth: this.isPreviousMonth(date, year, month),\n    };\n  }\n\n  private isPreviousMonth(date: Date, year: number, month: number): boolean {\n    if (date.getFullYear() === year) {\n      return date.getMonth() < month;\n    }\n    return date.getFullYear() < year;\n  }\n\n  private isNextMonth(date: Date, year: number, month: number): boolean {\n    if (date.getFullYear() === year) {\n      return date.getMonth() > month;\n    }\n\n    return date.getFullYear() > year;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}