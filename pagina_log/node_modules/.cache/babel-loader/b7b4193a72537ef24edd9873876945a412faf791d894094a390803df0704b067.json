{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html, nothing, svg } from 'lit';\nimport { queryAssignedElements } from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { asPercent, partNameMap } from '../common/util.js';\nimport { IgcProgressBaseComponent } from './base.js';\nimport { styles } from './themes/circular/circular.progress.base.css.js';\nimport { styles as bootstrap } from './themes/circular/circular.progress.bootstrap.css.js';\nimport { styles as fluent } from './themes/circular/circular.progress.fluent.css.js';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { defineComponents } from '../common/definitions/defineComponents.js';\nimport IgcCircularGradientComponent from './circular-gradient.js';\ndefineComponents(IgcCircularGradientComponent);\nlet IgcCircularProgressComponent = class IgcCircularProgressComponent extends IgcProgressBaseComponent {\n  constructor() {\n    super(...arguments);\n    this.gradientId = Date.now().toString(16);\n  }\n  get stroke() {\n    return {\n      stroke: `url(#${this.gradientId})`,\n      '--percentage': (asPercent(this.value, this.max) / 100).toString(),\n      '--duration': this.animationDuration + 'ms'\n    };\n  }\n  get svgParts() {\n    return {\n      indeterminate: this.indeterminate\n    };\n  }\n  gradientChange() {\n    this.requestUpdate();\n  }\n  renderSvg() {\n    return svg`\n      <circle part=\"track ${partNameMap(this.svgParts)}\"/>\n      <circle style=\"${styleMap(this.stroke)}\" part=\"fill\"/>\n\n      <defs>\n          <linearGradient id=${this.gradientId} gradientTransform=\"rotate(90)\">\n          ${when(this.gradientElements.length, () => this.gradientElements.map(el => {\n      return svg`<stop offset=${el.offset} stop-color=${el.color} stop-opacity=${el.opacity}/>`;\n    }), () => svg`\n              <stop offset=\"0%\" part=\"gradient_start\" />\n              <stop offset=\"100%\" part=\"gradient_end\" />\n          `)}\n          </linearGradient>\n      </defs>\n    `;\n  }\n  renderWrapper() {\n    return html`\n      <svg\n        part=\"svg ${partNameMap(this.svgParts)}\"\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax=${this.max}\n        aria-valuenow=${this.indeterminate ? nothing : this.value}\n      >\n        ${this.renderSvg()}\n      </svg>\n      <slot name=\"gradient\" @slotchange=${this.gradientChange}></slot>\n      ${this.renderDefaultSlot()}\n    `;\n  }\n  render() {\n    return this.renderWrapper();\n  }\n};\nIgcCircularProgressComponent.tagName = 'igc-circular-progress';\nIgcCircularProgressComponent.styles = styles;\n__decorate([queryAssignedElements({\n  slot: 'gradient'\n})], IgcCircularProgressComponent.prototype, \"gradientElements\", void 0);\nIgcCircularProgressComponent = __decorate([themes({\n  bootstrap,\n  fluent\n})], IgcCircularProgressComponent);\nexport default IgcCircularProgressComponent;","map":{"version":3,"names":["html","nothing","svg","queryAssignedElements","when","styleMap","asPercent","partNameMap","IgcProgressBaseComponent","styles","bootstrap","fluent","themes","defineComponents","IgcCircularGradientComponent","IgcCircularProgressComponent","constructor","gradientId","Date","now","toString","stroke","value","max","animationDuration","svgParts","indeterminate","gradientChange","requestUpdate","renderSvg","gradientElements","length","map","el","offset","color","opacity","renderWrapper","renderDefaultSlot","render","tagName","__decorate","slot"],"sources":["../../../src/components/progress/circular-progress.ts"],"sourcesContent":["import { html, nothing, svg } from 'lit';\nimport { queryAssignedElements } from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { asPercent, partNameMap } from '../common/util.js';\nimport { IgcProgressBaseComponent } from './base.js';\nimport { styles } from './themes/circular/circular.progress.base.css.js';\nimport { styles as bootstrap } from './themes/circular/circular.progress.bootstrap.css.js';\nimport { styles as fluent } from './themes/circular/circular.progress.fluent.css.js';\nimport { themes } from '../../theming/theming-decorator.js';\n\nimport { defineComponents } from '../common/definitions/defineComponents.js';\nimport IgcCircularGradientComponent from './circular-gradient.js';\n\ndefineComponents(IgcCircularGradientComponent);\n\n/**\n * A circular progress indicator used to express unspecified wait time or display\n * the length of a process.\n *\n * @element igc-circular-progress\n *\n * @slot - The text area container.\n * @slot gradient - Customize the progress bar in order to use a color gradient instead of a solid color. Accepts `igc-circular-gradient` elements.\n *\n * @csspart svg\n * @csspart gradient_start\n * @csspart gradient_end\n * @csspart track\n * @csspart fill\n * @csspart label\n * @csspart value\n * @csspart indeterminate\n * @csspart primary\n * @csspart danger\n * @csspart warning\n * @csspart info\n * @csspart success\n */\n\n@themes({ bootstrap, fluent })\nexport default class IgcCircularProgressComponent extends IgcProgressBaseComponent {\n  public static readonly tagName = 'igc-circular-progress';\n  public static override styles = styles;\n\n  protected gradientId = Date.now().toString(16);\n\n  @queryAssignedElements({ slot: 'gradient' })\n  protected gradientElements!: Array<IgcCircularGradientComponent>;\n\n  protected get stroke() {\n    return {\n      stroke: `url(#${this.gradientId})`,\n      '--percentage': (asPercent(this.value, this.max) / 100).toString(),\n      '--duration': this.animationDuration + 'ms',\n    };\n  }\n\n  protected get svgParts() {\n    return {\n      indeterminate: this.indeterminate,\n    };\n  }\n\n  private gradientChange() {\n    this.requestUpdate();\n  }\n\n  protected renderSvg() {\n    return svg`\n      <circle part=\"track ${partNameMap(this.svgParts)}\"/>\n      <circle style=\"${styleMap(this.stroke)}\" part=\"fill\"/>\n\n      <defs>\n          <linearGradient id=${this.gradientId} gradientTransform=\"rotate(90)\">\n          ${when(\n            this.gradientElements.length,\n            () =>\n              this.gradientElements.map((el: IgcCircularGradientComponent) => {\n                return svg`<stop offset=${el.offset} stop-color=${el.color} stop-opacity=${el.opacity}/>`;\n              }),\n            () => svg`\n              <stop offset=\"0%\" part=\"gradient_start\" />\n              <stop offset=\"100%\" part=\"gradient_end\" />\n          `\n          )}\n          </linearGradient>\n      </defs>\n    `;\n  }\n\n  protected renderWrapper() {\n    return html`\n      <svg\n        part=\"svg ${partNameMap(this.svgParts)}\"\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax=${this.max}\n        aria-valuenow=${this.indeterminate ? nothing : this.value}\n      >\n        ${this.renderSvg()}\n      </svg>\n      <slot name=\"gradient\" @slotchange=${this.gradientChange}></slot>\n      ${this.renderDefaultSlot()}\n    `;\n  }\n\n  protected override render() {\n    return this.renderWrapper();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-circular-progress': IgcCircularProgressComponent;\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAASA,IAAI,EAAEC,OAAO,EAAEC,GAAG,QAAQ,KAAK;AACxC,SAASC,qBAAqB,QAAQ,mBAAmB;AACzD,SAASC,IAAI,QAAQ,wBAAwB;AAC7C,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,SAAS,EAAEC,WAAW,QAAQ,mBAAmB;AAC1D,SAASC,wBAAwB,QAAQ,WAAW;AACpD,SAASC,MAAM,QAAQ,iDAAiD;AACxE,SAASA,MAAM,IAAIC,SAAS,QAAQ,sDAAsD;AAC1F,SAASD,MAAM,IAAIE,MAAM,QAAQ,mDAAmD;AACpF,SAASC,MAAM,QAAQ,oCAAoC;AAE3D,SAASC,gBAAgB,QAAQ,2CAA2C;AAC5E,OAAOC,4BAA4B,MAAM,wBAAwB;AAEjED,gBAAgB,CAACC,4BAA4B,CAAC;AA2B/B,IAAMC,4BAA4B,GAAlC,MAAMA,4BAA6B,SAAQP,wBAAwB;EAAnEQ,YAAA;;IAIH,KAAAC,UAAU,GAAGC,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC;EAiEhD;EA5DE,IAAcC,MAAMA,CAAA;IAClB,OAAO;MACLA,MAAM,EAAE,QAAQ,IAAI,CAACJ,UAAU,GAAG;MAClC,cAAc,EAAE,CAACX,SAAS,CAAC,IAAI,CAACgB,KAAK,EAAE,IAAI,CAACC,GAAG,CAAC,GAAG,GAAG,EAAEH,QAAQ,EAAE;MAClE,YAAY,EAAE,IAAI,CAACI,iBAAiB,GAAG;KACxC;EACH;EAEA,IAAcC,QAAQA,CAAA;IACpB,OAAO;MACLC,aAAa,EAAE,IAAI,CAACA;KACrB;EACH;EAEQC,cAAcA,CAAA;IACpB,IAAI,CAACC,aAAa,EAAE;EACtB;EAEUC,SAASA,CAAA;IACjB,OAAO3B,GAAG;4BACcK,WAAW,CAAC,IAAI,CAACkB,QAAQ,CAAC;uBAC/BpB,QAAQ,CAAC,IAAI,CAACgB,MAAM,CAAC;;;+BAGb,IAAI,CAACJ,UAAU;YAClCb,IAAI,CACJ,IAAI,CAAC0B,gBAAgB,CAACC,MAAM,EAC5B,MACE,IAAI,CAACD,gBAAgB,CAACE,GAAG,CAAEC,EAAgC,IAAI;MAC7D,OAAO/B,GAAG,gBAAgB+B,EAAE,CAACC,MAAM,eAAeD,EAAE,CAACE,KAAK,iBAAiBF,EAAE,CAACG,OAAO,IAAI;IAC3F,CAAC,CAAC,EACJ,MAAMlC,GAAG;;;WAGV,CACA;;;KAGN;EACH;EAEUmC,aAAaA,CAAA;IACrB,OAAOrC,IAAI;;oBAEKO,WAAW,CAAC,IAAI,CAACkB,QAAQ,CAAC;;;wBAGtB,IAAI,CAACF,GAAG;wBACR,IAAI,CAACG,aAAa,GAAGzB,OAAO,GAAG,IAAI,CAACqB,KAAK;;UAEvD,IAAI,CAACO,SAAS,EAAE;;0CAEgB,IAAI,CAACF,cAAc;QACrD,IAAI,CAACW,iBAAiB,EAAE;KAC3B;EACH;EAEmBC,MAAMA,CAAA;IACvB,OAAO,IAAI,CAACF,aAAa,EAAE;EAC7B;;AAnEuBtB,4BAAA,CAAAyB,OAAO,GAAG,uBAAuB;AACjCzB,4BAAA,CAAAN,MAAM,GAAGA,MAAM;AAKtCgC,UAAA,EADCtC,qBAAqB,CAAC;EAAEuC,IAAI,EAAE;AAAU,CAAE,CAAC,C,qEACqB;AAP9C3B,4BAA4B,GAAA0B,UAAA,EADhD7B,MAAM,CAAC;EAAEF,SAAS;EAAEC;AAAM,CAAE,CAAC,C,EACTI,4BAA4B,CAqEhD;eArEoBA,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}