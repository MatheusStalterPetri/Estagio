{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { property, state } from 'lit/decorators.js';\nimport { blazorDeepImport } from '../common/decorators/blazorDeepImport.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\nimport { IgcInputBaseComponent } from '../input/input-base.js';\nimport { MaskParser } from './mask-parser.js';\nlet IgcMaskInputBaseComponent = class IgcMaskInputBaseComponent extends IgcInputBaseComponent {\n  constructor() {\n    super(...arguments);\n    this.parser = new MaskParser();\n    this.selection = {\n      start: 0,\n      end: 0\n    };\n    this.compositionStart = 0;\n    this.hasFocus = false;\n    this.maskedValue = '';\n    this._mask = '';\n    this.invalid = false;\n  }\n  get inputSelection() {\n    return {\n      start: this.input.selectionStart || 0,\n      end: this.input.selectionEnd || 0\n    };\n  }\n  get emptyMask() {\n    return this.parser.apply();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this._mask = this._mask || this.parser.mask;\n    this.prompt = this.prompt || this.parser.prompt;\n  }\n  setCustomValidity(message) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n  select() {\n    this.input.select();\n  }\n  handleInput({\n    inputType,\n    isComposing\n  }) {\n    const EMPTY = '';\n    const value = this.input.value;\n    const {\n      start,\n      end\n    } = this.selection;\n    const deleteEnd = this.parser.getNextNonLiteralPosition(end) + 1;\n    switch (inputType) {\n      case 'deleteContentForward':\n        this.updateInput(EMPTY, {\n          start,\n          end: deleteEnd\n        });\n        return this.updateComplete.then(() => this.input.setSelectionRange(deleteEnd, deleteEnd));\n      case 'deleteContentBackward':\n        if (isComposing) return;\n        return this.updateInput(EMPTY, {\n          start: this.parser.getPreviousNonLiteralPosition(this.inputSelection.start),\n          end\n        });\n      case 'deleteByCut':\n        return this.updateInput(EMPTY, this.selection);\n      case 'insertText':\n        return this.updateInput(value.substring(start, this.inputSelection.end), this.selection);\n      case 'insertFromPaste':\n        return this.updateInput(value.substring(start, this.inputSelection.end), {\n          start,\n          end: this.inputSelection.start\n        });\n      case 'insertFromDrop':\n        return this.updateInput(value.substring(this.inputSelection.start, this.inputSelection.end), {\n          ...this.inputSelection\n        });\n    }\n  }\n  handleKeydown({\n    key\n  }) {\n    if (!key) {\n      return;\n    }\n    this.selection = this.inputSelection;\n  }\n  handleCut() {\n    this.selection = this.inputSelection;\n  }\n  handleDragStart() {\n    this.selection = this.inputSelection;\n  }\n  handleCompositionStart() {\n    this.compositionStart = this.inputSelection.start;\n  }\n  handleCompositionEnd({\n    data\n  }) {\n    this.updateInput(data, {\n      start: this.compositionStart,\n      end: this.inputSelection.end\n    });\n  }\n  handleInvalid() {\n    this.invalid = true;\n  }\n  setSelectionRange(start, end, direction) {\n    super.setSelectionRange(start, end, direction);\n    this.selection = {\n      start,\n      end\n    };\n  }\n};\n__decorate([state()], IgcMaskInputBaseComponent.prototype, \"hasFocus\", void 0);\n__decorate([state()], IgcMaskInputBaseComponent.prototype, \"maskedValue\", void 0);\n__decorate([state()], IgcMaskInputBaseComponent.prototype, \"_mask\", void 0);\n__decorate([property()], IgcMaskInputBaseComponent.prototype, \"prompt\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Boolean\n})], IgcMaskInputBaseComponent.prototype, \"invalid\", void 0);\n__decorate([blazorSuppress()], IgcMaskInputBaseComponent.prototype, \"setSelectionRange\", null);\nIgcMaskInputBaseComponent = __decorate([blazorDeepImport], IgcMaskInputBaseComponent);\nexport { IgcMaskInputBaseComponent };","map":{"version":3,"names":["property","state","blazorDeepImport","blazorSuppress","IgcInputBaseComponent","MaskParser","IgcMaskInputBaseComponent","constructor","parser","selection","start","end","compositionStart","hasFocus","maskedValue","_mask","invalid","inputSelection","input","selectionStart","selectionEnd","emptyMask","apply","connectedCallback","mask","prompt","setCustomValidity","message","checkValidity","select","handleInput","inputType","isComposing","EMPTY","value","deleteEnd","getNextNonLiteralPosition","updateInput","updateComplete","then","setSelectionRange","getPreviousNonLiteralPosition","substring","handleKeydown","key","handleCut","handleDragStart","handleCompositionStart","handleCompositionEnd","data","handleInvalid","direction","__decorate","reflect","type","Boolean"],"sources":["../../../src/components/mask-input/mask-input-base.ts"],"sourcesContent":["import { property, state } from 'lit/decorators.js';\nimport { blazorDeepImport } from '../common/decorators/blazorDeepImport.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\nimport { IgcInputBaseComponent } from '../input/input-base.js';\nimport { MaskParser } from './mask-parser.js';\n\nexport type MaskRange = {\n  start: number;\n  end: number;\n};\n\n@blazorDeepImport\nexport abstract class IgcMaskInputBaseComponent extends IgcInputBaseComponent {\n  protected parser = new MaskParser();\n  protected selection: MaskRange = { start: 0, end: 0 };\n  protected compositionStart = 0;\n\n  @state()\n  protected hasFocus = false;\n\n  @state()\n  protected maskedValue = '';\n\n  @state()\n  protected _mask = '';\n\n  /** The prompt symbol to use for unfilled parts of the mask. */\n  @property()\n  public prompt!: string;\n\n  /** Controls the validity of the control. */\n  @property({ reflect: true, type: Boolean })\n  public invalid = false;\n\n  protected get inputSelection(): MaskRange {\n    return {\n      start: this.input.selectionStart || 0,\n      end: this.input.selectionEnd || 0,\n    };\n  }\n\n  protected get emptyMask(): string {\n    return this.parser.apply();\n  }\n\n  public override connectedCallback() {\n    super.connectedCallback();\n\n    this._mask = this._mask || this.parser.mask;\n    this.prompt = this.prompt || this.parser.prompt;\n  }\n\n  /**\n   * Sets a custom validation message for the control.\n   * As long as `message` is not empty, the control is considered invalid.\n   */\n  public setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  /** Selects all text within the input. */\n  public select() {\n    this.input.select();\n  }\n\n  protected handleInput({ inputType, isComposing }: InputEvent) {\n    const EMPTY = '';\n    const value = this.input.value;\n    const { start, end } = this.selection;\n    const deleteEnd = this.parser.getNextNonLiteralPosition(end) + 1;\n\n    switch (inputType) {\n      case 'deleteContentForward':\n        this.updateInput(EMPTY, { start, end: deleteEnd });\n        return this.updateComplete.then(() =>\n          this.input.setSelectionRange(deleteEnd, deleteEnd)\n        );\n\n      case 'deleteContentBackward':\n        if (isComposing) return;\n        return this.updateInput(EMPTY, {\n          start: this.parser.getPreviousNonLiteralPosition(\n            this.inputSelection.start\n          ),\n          end,\n        });\n\n      case 'deleteByCut':\n        return this.updateInput(EMPTY, this.selection);\n\n      case 'insertText':\n        return this.updateInput(\n          value.substring(start, this.inputSelection.end),\n          this.selection\n        );\n\n      case 'insertFromPaste':\n        return this.updateInput(\n          value.substring(start, this.inputSelection.end),\n          {\n            start,\n            end: this.inputSelection.start,\n          }\n        );\n\n      case 'insertFromDrop':\n        return this.updateInput(\n          value.substring(this.inputSelection.start, this.inputSelection.end),\n          { ...this.inputSelection }\n        );\n    }\n  }\n\n  protected handleKeydown({ key }: KeyboardEvent) {\n    if (!key) {\n      return;\n    }\n    this.selection = this.inputSelection;\n  }\n\n  protected handleCut() {\n    this.selection = this.inputSelection;\n  }\n\n  protected handleDragStart() {\n    this.selection = this.inputSelection;\n  }\n\n  protected handleCompositionStart() {\n    this.compositionStart = this.inputSelection.start;\n  }\n\n  protected handleCompositionEnd({ data }: CompositionEvent) {\n    this.updateInput(data, {\n      start: this.compositionStart,\n      end: this.inputSelection.end,\n    });\n  }\n\n  protected handleInvalid() {\n    this.invalid = true;\n  }\n\n  @blazorSuppress()\n  public override setSelectionRange(\n    start: number,\n    end: number,\n    direction?: 'backward' | 'forward' | 'none'\n  ): void {\n    super.setSelectionRange(start, end, direction);\n    this.selection = { start, end };\n  }\n\n  protected abstract updateInput(string: string, range: MaskRange): void;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}