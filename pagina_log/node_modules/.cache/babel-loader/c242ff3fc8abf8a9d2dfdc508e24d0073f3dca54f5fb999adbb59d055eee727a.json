{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html, LitElement, nothing } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { styles } from './themes/light/snackbar.base.css.js';\nimport { styles as bootstrap } from './themes/light/snackbar.bootstrap.css.js';\nimport { styles as fluent } from './themes/light/snackbar.fluent.css.js';\nimport { styles as indigo } from './themes/light/snackbar.indigo.css.js';\nimport { defineComponents } from '../common/definitions/defineComponents.js';\nimport IgcButtonComponent from '../button/button.js';\ndefineComponents(IgcButtonComponent);\nlet IgcSnackbarComponent = class IgcSnackbarComponent extends EventEmitterMixin(LitElement) {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.displayTime = 4000;\n    this.keepOpen = false;\n  }\n  show() {\n    if (this.open) {\n      return;\n    }\n    this.open = true;\n    clearTimeout(this.autoHideTimeout);\n    if (this.open && !this.keepOpen) {\n      this.autoHideTimeout = window.setTimeout(() => this.hide(), this.displayTime);\n    }\n  }\n  hide() {\n    if (!this.open) {\n      return;\n    }\n    this.open = false;\n    clearTimeout(this.autoHideTimeout);\n  }\n  toggle() {\n    this.open ? this.hide() : this.show();\n  }\n  handleClick() {\n    this.emitEvent('igcAction');\n  }\n  render() {\n    return html`\n      <div part=\"base\">\n        <span part=\"message\">\n          <slot></slot>\n        </span>\n        ${this.actionText ? html`\n              <igc-button\n                variant=\"flat\"\n                part=\"action\"\n                size=\"small\"\n                @click=${this.handleClick}\n              >\n                ${ifDefined(this.actionText)}\n              </igc-button>\n            ` : nothing}\n      </div>\n    `;\n  }\n};\nIgcSnackbarComponent.tagName = 'igc-snackbar';\nIgcSnackbarComponent.styles = styles;\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], IgcSnackbarComponent.prototype, \"open\", void 0);\n__decorate([property({\n  type: Number,\n  attribute: 'display-time'\n})], IgcSnackbarComponent.prototype, \"displayTime\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'keep-open'\n})], IgcSnackbarComponent.prototype, \"keepOpen\", void 0);\n__decorate([property({\n  attribute: 'action-text'\n})], IgcSnackbarComponent.prototype, \"actionText\", void 0);\nIgcSnackbarComponent = __decorate([themes({\n  bootstrap,\n  fluent,\n  indigo\n})], IgcSnackbarComponent);\nexport default IgcSnackbarComponent;","map":{"version":3,"names":["html","LitElement","nothing","property","ifDefined","themes","EventEmitterMixin","styles","bootstrap","fluent","indigo","defineComponents","IgcButtonComponent","IgcSnackbarComponent","constructor","open","displayTime","keepOpen","show","clearTimeout","autoHideTimeout","window","setTimeout","hide","toggle","handleClick","emitEvent","render","actionText","tagName","__decorate","type","Boolean","reflect","Number","attribute"],"sources":["../../../src/components/snackbar/snackbar.ts"],"sourcesContent":["import { html, LitElement, nothing } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { themes } from '../../theming/theming-decorator.js';\n\nimport { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { styles } from './themes/light/snackbar.base.css.js';\nimport { styles as bootstrap } from './themes/light/snackbar.bootstrap.css.js';\nimport { styles as fluent } from './themes/light/snackbar.fluent.css.js';\nimport { styles as indigo } from './themes/light/snackbar.indigo.css.js';\n\nimport { defineComponents } from '../common/definitions/defineComponents.js';\nimport IgcButtonComponent from '../button/button.js';\n\ndefineComponents(IgcButtonComponent);\n\nexport interface IgcSnackbarEventMap {\n  igcAction: CustomEvent<void>;\n}\n\n/**\n * A snackbar component is used to provide feedback about an operation\n * by showing a brief message at the bottom of the screen.\n *\n * @element igc-snackbar\n *\n * @slot - Renders the snackbar content.\n *\n * @fires igcAction - Emitted when the snackbar action button is clicked.\n *\n * @csspart base - The base wrapper of the snackbar component.\n * @csspart message - The snackbar message.\n * @csspart action - The snackbar action button.\n */\n@themes({ bootstrap, fluent, indigo })\nexport default class IgcSnackbarComponent extends EventEmitterMixin<\n  IgcSnackbarEventMap,\n  Constructor<LitElement>\n>(LitElement) {\n  /** @private */\n  public static tagName = 'igc-snackbar';\n\n  /** @private */\n  public static styles = styles;\n\n  private autoHideTimeout!: number;\n\n  /**\n   * Determines whether the snackbar is opened.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public open = false;\n\n  /**\n   * Determines the duration in ms in which the snackbar will be visible.\n   * @attr display-time\n   */\n  @property({ type: Number, attribute: 'display-time' })\n  public displayTime = 4000;\n\n  /**\n   * Determines whether the snackbar should close after the displayTime is over.\n   * @attr keep-open\n   */\n  @property({ type: Boolean, attribute: 'keep-open' })\n  public keepOpen = false;\n\n  /**\n   * The snackbar action button.\n   * @attr action-text\n   */\n  @property({ attribute: 'action-text' })\n  public actionText!: string;\n\n  /** Opens the snackbar. */\n  public show() {\n    if (this.open) {\n      return;\n    }\n\n    this.open = true;\n\n    clearTimeout(this.autoHideTimeout);\n    if (this.open && !this.keepOpen) {\n      this.autoHideTimeout = window.setTimeout(\n        () => this.hide(),\n        this.displayTime\n      );\n    }\n  }\n\n  /** Closes the snackbar. */\n  public hide() {\n    if (!this.open) {\n      return;\n    }\n\n    this.open = false;\n    clearTimeout(this.autoHideTimeout);\n  }\n\n  /** Toggles the open state of the component. */\n  public toggle() {\n    this.open ? this.hide() : this.show();\n  }\n\n  private handleClick() {\n    this.emitEvent('igcAction');\n  }\n\n  protected override render() {\n    return html`\n      <div part=\"base\">\n        <span part=\"message\">\n          <slot></slot>\n        </span>\n        ${this.actionText\n          ? html`\n              <igc-button\n                variant=\"flat\"\n                part=\"action\"\n                size=\"small\"\n                @click=${this.handleClick}\n              >\n                ${ifDefined(this.actionText)}\n              </igc-button>\n            `\n          : nothing}\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-snackbar': IgcSnackbarComponent;\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAASA,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,KAAK;AAC/C,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,SAAS,QAAQ,8BAA8B;AACxD,SAASC,MAAM,QAAQ,oCAAoC;AAG3D,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,MAAM,QAAQ,qCAAqC;AAC5D,SAASA,MAAM,IAAIC,SAAS,QAAQ,0CAA0C;AAC9E,SAASD,MAAM,IAAIE,MAAM,QAAQ,uCAAuC;AACxE,SAASF,MAAM,IAAIG,MAAM,QAAQ,uCAAuC;AAExE,SAASC,gBAAgB,QAAQ,2CAA2C;AAC5E,OAAOC,kBAAkB,MAAM,qBAAqB;AAEpDD,gBAAgB,CAACC,kBAAkB,CAAC;AAqBrB,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAqB,SAAQP,iBAAiB,CAGjEL,UAAU,CAAC;EAHEa,YAAA;;IAiBN,KAAAC,IAAI,GAAG,KAAK;IAOZ,KAAAC,WAAW,GAAG,IAAI;IAOlB,KAAAC,QAAQ,GAAG,KAAK;EAkEzB;EAxDSC,IAAIA,CAAA;IACT,IAAI,IAAI,CAACH,IAAI,EAAE;MACb;;IAGF,IAAI,CAACA,IAAI,GAAG,IAAI;IAEhBI,YAAY,CAAC,IAAI,CAACC,eAAe,CAAC;IAClC,IAAI,IAAI,CAACL,IAAI,IAAI,CAAC,IAAI,CAACE,QAAQ,EAAE;MAC/B,IAAI,CAACG,eAAe,GAAGC,MAAM,CAACC,UAAU,CACtC,MAAM,IAAI,CAACC,IAAI,EAAE,EACjB,IAAI,CAACP,WAAW,CACjB;;EAEL;EAGOO,IAAIA,CAAA;IACT,IAAI,CAAC,IAAI,CAACR,IAAI,EAAE;MACd;;IAGF,IAAI,CAACA,IAAI,GAAG,KAAK;IACjBI,YAAY,CAAC,IAAI,CAACC,eAAe,CAAC;EACpC;EAGOI,MAAMA,CAAA;IACX,IAAI,CAACT,IAAI,GAAG,IAAI,CAACQ,IAAI,EAAE,GAAG,IAAI,CAACL,IAAI,EAAE;EACvC;EAEQO,WAAWA,CAAA;IACjB,IAAI,CAACC,SAAS,CAAC,WAAW,CAAC;EAC7B;EAEmBC,MAAMA,CAAA;IACvB,OAAO3B,IAAI;;;;;UAKL,IAAI,CAAC4B,UAAU,GACb5B,IAAI;;;;;yBAKS,IAAI,CAACyB,WAAW;;kBAEvBrB,SAAS,CAAC,IAAI,CAACwB,UAAU,CAAC;;aAE/B,GACD1B,OAAO;;KAEd;EACH;;AA3FcW,oBAAA,CAAAgB,OAAO,GAAG,cAAc;AAGxBhB,oBAAA,CAAAN,MAAM,GAAGA,MAAM;AAS7BuB,UAAA,EADC3B,QAAQ,CAAC;EAAE4B,IAAI,EAAEC,OAAO;EAAEC,OAAO,EAAE;AAAI,CAAE,CAAC,C,iDACvB;AAOpBH,UAAA,EADC3B,QAAQ,CAAC;EAAE4B,IAAI,EAAEG,MAAM;EAAEC,SAAS,EAAE;AAAc,CAAE,CAAC,C,wDAC5B;AAO1BL,UAAA,EADC3B,QAAQ,CAAC;EAAE4B,IAAI,EAAEC,OAAO;EAAEG,SAAS,EAAE;AAAW,CAAE,CAAC,C,qDAC5B;AAOxBL,UAAA,EADC3B,QAAQ,CAAC;EAAEgC,SAAS,EAAE;AAAa,CAAE,CAAC,C,uDACZ;AAtCRtB,oBAAoB,GAAAiB,UAAA,EADxCzB,MAAM,CAAC;EAAEG,SAAS;EAAEC,MAAM;EAAEC;AAAM,CAAE,CAAC,C,EACjBG,oBAAoB,CAiGxC;eAjGoBA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}