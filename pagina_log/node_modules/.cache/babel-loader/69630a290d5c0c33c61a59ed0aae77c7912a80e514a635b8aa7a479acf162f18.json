{"ast":null,"code":"export default class DataOperation {\n  resolveValue(record, key) {\n    return record[key];\n  }\n  resolveCase(value, caseSensitive) {\n    return typeof value === 'string' && !caseSensitive ? value.toLowerCase() : value;\n  }\n}","map":{"version":3,"names":["DataOperation","resolveValue","record","key","resolveCase","value","caseSensitive","toLowerCase"],"sources":["../../../src/operations/base.ts"],"sourcesContent":["import type { Keys } from '../internal/types.js';\n\nexport default abstract class DataOperation<T, K extends Keys<T> = Keys<T>> {\n  protected resolveValue(record: T, key: K) {\n    return record[key];\n  }\n\n  protected resolveCase<U = T[K]>(value: U, caseSensitive?: boolean) {\n    return typeof value === 'string' && !caseSensitive ? (value.toLowerCase() as U) : value;\n  }\n\n  public abstract apply(...args: unknown[]): T[];\n}\n"],"mappings":"AAEA,eAAc,MAAgBA,aAAa;EAC/BC,YAAYA,CAACC,MAAS,EAAEC,GAAM;IACtC,OAAOD,MAAM,CAACC,GAAG,CAAC;EACpB;EAEUC,WAAWA,CAAWC,KAAQ,EAAEC,aAAuB;IAC/D,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAI,CAACC,aAAa,GAAID,KAAK,CAACE,WAAW,EAAQ,GAAGF,KAAK;EACzF"},"metadata":{},"sourceType":"module","externalDependencies":[]}