{"ast":null,"code":"export default {\n  name: 'LogView',\n  data() {\n    return {\n      logEntries: []\n    };\n  },\n  created() {\n    this.loadLogEntries();\n  },\n  methods: {\n    async loadLogEntries() {\n      const response = await fetch('./logs/access.log');\n      const text = await response.text();\n      const lines = text.split('\\n').filter(line => !!line.trim());\n      this.logEntries = lines.map((line, index) => {\n        const [timestamp, ip, bytesSent, httpCode, request, url] = line.split(/\\s+/);\n        return {\n          id: index,\n          timestamp: new Date(timestamp).toLocaleString(),\n          ip,\n          bytesSent,\n          httpCode,\n          request,\n          url\n        };\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","logEntries","created","loadLogEntries","methods","response","fetch","text","lines","split","filter","line","trim","map","index","timestamp","ip","bytesSent","httpCode","request","url","id","Date","toLocaleString"],"sources":["C:\\Users\\mthss\\Documentos\\Projeto_estagio\\pagina_log\\src\\views\\LogView.vue"],"sourcesContent":["<template>\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>IP</th>\r\n        <th>Data e hora</th>\r\n        <th>Requisição</th>\r\n        <th>Código HTTP</th>\r\n        <th>Bytes enviados</th>\r\n        <th>URL</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr v-for=\"entry in logEntries\" :key=\"entry.id\">\r\n        <td>{{ entry.ip }}</td>\r\n        <td>{{ entry.timestamp }}</td>\r\n        <td>{{ entry.request }}</td>\r\n        <td>{{ entry.httpCode }}</td>\r\n        <td>{{ entry.bytesSent }}</td>\r\n        <td>{{ entry.url }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'LogView',\r\n  data() {\r\n    return {\r\n      logEntries: [],\r\n    };\r\n  },\r\n  created() {\r\n    this.loadLogEntries();\r\n  },\r\n  methods: {\r\n    async loadLogEntries() {\r\n      const response = await fetch('./logs/access.log');\r\n      const text = await response.text();\r\n      const lines = text.split('\\n').filter((line) => !!line.trim());\r\n\r\n      this.logEntries = lines.map((line, index) => {\r\n        const [timestamp, ip, bytesSent, httpCode, request, url] = line.split(/\\s+/);\r\n\r\n        return {\r\n          id: index,\r\n          timestamp: new Date(timestamp).toLocaleString(),\r\n          ip,\r\n          bytesSent,\r\n          httpCode,\r\n          request,\r\n          url,\r\n        };\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AA0BA,eAAe;EACbA,IAAI,EAAE,SAAS;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,EAAE;EACvB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,cAAcA,CAAA,EAAG;MACrB,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,mBAAmB,CAAC;MACjD,MAAMC,IAAG,GAAI,MAAMF,QAAQ,CAACE,IAAI,EAAE;MAClC,MAAMC,KAAI,GAAID,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAAEC,IAAI,IAAK,CAAC,CAACA,IAAI,CAACC,IAAI,EAAE,CAAC;MAE9D,IAAI,CAACX,UAAS,GAAIO,KAAK,CAACK,GAAG,CAAC,CAACF,IAAI,EAAEG,KAAK,KAAK;QAC3C,MAAM,CAACC,SAAS,EAAEC,EAAE,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,GAAG,IAAIT,IAAI,CAACF,KAAK,CAAC,KAAK,CAAC;QAE5E,OAAO;UACLY,EAAE,EAAEP,KAAK;UACTC,SAAS,EAAE,IAAIO,IAAI,CAACP,SAAS,CAAC,CAACQ,cAAc,EAAE;UAC/CP,EAAE;UACFC,SAAS;UACTC,QAAQ;UACRC,OAAO;UACPC;QACF,CAAC;MACH,CAAC,CAAC;IACJ;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}