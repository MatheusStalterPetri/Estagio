{"ast":null,"code":"var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ResizeController_instances, _ResizeController_maxSize;\nimport { html, nothing } from 'lit';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { MIN_COL_RESIZE_WIDTH } from '../internal/constants.js';\nexport class ResizeController {\n  constructor(host) {\n    this.host = host;\n    _ResizeController_instances.add(this);\n    this.indicatorActive = false;\n    this.indicatorOffset = 0;\n    this.host.addController(this);\n  }\n  /**\n   * Begins resizing a column by showing and positioning the resize indicator in relation to the column.\n   *\n   * @param header the\n   */\n  start(header) {\n    this.indicatorActive = true;\n    this.indicatorOffset = header.offsetLeft + header.offsetWidth;\n    this.host.requestUpdate();\n  }\n  /**\n   * Stops and resets the resizing state.\n   */\n  stop() {\n    this.indicatorActive = false;\n    this.host.requestUpdate();\n  }\n  resize(column, width, sizerOffset) {\n    if (sizerOffset) {\n      this.indicatorOffset = sizerOffset;\n    }\n    column.width = `${width}px`;\n    this.host.requestUpdate();\n  }\n  async autosize(column, header) {\n    column.width = `max-content`;\n    this.host.requestUpdate();\n    await this.host.updateComplete;\n    column.width = `${__classPrivateFieldGet(this, _ResizeController_instances, \"m\", _ResizeController_maxSize).call(this, column.key, header.offsetWidth)}px`;\n    this.host.requestUpdate();\n  }\n  hostConnected() {}\n  /**\n   * Renders the resize indicator in the grid.\n   */\n  renderIndicator() {\n    return this.indicatorActive ? html`<div\n          part=\"resize-indicator\"\n          style=${styleMap({\n      transform: `translateX(${this.indicatorOffset}px)`\n    })}\n        ></div>` : nothing;\n  }\n}\n_ResizeController_instances = new WeakSet(), _ResizeController_maxSize = function _ResizeController_maxSize(key, headerWidth) {\n  const max = this.host.rows.map(row => row.cells.find(cell => cell.column.key === key)).reduce((prev, current) => current.offsetWidth > prev ? current.offsetWidth : prev, 0);\n  return Math.max(...[MIN_COL_RESIZE_WIDTH, max, headerWidth]);\n};","map":{"version":3,"names":["html","nothing","styleMap","MIN_COL_RESIZE_WIDTH","ResizeController","constructor","host","indicatorActive","indicatorOffset","addController","start","header","offsetLeft","offsetWidth","requestUpdate","stop","resize","column","width","sizerOffset","autosize","updateComplete","__classPrivateFieldGet","_ResizeController_instances","_ResizeController_maxSize","call","key","hostConnected","renderIndicator","transform","headerWidth","max","rows","map","row","cells","find","cell","reduce","prev","current","Math"],"sources":["../../../src/controllers/resize.ts"],"sourcesContent":["import { html, nothing, ReactiveController } from 'lit';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport ApexGridHeader from '../components/header.js';\nimport { MIN_COL_RESIZE_WIDTH } from '../internal/constants.js';\nimport type { ColumnConfiguration, GridHost, Keys } from '../internal/types.js';\n\nexport class ResizeController<T extends object> implements ReactiveController {\n  constructor(protected host: GridHost<T>) {\n    this.host.addController(this);\n  }\n\n  public indicatorActive = false;\n  public indicatorOffset = 0;\n\n  #maxSize(key: Keys<T>, headerWidth: number) {\n    const max = this.host.rows\n      .map(row => row.cells.find(cell => cell.column.key === key)!)\n      .reduce((prev, current) => (current.offsetWidth > prev ? current.offsetWidth : prev), 0);\n\n    return Math.max(...[MIN_COL_RESIZE_WIDTH, max, headerWidth]);\n  }\n\n  /**\n   * Begins resizing a column by showing and positioning the resize indicator in relation to the column.\n   *\n   * @param header the\n   */\n  public start(header: ApexGridHeader<T>) {\n    this.indicatorActive = true;\n    this.indicatorOffset = header.offsetLeft + header.offsetWidth;\n    this.host.requestUpdate();\n  }\n\n  /**\n   * Stops and resets the resizing state.\n   */\n  public stop() {\n    this.indicatorActive = false;\n    this.host.requestUpdate();\n  }\n\n  public resize(column: ColumnConfiguration<T>, width: number, sizerOffset?: number) {\n    if (sizerOffset) {\n      this.indicatorOffset = sizerOffset;\n    }\n\n    column.width = `${width}px`;\n    this.host.requestUpdate();\n  }\n\n  public async autosize(column: ColumnConfiguration<T>, header: ApexGridHeader<T>) {\n    column.width = `max-content`;\n\n    this.host.requestUpdate();\n    await this.host.updateComplete;\n\n    column.width = `${this.#maxSize(column.key, header.offsetWidth)}px`;\n    this.host.requestUpdate();\n  }\n\n  public hostConnected() {}\n\n  /**\n   * Renders the resize indicator in the grid.\n   */\n  public renderIndicator() {\n    return this.indicatorActive\n      ? html`<div\n          part=\"resize-indicator\"\n          style=${styleMap({\n            transform: `translateX(${this.indicatorOffset}px)`,\n          })}\n        ></div>`\n      : nothing;\n  }\n}\n"],"mappings":";;;;;;AAAA,SAASA,IAAI,EAAEC,OAAO,QAA4B,KAAK;AACvD,SAASC,QAAQ,QAAQ,6BAA6B;AAEtD,SAASC,oBAAoB,QAAQ,0BAA0B;AAG/D,OAAM,MAAOC,gBAAgB;EAC3BC,YAAsBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;;IAInB,KAAAC,eAAe,GAAG,KAAK;IACvB,KAAAC,eAAe,GAAG,CAAC;IAJxB,IAAI,CAACF,IAAI,CAACG,aAAa,CAAC,IAAI,CAAC;EAC/B;EAaA;;;;;EAKOC,KAAKA,CAACC,MAAyB;IACpC,IAAI,CAACJ,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,eAAe,GAAGG,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;IAC7D,IAAI,CAACP,IAAI,CAACQ,aAAa,EAAE;EAC3B;EAEA;;;EAGOC,IAAIA,CAAA;IACT,IAAI,CAACR,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACD,IAAI,CAACQ,aAAa,EAAE;EAC3B;EAEOE,MAAMA,CAACC,MAA8B,EAAEC,KAAa,EAAEC,WAAoB;IAC/E,IAAIA,WAAW,EAAE;MACf,IAAI,CAACX,eAAe,GAAGW,WAAW;;IAGpCF,MAAM,CAACC,KAAK,GAAG,GAAGA,KAAK,IAAI;IAC3B,IAAI,CAACZ,IAAI,CAACQ,aAAa,EAAE;EAC3B;EAEO,MAAMM,QAAQA,CAACH,MAA8B,EAAEN,MAAyB;IAC7EM,MAAM,CAACC,KAAK,GAAG,aAAa;IAE5B,IAAI,CAACZ,IAAI,CAACQ,aAAa,EAAE;IACzB,MAAM,IAAI,CAACR,IAAI,CAACe,cAAc;IAE9BJ,MAAM,CAACC,KAAK,GAAG,GAAGI,sBAAA,KAAI,EAAAC,2BAAA,OAAAC,yBAAA,CAAS,CAAAC,IAAA,CAAb,IAAI,EAAUR,MAAM,CAACS,GAAG,EAAEf,MAAM,CAACE,WAAW,CAAC,IAAI;IACnE,IAAI,CAACP,IAAI,CAACQ,aAAa,EAAE;EAC3B;EAEOa,aAAaA,CAAA,GAAI;EAExB;;;EAGOC,eAAeA,CAAA;IACpB,OAAO,IAAI,CAACrB,eAAe,GACvBP,IAAI;;kBAEME,QAAQ,CAAC;MACf2B,SAAS,EAAE,cAAc,IAAI,CAACrB,eAAe;KAC9C,CAAC;gBACI,GACRP,OAAO;EACb;;4GA5DSyB,GAAY,EAAEI,WAAmB;EACxC,MAAMC,GAAG,GAAG,IAAI,CAACzB,IAAI,CAAC0B,IAAI,CACvBC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACpB,MAAM,CAACS,GAAG,KAAKA,GAAG,CAAE,CAAC,CAC5DY,MAAM,CAAC,CAACC,IAAI,EAAEC,OAAO,KAAMA,OAAO,CAAC3B,WAAW,GAAG0B,IAAI,GAAGC,OAAO,CAAC3B,WAAW,GAAG0B,IAAK,EAAE,CAAC,CAAC;EAE1F,OAAOE,IAAI,CAACV,GAAG,CAAC,GAAG,CAAC5B,oBAAoB,EAAE4B,GAAG,EAAED,WAAW,CAAC,CAAC;AAC9D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}