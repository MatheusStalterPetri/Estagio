{"ast":null,"code":"import { FilterExpressionTree } from './tree.js';\nexport class FilterState {\n  constructor() {\n    this.state = new Map();\n  }\n  get empty() {\n    return this.state.size < 1;\n  }\n  get keys() {\n    return Array.from(this.state.keys());\n  }\n  get values() {\n    return Array.from(this.state.values());\n  }\n  get ands() {\n    return this.values.map(each => each.ands).flat();\n  }\n  get ors() {\n    return this.values.map(each => each.ors).flat();\n  }\n  has(key) {\n    return this.state.has(key);\n  }\n  get(key) {\n    return this.state.get(key);\n  }\n  delete(key) {\n    return this.state.delete(key);\n  }\n  clear() {\n    this.state.clear();\n  }\n  set(expression) {\n    var _a;\n    if (this.has(expression.key)) {\n      (_a = this.get(expression.key)) === null || _a === void 0 ? void 0 : _a.add(expression);\n      return;\n    }\n    this.state.set(expression.key, new FilterExpressionTree(expression.key).add(expression));\n  }\n}","map":{"version":3,"names":["FilterExpressionTree","FilterState","constructor","state","Map","empty","size","keys","Array","from","values","ands","map","each","flat","ors","has","key","get","delete","clear","set","expression","_a","add"],"sources":["../../../../src/operations/filter/state.ts"],"sourcesContent":["import { FilterExpressionTree } from './tree.js';\nimport type { Keys } from '../../internal/types.js';\nimport type { FilterExpression } from './types.js';\n\nexport class FilterState<T> {\n  protected state: Map<Keys<T>, FilterExpressionTree<T>> = new Map();\n\n  public get empty() {\n    return this.state.size < 1;\n  }\n\n  public get keys() {\n    return Array.from(this.state.keys());\n  }\n\n  public get values() {\n    return Array.from(this.state.values());\n  }\n\n  public get ands() {\n    return this.values.map(each => each.ands).flat();\n  }\n\n  public get ors() {\n    return this.values.map(each => each.ors).flat();\n  }\n\n  public has(key: Keys<T>) {\n    return this.state.has(key);\n  }\n\n  public get(key: Keys<T>) {\n    return this.state.get(key);\n  }\n\n  public delete(key: Keys<T>) {\n    return this.state.delete(key);\n  }\n\n  public clear() {\n    this.state.clear();\n  }\n\n  public set(expression: FilterExpression<T>) {\n    if (this.has(expression.key)) {\n      this.get(expression.key)?.add(expression);\n      return;\n    }\n\n    this.state.set(expression.key, new FilterExpressionTree<T>(expression.key).add(expression));\n  }\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,WAAW;AAIhD,OAAM,MAAOC,WAAW;EAAxBC,YAAA;IACY,KAAAC,KAAK,GAA0C,IAAIC,GAAG,EAAE;EA8CpE;EA5CE,IAAWC,KAAKA,CAAA;IACd,OAAO,IAAI,CAACF,KAAK,CAACG,IAAI,GAAG,CAAC;EAC5B;EAEA,IAAWC,IAAIA,CAAA;IACb,OAAOC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACN,KAAK,CAACI,IAAI,EAAE,CAAC;EACtC;EAEA,IAAWG,MAAMA,CAAA;IACf,OAAOF,KAAK,CAACC,IAAI,CAAC,IAAI,CAACN,KAAK,CAACO,MAAM,EAAE,CAAC;EACxC;EAEA,IAAWC,IAAIA,CAAA;IACb,OAAO,IAAI,CAACD,MAAM,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACF,IAAI,CAAC,CAACG,IAAI,EAAE;EAClD;EAEA,IAAWC,GAAGA,CAAA;IACZ,OAAO,IAAI,CAACL,MAAM,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACE,GAAG,CAAC,CAACD,IAAI,EAAE;EACjD;EAEOE,GAAGA,CAACC,GAAY;IACrB,OAAO,IAAI,CAACd,KAAK,CAACa,GAAG,CAACC,GAAG,CAAC;EAC5B;EAEOC,GAAGA,CAACD,GAAY;IACrB,OAAO,IAAI,CAACd,KAAK,CAACe,GAAG,CAACD,GAAG,CAAC;EAC5B;EAEOE,MAAMA,CAACF,GAAY;IACxB,OAAO,IAAI,CAACd,KAAK,CAACgB,MAAM,CAACF,GAAG,CAAC;EAC/B;EAEOG,KAAKA,CAAA;IACV,IAAI,CAACjB,KAAK,CAACiB,KAAK,EAAE;EACpB;EAEOC,GAAGA,CAACC,UAA+B;;IACxC,IAAI,IAAI,CAACN,GAAG,CAACM,UAAU,CAACL,GAAG,CAAC,EAAE;MAC5B,CAAAM,EAAA,OAAI,CAACL,GAAG,CAACI,UAAU,CAACL,GAAG,CAAC,cAAAM,EAAA,uBAAAA,EAAA,CAAEC,GAAG,CAACF,UAAU,CAAC;MACzC;;IAGF,IAAI,CAACnB,KAAK,CAACkB,GAAG,CAACC,UAAU,CAACL,GAAG,EAAE,IAAIjB,oBAAoB,CAAIsB,UAAU,CAACL,GAAG,CAAC,CAACO,GAAG,CAACF,UAAU,CAAC,CAAC;EAC7F"},"metadata":{},"sourceType":"module","externalDependencies":[]}