{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar IgcSwitchComponent_1;\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { createCounter, partNameMap } from '../common/util.js';\nimport { IgcCheckboxBaseComponent } from './checkbox-base.js';\nimport { styles } from './themes/light/switch.base.css.js';\nimport { styles as bootstrap } from './themes/light/switch.bootstrap.css.js';\nimport { styles as fluent } from './themes/light/switch.fluent.css.js';\nimport { styles as indigo } from './themes/light/switch.indigo.css.js';\nimport { styles as material } from './themes/light/switch.material.css.js';\nlet IgcSwitchComponent = IgcSwitchComponent_1 = class IgcSwitchComponent extends IgcCheckboxBaseComponent {\n  constructor() {\n    super(...arguments);\n    this.inputId = `switch-${IgcSwitchComponent_1.increment()}`;\n    this.labelId = `switch-label-${this.inputId}`;\n  }\n  handleClick() {\n    this.checked = !this.checked;\n    this.emitEvent('igcChange', {\n      detail: this.checked\n    });\n  }\n  handleChange() {\n    this.invalid = !this.input.checkValidity();\n  }\n  render() {\n    return html`\n      <label\n        part=${partNameMap({\n      base: true,\n      checked: this.checked\n    })}\n        for=${this.inputId}\n        @pointerdown=${this.handleMouseDown}\n      >\n        <input\n          id=${this.inputId}\n          type=\"checkbox\"\n          name=${ifDefined(this.name)}\n          value=${ifDefined(this.value)}\n          .required=${this.required}\n          .disabled=${this.disabled}\n          .checked=${live(this.checked)}\n          aria-checked=${this.checked ? 'true' : 'false'}\n          aria-disabled=${this.disabled ? 'true' : 'false'}\n          aria-labelledby=${this.ariaLabelledby ? this.ariaLabelledby : this.labelId}\n          @click=${this.handleClick}\n          @blur=${this.handleBlur}\n          @focus=${this.handleFocus}\n        />\n        <span\n          part=${partNameMap({\n      control: true,\n      checked: this.checked,\n      focused: this.focused\n    })}\n        >\n          <span\n            part=${partNameMap({\n      thumb: true,\n      checked: this.checked\n    })}\n          ></span>\n        </span>\n        <span\n          .hidden=\"${this.hideLabel}\"\n          part=${partNameMap({\n      label: true,\n      checked: this.checked\n    })}\n          id=${this.labelId}\n        >\n          <slot></slot>\n        </span>\n      </label>\n    `;\n  }\n};\nIgcSwitchComponent.tagName = 'igc-switch';\nIgcSwitchComponent.styles = styles;\nIgcSwitchComponent.increment = createCounter();\n__decorate([watch('checked', {\n  waitUntilFirstUpdate: true\n})], IgcSwitchComponent.prototype, \"handleChange\", null);\nIgcSwitchComponent = IgcSwitchComponent_1 = __decorate([themes({\n  material,\n  bootstrap,\n  fluent,\n  indigo\n})], IgcSwitchComponent);\nexport default IgcSwitchComponent;","map":{"version":3,"names":["html","ifDefined","live","themes","watch","createCounter","partNameMap","IgcCheckboxBaseComponent","styles","bootstrap","fluent","indigo","material","IgcSwitchComponent","IgcSwitchComponent_1","constructor","inputId","increment","labelId","handleClick","checked","emitEvent","detail","handleChange","invalid","input","checkValidity","render","base","handleMouseDown","name","value","required","disabled","ariaLabelledby","handleBlur","handleFocus","control","focused","thumb","hideLabel","label","tagName","__decorate","waitUntilFirstUpdate"],"sources":["../../../src/components/checkbox/switch.ts"],"sourcesContent":["import { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { createCounter, partNameMap } from '../common/util.js';\nimport { IgcCheckboxBaseComponent } from './checkbox-base.js';\nimport { styles } from './themes/light/switch.base.css.js';\nimport { styles as bootstrap } from './themes/light/switch.bootstrap.css.js';\nimport { styles as fluent } from './themes/light/switch.fluent.css.js';\nimport { styles as indigo } from './themes/light/switch.indigo.css.js';\nimport { styles as material } from './themes/light/switch.material.css.js';\n\n/**\n * Similar to a checkbox, a switch controls the state of a single setting on or off.\n *\n * @element igc-switch\n *\n * @slot - The switch label.\n *\n * @fires igcChange - Emitted when the control's checked state changes.\n * @fires igcFocus - Emitted when the control gains focus.\n * @fires igcBlur - Emitted when the control loses focus.\n *\n * @csspart base - The base wrapper of the switch.\n * @csspart control - The switch control.\n * @csspart thumb - The position indicator of the switch.\n * @csspart label - The switch label.\n */\n@themes({ material, bootstrap, fluent, indigo })\nexport default class IgcSwitchComponent extends IgcCheckboxBaseComponent {\n  public static readonly tagName = 'igc-switch';\n  public static styles = styles;\n  private static readonly increment = createCounter();\n\n  private inputId = `switch-${IgcSwitchComponent.increment()}`;\n  private labelId = `switch-label-${this.inputId}`;\n\n  private handleClick() {\n    this.checked = !this.checked;\n    this.emitEvent('igcChange', { detail: this.checked });\n  }\n\n  @watch('checked', { waitUntilFirstUpdate: true })\n  protected handleChange() {\n    this.invalid = !this.input.checkValidity();\n  }\n\n  protected override render() {\n    return html`\n      <label\n        part=${partNameMap({ base: true, checked: this.checked })}\n        for=${this.inputId}\n        @pointerdown=${this.handleMouseDown}\n      >\n        <input\n          id=${this.inputId}\n          type=\"checkbox\"\n          name=${ifDefined(this.name)}\n          value=${ifDefined(this.value)}\n          .required=${this.required}\n          .disabled=${this.disabled}\n          .checked=${live(this.checked)}\n          aria-checked=${this.checked ? 'true' : 'false'}\n          aria-disabled=${this.disabled ? 'true' : 'false'}\n          aria-labelledby=${this.ariaLabelledby\n            ? this.ariaLabelledby\n            : this.labelId}\n          @click=${this.handleClick}\n          @blur=${this.handleBlur}\n          @focus=${this.handleFocus}\n        />\n        <span\n          part=${partNameMap({\n            control: true,\n            checked: this.checked,\n            focused: this.focused,\n          })}\n        >\n          <span\n            part=${partNameMap({ thumb: true, checked: this.checked })}\n          ></span>\n        </span>\n        <span\n          .hidden=\"${this.hideLabel}\"\n          part=${partNameMap({ label: true, checked: this.checked })}\n          id=${this.labelId}\n        >\n          <slot></slot>\n        </span>\n      </label>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-switch': IgcSwitchComponent;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}