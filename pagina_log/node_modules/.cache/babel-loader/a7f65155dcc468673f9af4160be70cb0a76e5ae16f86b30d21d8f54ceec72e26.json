{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property, queryAssignedElements } from 'lit/decorators.js';\nimport { styles } from './themes/accordion.base.css.js';\nimport { defineComponents } from '../common/definitions/defineComponents.js';\nimport IgcExpansionPanelComponent from '../expansion-panel/expansion-panel.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\ndefineComponents(IgcExpansionPanelComponent);\nexport default class IgcAccordionComponent extends LitElement {\n  get _enabledPanels() {\n    return this.panels.filter(p => !p.disabled);\n  }\n  constructor() {\n    super();\n    this.singleExpand = false;\n    this.handleKeydown = event => {\n      if (event.target.tagName.toLowerCase() !== 'igc-expansion-panel' || !this._enabledPanels.includes(event.target)) {\n        return;\n      }\n      switch (event.key.toLowerCase()) {\n        case 'home':\n          this.getPanelHeader(this._enabledPanels.at(0)).focus();\n          break;\n        case 'end':\n          this.getPanelHeader(this._enabledPanels.at(-1)).focus();\n          break;\n        case 'arrowup':\n        case 'up':\n          this.handleUpDownArrow(true, event);\n          break;\n        case 'arrowdown':\n        case 'down':\n          this.handleUpDownArrow(false, event);\n          break;\n      }\n    };\n    this.addEventListener('keydown', this.handleKeydown, {\n      capture: true\n    });\n    this.addEventListener('igcOpening', this.handlePanelOpening);\n  }\n  handlePanelOpening(event) {\n    const panel = event.target;\n    if (!this.singleExpand || !this.panels.includes(panel)) {\n      return;\n    }\n    this._enabledPanels.forEach(p => {\n      if (p.open && p !== panel) {\n        this.closePanel(p);\n      }\n    });\n  }\n  handleUpDownArrow(isUp, event) {\n    const focusedPanel = event.target;\n    if (!event.altKey) {\n      const next = this.getNextPanel(focusedPanel, isUp ? -1 : 1);\n      if (next === focusedPanel) {\n        return;\n      }\n      this.getPanelHeader(next).focus();\n    }\n    if (event.shiftKey && event.altKey) {\n      if (this.singleExpand && !isUp) {\n        this._enabledPanels.forEach(p => p !== focusedPanel ? this.closePanel(p) : this.openPanel(p));\n        return;\n      }\n      if (isUp) {\n        this._enabledPanels.forEach(p => this.closePanel(p));\n      } else {\n        this._enabledPanels.forEach(p => this.openPanel(p));\n      }\n    }\n  }\n  getNextPanel(panel, dir = 1) {\n    const panelIndex = this._enabledPanels.indexOf(panel);\n    return this._enabledPanels[panelIndex + dir] || panel;\n  }\n  getPanelHeader(panel) {\n    var _a;\n    return (_a = panel.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('div[part=\"header\"]');\n  }\n  async closePanel(panel) {\n    if (!panel.open) {\n      return;\n    }\n    if (!panel.emitEvent('igcClosing', {\n      cancelable: true,\n      detail: panel\n    })) {\n      return;\n    }\n    panel.hide();\n    await panel.updateComplete;\n    panel.emitEvent('igcClosed', {\n      detail: panel\n    });\n  }\n  async openPanel(panel) {\n    if (panel.open) {\n      return;\n    }\n    if (!panel.emitEvent('igcOpening', {\n      cancelable: true,\n      detail: panel\n    })) {\n      return;\n    }\n    panel.show();\n    await panel.updateComplete;\n    panel.emitEvent('igcOpened', {\n      detail: panel\n    });\n  }\n  hideAll() {\n    this.panels.forEach(p => p.hide());\n  }\n  showAll() {\n    this.panels.forEach(p => p.show());\n  }\n  render() {\n    return html`<slot></slot>`;\n  }\n}\nIgcAccordionComponent.tagName = 'igc-accordion';\nIgcAccordionComponent.styles = styles;\n__decorate([property({\n  attribute: 'single-expand',\n  reflect: true,\n  type: Boolean\n})], IgcAccordionComponent.prototype, \"singleExpand\", void 0);\n__decorate([queryAssignedElements({\n  selector: 'igc-expansion-panel'\n}), blazorSuppress()], IgcAccordionComponent.prototype, \"panels\", void 0);","map":{"version":3,"names":["LitElement","html","property","queryAssignedElements","styles","defineComponents","IgcExpansionPanelComponent","blazorSuppress","IgcAccordionComponent","_enabledPanels","panels","filter","p","disabled","constructor","singleExpand","handleKeydown","event","target","tagName","toLowerCase","includes","key","getPanelHeader","at","focus","handleUpDownArrow","addEventListener","capture","handlePanelOpening","panel","forEach","open","closePanel","isUp","focusedPanel","altKey","next","getNextPanel","shiftKey","openPanel","dir","panelIndex","indexOf","_a","shadowRoot","querySelector","emitEvent","cancelable","detail","hide","updateComplete","show","hideAll","showAll","render","__decorate","attribute","reflect","type","Boolean","selector"],"sources":["../../../src/components/accordion/accordion.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { property, queryAssignedElements } from 'lit/decorators.js';\nimport { styles } from './themes/accordion.base.css.js';\n\nimport { defineComponents } from '../common/definitions/defineComponents.js';\nimport IgcExpansionPanelComponent from '../expansion-panel/expansion-panel.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\n\ndefineComponents(IgcExpansionPanelComponent);\n\n/**\n * The Accordion is a container-based component that can house multiple expansion panels\n * and offers keyboard navigation.\n *\n * @element igc-accordion\n *\n * @slot - Renders the expansion panels inside default slot.\n */\nexport default class IgcAccordionComponent extends LitElement {\n  public static readonly tagName = 'igc-accordion';\n  public static override styles = styles;\n\n  private get _enabledPanels(): Array<IgcExpansionPanelComponent> {\n    return this.panels.filter((p) => !p.disabled);\n  }\n\n  /**\n   * Allows only one panel to be expanded at a time.\n   * @attr single-expand\n   */\n  @property({ attribute: 'single-expand', reflect: true, type: Boolean })\n  public singleExpand = false;\n\n  /** Returns all of the accordions's direct igc-expansion-panel children. */\n  @queryAssignedElements({ selector: 'igc-expansion-panel' })\n  @blazorSuppress()\n  public panels!: Array<IgcExpansionPanelComponent>;\n\n  constructor() {\n    super();\n    this.addEventListener('keydown', this.handleKeydown, { capture: true });\n    this.addEventListener('igcOpening', this.handlePanelOpening);\n  }\n\n  private handlePanelOpening(event: Event) {\n    const panel = event.target as IgcExpansionPanelComponent;\n    if (!this.singleExpand || !this.panels.includes(panel)) {\n      return;\n    }\n    this._enabledPanels.forEach((p) => {\n      if (p.open && p !== panel) {\n        this.closePanel(p);\n      }\n    });\n  }\n\n  private handleKeydown = (event: KeyboardEvent) => {\n    if (\n      (event.target as HTMLElement).tagName.toLowerCase() !==\n        'igc-expansion-panel' ||\n      !this._enabledPanels.includes(event.target as IgcExpansionPanelComponent)\n    ) {\n      return;\n    }\n    switch (event.key.toLowerCase()) {\n      case 'home':\n        this.getPanelHeader(this._enabledPanels.at(0)!).focus();\n        break;\n      case 'end':\n        this.getPanelHeader(this._enabledPanels.at(-1)!).focus();\n        break;\n      case 'arrowup':\n      case 'up':\n        this.handleUpDownArrow(true, event);\n        break;\n      case 'arrowdown':\n      case 'down':\n        this.handleUpDownArrow(false, event);\n        break;\n    }\n  };\n\n  private handleUpDownArrow(isUp: boolean, event: KeyboardEvent) {\n    const focusedPanel = event.target as IgcExpansionPanelComponent;\n    if (!event.altKey) {\n      const next = this.getNextPanel(focusedPanel, isUp ? -1 : 1);\n      if (next === focusedPanel) {\n        return;\n      }\n      this.getPanelHeader(next).focus();\n    }\n    if (event.shiftKey && event.altKey) {\n      if (this.singleExpand && !isUp) {\n        this._enabledPanels.forEach((p) =>\n          p !== focusedPanel ? this.closePanel(p) : this.openPanel(p)\n        );\n        return;\n      }\n\n      if (isUp) {\n        this._enabledPanels.forEach((p) => this.closePanel(p));\n      } else {\n        this._enabledPanels.forEach((p) => this.openPanel(p));\n      }\n    }\n  }\n\n  private getNextPanel(panel: IgcExpansionPanelComponent, dir: 1 | -1 = 1) {\n    const panelIndex = this._enabledPanels.indexOf(panel);\n    return this._enabledPanels[panelIndex + dir] || panel;\n  }\n\n  private getPanelHeader(panel: IgcExpansionPanelComponent) {\n    return panel.shadowRoot?.querySelector('div[part=\"header\"]') as HTMLElement;\n  }\n\n  private async closePanel(panel: IgcExpansionPanelComponent) {\n    if (!panel.open) {\n      return;\n    }\n    if (!panel.emitEvent('igcClosing', { cancelable: true, detail: panel })) {\n      return;\n    }\n    panel.hide();\n    await panel.updateComplete;\n\n    panel.emitEvent('igcClosed', { detail: panel });\n  }\n\n  private async openPanel(panel: IgcExpansionPanelComponent) {\n    if (panel.open) {\n      return;\n    }\n    if (!panel.emitEvent('igcOpening', { cancelable: true, detail: panel })) {\n      return;\n    }\n\n    panel.show();\n    await panel.updateComplete;\n\n    panel.emitEvent('igcOpened', { detail: panel });\n  }\n\n  /** Hides all of the child expansion panels' contents. */\n  public hideAll() {\n    this.panels.forEach((p) => p.hide());\n  }\n\n  /** Shows all of the child expansion panels' contents. */\n  public showAll() {\n    this.panels.forEach((p) => p.show());\n  }\n\n  protected override render() {\n    return html`<slot></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-accordion': IgcAccordionComponent;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}